{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"index.html","title":"NUS CS1010 Handbook for AY23/24 Semester 1","text":""},{"location":"index.html#_1","title":"Home","text":""},{"location":"index.html#important-general-information-about-cs1010","title":"Important General Information About CS1010","text":""},{"location":"index.html#teaching-team","title":"Teaching Team","text":""},{"location":"index.html#class-schedule","title":"Class Schedule","text":"Notes Lab Guide Programming Exercises"},{"location":"index.html#_2","title":"Home","text":""},{"location":"index.html#preliminaries","title":"Preliminaries","text":"<ul> <li> <p>1. Programming</p> <p>What is a program?  What is programming?  What is CS1010 about? </p> </li> <li> <p>2. Computational Problems</p> <p>What is a computational problem?  Express a step-by-step solution to a computational problem with a flowchart.  </p> </li> <li> <p>3. Functions</p> <p>Write functions that solve simpler sub-problems and then combine the functions to solve higher-level and more complex problems. </p> </li> <li> <p>4. Types</p> <p>Each variable has a type that tell the machine how to turn a bit sequence into a meaningful value. </p> </li> </ul>"},{"location":"index.html#basic-c","title":"Basic C","text":"<ul> <li> <p>5. First C Program</p> <p>Introducing basic C syntax and writing our first C program. </p> </li> <li> <p>6. CS1010 I/O</p> <p>Reading from the stdin and printing to the stdout using the CS1010 library. </p> </li> <li> <p>7. Arithmetic Operations</p> <p>Performing basic computation with arithmetic operations with C. </p> </li> </ul>"},{"location":"index.html#control-statements","title":"Control Statements","text":"<ul> <li> <p>8. Conditional Statements</p> <p>Implementing conditional control in C </p> </li> <li> <p>9. Logical Expressions</p> <p>How to express compound logical expressions in C </p> </li> <li> <p>10. Assertions</p> <p>Asserting what must be true at each point of the program. </p> </li> <li> <p>11. Loops</p> <p>Implementing iterative control in C </p> </li> <li> <p>12. Invariant</p> <p>Reasoning about loops with invariant </p> </li> </ul>"},{"location":"index.html#arrays-pointers-memory-management","title":"Arrays, Pointers, Memory Management","text":"<ul> <li> <p>13. Call Stack </p> <p>How calling a function and passing parameters by-value works. </p> </li> <li> <p>14. Fixed-Length Array</p> <p>How arrays are implemented and can be used in C </p> </li> <li> <p>15. Pointers</p> <p>How to access a variable via its address </p> </li> <li> <p>16. Call-by-Reference</p> <p>How to modify a variable by passing it into a function </p> </li> <li> <p>17. Heap</p> <p>Dynamically allocating and deallocating memory </p> </li> <li> <p>18. Characters and Strings</p> <p>Representing a string as an array of <code>char</code>s </p> </li> <li> <p>19. Multidimensional Array </p> <p>Using array of arrays </p> </li> </ul>"},{"location":"index.html#algorithms","title":"Algorithms","text":"<ul> <li> <p>20. Efficiency </p> <p>Quantify the efficiency of an algorithm with big-O running time. </p> </li> <li> <p>21. Searching </p> <p>How to look for an element in a list. </p> </li> <li> <p>22. Sorting </p> <p>How to rearrange a list of items into an order. </p> </li> <li> <p>23. Tower of Hanoi </p> <p>Solving the Tower of Hanoi recursively. </p> </li> <li> <p>24. Permutation</p> <p>Generate all possible permutations recursively. </p> </li> <li> <p>25. N-Queens</p> <p>Solving the N-Queens problem, recursively. </p> </li> </ul>"},{"location":"index.html#intermediate-c","title":"Intermediate C","text":"<ul> <li> <p>26. Structure </p> <p>Defining your own composite data type with <code>struct</code> </p> </li> <li> <p>27. Standard C I/O </p> <p>Use <code>printf</code> and <code>scanf</code> and their pitfalls </p> </li> </ul>"},{"location":"index.html#cs1010-pe","title":"CS1010 PE","text":"<ul> <li> <p>CS1010 Programming Environment</p> <p>We will be using a programming environment for CS1010 labs and practical exams. </p> </li> <li> <p>Linking GitHub to CS1010 PE</p> <p>We use GitHub Classroom for our labs.  Here is how to link your  GitHub account to your PE accounts. </p> </li> <li> <p>Using <code>tmate</code></p> <p><code>tmate</code> is a tool that is useful for sharing terminal with others. </p> </li> </ul>"},{"location":"index.html#vim","title":"Vim","text":"<ul> <li> <p>Philosophy of Vim</p> <p>Understand the philosophy behind the design of Vim and why it is useful. </p> </li> <li> <p>Quick Vim Lessons</p> <p>Learn the basic commands of Vim for navigation and editing. </p> </li> <li> <p>Vim Setup</p> <p>Set up your Vim properly for CS1010. </p> </li> <li> <p>Vim Extensions</p> <p>Learn about Vim extensions officially supported by CS1010. </p> </li> <li> <p>Vim Tips for CS1010</p> <p>Read about useful <code>vim</code> tips for CS1010. </p> </li> </ul>"},{"location":"index.html#unix","title":"Unix","text":"<ul> <li> <p>Background</p> <p>Understand the design principles of Unix and its power through its historical background. </p> </li> <li> <p>Essential Unix Commands</p> <p>Learn the essential commands to perform day-to-day operations in a Unix shell. </p> </li> <li> <p>Advanced Unix Commands</p> <p>Level-up your productivity when operating in a Unix shell. </p> </li> </ul>"},{"location":"index.html#c","title":"C","text":"<ul> <li> <p>C in CS1010</p> <p>C is a programming language with some nuances that get in the way of learning programming for beginners.   CS1010 bans and discourages some of these features. </p> </li> <li> <p>CS1010 I/O Library</p> <p>One of the ways CS1010 simplify C programming for beginners is to provide a library for robust reading and writing of common types without resorting to <code>printf</code> and <code>scanf</code>.  Read more about this <code>libcs1010</code> library here. </p> </li> <li> <p>C Style Guide</p> <p>Read more about the expected coding style that CS1010 has to follow </p> </li> <li> <p>C Documentation Guide</p> <p>Read more about the expected documentation format that CS1010 has to follow </p> </li> <li> <p>Compiling with <code>clang</code></p> <p>CS1010 hides much details about the use of <code>clang</code>, the C language compiler, behind the provided <code>Makefile</code>.  Students wishing to learn how to compile using <code>clang</code> can learn more here.. </p> </li> </ul>"},{"location":"index.html#exercise-0","title":"Exercise 0","text":""},{"location":"index.html#week-3","title":"Week 3","text":"<ul> <li>Questions</li> <li>Accept Link</li> </ul> Question I/O Types Arithmetic Function Difficulty 1 Echo 2 Divide 3 Ones 4 BMI 5 Quadratic 6 Cuboid"},{"location":"about.html","title":"CS1010 Course Information","text":""},{"location":"about.html#course-description","title":"Course Description","text":"<p>CS1010 introduces the fundamental concepts of problem-solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. It is also the first part of a three-part series on introductory programming and problem-solving by computing, which also includes CS2030/S and CS2040/C/S. Topics covered include problem-solving by computing, writing pseudocodes, basic problem formulation and problem-solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for SoC students.</p>"},{"location":"about.html#learning-outcomes","title":"Learning Outcomes","text":"<p>After taking CS1010, students should</p> <ul> <li>be familiar with fundamental programming concepts and methodology (variables, assignments, conditions, branches, loops, functions, recursions, structures);</li> <li>be familiar with and appreciate good programming practice, and apply it to follow-up courses;</li> <li>be able to apply problem-solving knowledge and skills to write small, well-documented, effective C programs;</li> <li>be able to appreciate the use of simple data structures such as arrays, and know their limitations to pave the way for more complex data structures in the next course;</li> <li>know the responsibilities of an ethical programmer;</li> <li>be able to write simple programs in the corresponding programming language to solve a task, given the constraints on the inputs;</li> <li>be able to manually trace through a program to identify logical errors;</li> <li>be able to differentiate between logical errors, syntax errors, and run-time errors;</li> <li>be exposed informally to the concept of code specification in the form of comments in the code, explaining what are the expected inputs and outputs and what are the assumptions;</li> <li>know about what are some insecure functions to avoid;</li> <li>be able to generate test cases on their own, with a focus on boundary/special cases;</li> <li>be aware of common strategies and good practices for debugging with <code>printf</code> or equivalent functions;</li> <li>be able to identify opportunities to, and write modularized code;</li> <li>be able to write code following a good programming style (clear comments, naming convention, indentation, etc.);</li> <li>understand the different data types and that there exists a representation of each in the memory, as well as the limitation of the representations due to the limited number of bits;</li> <li>develop a simple mental model of how a program is executed (CPU runs the code on data that is stored in memory, function call leads to the creation of call frames, which can explain recursion and variable scoping, etc).</li> <li>be able to understand at a high level the compilation process (from pre-processing to compiling to linking), where applicable;</li> <li>understand the concept of reusability and how a software application can be built on top of software libraries/packages (standard or third parties);</li> <li>be able to implement bubble sort and insertion sort;</li> <li>be able to implement linear search and binary search (both iterative and recursive versions);</li> </ul>"},{"location":"about.html#important-dates","title":"Important Dates","text":"<ul> <li>2 October 2023, Monday: Midterm Test (4 - 6 PM)</li> <li>3 October 2023, Tuesday: Practical Exam 0 (6 - 9 PM)</li> <li>24 October 2023, Tuesday: Practical Exam 1 (6 - 9 PM)</li> <li>14 November 2023, Tuesday: Practical Exam 2 (6 - 9 PM)</li> <li>1 December 2023, Friday: Final Exam (9 - 11 AM)</li> </ul> <p>Due to coordination with multiple other courses and logistics issues -- the practical exam dates/times are subject to change.  It will be finalized by Week 3 of the semester.</p>"},{"location":"about.html#prerequisites","title":"Prerequisites","text":"<p>Students entering CS1010 are expected to</p> <ul> <li>have basic knowledge of A-level Math (functions, graphing and transformation, sequences and series, vectors, complex numbers, probability, and statistics) and O-level Additional Math (algebra, geometry, and calculus).  We do not expect students to have any programming background before entering CS1010.</li> <li>be comfortable using computers and be able to follow high-level instructions (e.g., \"download and install this software\").</li> </ul>"},{"location":"about.html#lessons","title":"Lessons","text":""},{"location":"about.html#lectures","title":"Lectures","text":"<ul> <li>The weekly 2-hour lectures are typically where you learn about new concepts.   </li> <li>The lectures closely follow the course notes.  Students are encouraged to read through the notes before the lectures.</li> <li>The lectures will be recorded.  Screencasts of the lectures will be posted online 1-2 days after the lecture. This will be done on a 'best effort' basis.  The screencast is not guaranteed to be available on time, or at all.   Posting of the screencast is meant to help students who attended the lecture to recap the content or to help those who are not able to attend the lecture due to unexpected circumstances. It is not meant to be a replacement for lecture attendance.  Students are encouraged to attend the lectures live so that they can interact and ask questions.</li> <li>Lecture slides will be posted after the class. Note that slides are used as a visual aid to assist me during the lectures. It is not meant as a summary of lectures nor a replacement for lecture notes.</li> <li>We do not take attendance for the lectures.</li> </ul>"},{"location":"about.html#tutorials","title":"Tutorials","text":"<ul> <li>The weekly 1-hour tutorial sessions (starting Week 3) allow students to interact with the teaching staff in smaller groups and discuss the problem sets.</li> <li>Attendance will be taken.   Students who cannot attend a tutorial session should inform their corresponding tutor.</li> <li>Students are expected to attend their assigned tutorial session.  If there is a strong need to attend another session for a specific week, the student must inform the corresponding tutor.</li> </ul>"},{"location":"about.html#labs","title":"Labs","text":"<ul> <li>The weekly 2-hour lab sessions (starting Week 3) allow students to participate in hands-on learning activities.</li> <li>Activity varies, but in most weeks, students and lab tutors will discuss the programming exercises and explore the thought process and different solutions together.</li> <li>The lab sessions are usually where most of the learning happens.  </li> <li>Attendance will be taken.   Students who cannot attend a lab session should inform their corresponding tutor.</li> <li>Students are expected to attend their assigned lab session.  If there is a strong need to attend another session for a specific week, the student must inform the corresponding tutor.</li> </ul>"},{"location":"about.html#catch-up-sessions","title":"Catch-Up Sessions","text":"<ul> <li>Every three weeks, we run a 2-hour Q&amp;A session for students to clarify doubts on Saturday morning.  </li> <li>Attendance is optional, but we strongly encourage students who are falling behind to take this opportunity to clarify doubts and catch up.</li> <li>Catch-up sessions are recorded.  The video will be shared after the session.</li> </ul>"},{"location":"about.html#assessment","title":"Assessment","text":""},{"location":"about.html#assessment-types","title":"Assessment Types","text":"<p>There are two types of assessment, formative and summative assessments.</p> <p>Formative assessments in CS1010 include problem sets, programming exercises, and online quizzes.  They carry little weight (10%) and are meant to help students self-diagnose and improve their problem-solving ability, programming skills, and understanding of the concepts taught in class.  They are also meant to make students think deeper about the lessons, apply what they learn, and gain experience and confidence in their problem-solving/programming ability.  Despite the smaller weightage, we expect that students spend most of their time on formative assessments.</p> <p>The summative assessments, on the other hand, are meant to evaluate student learning.  These include two written assessments (the midterm and the final exam) and three practical exams.  These are high-stakes assessments carrying 90% of the total weights.</p> <ul> <li>Problem Sets: At the end of some lesson units, we will provide some exercise questions to make students reflect and practice applying what they have learned in the corresponding unit. These questions are not graded. There is no need to submit answers for grading. They will be discussed and presented during the tutorial sessions.</li> <li>Past Year Test Papers: Past year test papers are made available for practice.  These are not graded.  There is no need to submit answers for grading.  Selected questions may be discussed during class.  They can be discussed on Piazza.</li> <li>Quizzes: The online quizzes are released every week after the lecture (Monday, 6 PM) and are due two days later (Wednesday, 11:59 PM). The quizzes are more tightly coupled to the content of the weekly lectures and are meant to help students self-diagnose their understanding of what is taught for that week.  You may attempt the quizzes an unlimited number of times.  We will consider only your highest score.</li> <li>Programming Exercises: These are programming questions of various difficulty levels that are critical for students to solve, to gain experience, skills, and confidence in solving computational problems with C. Typically students spend more than half of their time in CS1010 on solving these programming exercises. Students should submit them on time to get feedback from their lab tutors.</li> <li>Practical Exams: Students will be given programming questions to solve within a limited time frame, in an examination setting in SoC computer labs.  This is usually held in the evening or on a Saturday.</li> <li>Midterm and Final Exams are written tests (on pen and paper) conducted in exam halls.</li> </ul>"},{"location":"about.html#assessment-weightage","title":"Assessment Weightage","text":"<ul> <li>Quizzes: 5%</li> <li>Programming Exercises: 5%</li> <li>Practical Exam 0: 10%</li> <li>Practical Exam 1: 15%</li> <li>Practical Exam 2: 20%</li> <li>Midterm Assessment: 15%</li> <li>Final Assessment: 30%</li> </ul>"},{"location":"about.html#open-book-assessment","title":"Open-Book Assessment","text":"<ul> <li>All assessments, including practical exams and written exams, are open-book assessments -- you can bring in your notes or other analog reference materials.</li> </ul>"},{"location":"about.html#use-of-ai-tools","title":"Use of AI Tools","text":"<ul> <li>Access to AI tools is restricted during the summative assessments (practical exams and written exams)</li> <li>Students may use AI tools to assist them to complete their formative assessments (quizzes, problem sets, and programming exercises).  The use of AI tools, however, should be moderated and used to help students achieve the learning outcomes of CS1010.  It is pointless to use AI tools to generate answers to formative assessments.</li> <li>Students should familiarise themselves with the NUS policy on the use of AI tools and the guidelines for using AI tools for academic work</li> </ul>"},{"location":"about.html#discussion-and-plagiarism","title":"Discussion and Plagiarism","text":"<ul> <li>We encourage discussions among students for programming exercises, but each student should be responsible for writing his/her code and should give credit to others when appropriate.</li> <li>NUS and the School of Computing have a high standard of academic honesty and take any violation seriously. In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's code -- is a serious violation. Please read the page Preventing Plagiarism from the school's website to familiarize yourself with the policy.</li> <li>CS1010 adopts a \"no mercy\" policy when it comes to disciplinary action on plagiarism. Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.</li> <li>Considering that the programming exercises are meant to be formative and contribute very little to the grade of CS1010, there is no point in plagiarising when solving programming exercises. Doing so would not help students learn and prepare them for the practical exams.</li> </ul>"},{"location":"about.html#latemissed-submission-policy","title":"Late/Missed Submission Policy","text":"<ul> <li>No late submission will be considered for quizzes and programming exercises.  Note that students are allowed to miss up to 10% of the submissions.  </li> <li>Students who have to miss more than 10% of their submissions should email cs1010@comp.nus.edu.sg with a justification for missing the deadline within 24 hours of the deadline.  Only medical, academic, and compassionate reasons can be considered (e.g., representing NUS for a sports event is OK; Attending a wedding is not). Documented proofs (e.g., medical certificates) are required.</li> <li>Tutors are not obligated to provide feedback on code that are submitted late.</li> </ul>"},{"location":"about.html#absence-from-midterm-and-practical-exams","title":"Absence from Midterm and Practical Exams","text":"<ul> <li>Students who are absent during a practical exam or the midterm test  must inform the teaching team (by emailing cs1010@comp.nus.edu.sg or through filling up an online form) with a justification for missing the exam within 24 hours after the end of the exam.  Only medical, academic, and compassionate reasons can be considered (e.g., representing NUS for a sports event is OK; Clashes with another course activity is OK; Attending a concert is not). Documented proofs (e.g., medical certificates, email from the other course instructor) are required.</li> <li>Being absent without justification during a practical exam or the midterm test will result in 0 marks for the corresponding assessment.</li> <li>An alternative assessment will be arranged for students who are absent during the midterm or practical exams with valid justification.</li> </ul>"},{"location":"about.html#absence-from-final-exam","title":"Absence from Final Exam","text":"<ul> <li>The final exam is administered by the School and the Registrar's Office and thus followed a separate procedure.  Students who are absent from the final exam should apply for special consideration.  Details can be found at the NUS Student Portal (look under Special Consideration).</li> </ul>"},{"location":"about.html#grading","title":"Grading","text":"<ul> <li>CS1010 is not graded using a bell curve. </li> <li>A student will receive the grade he or she deserves, irrespective of how the other students in the class perform.</li> <li>The number of As and Fs will not be artificially capped.</li> <li>As such, students should work together and help each other learn, instead of competing with each other for a limited number of As.</li> </ul>"},{"location":"about.html#the-teaching-team","title":"The Teaching Team","text":"<p>You can find the members of the teaching team here. You can reach the team at cs1010@comp.nus.edu.sg</p> <p>The team is responsible for facilitating your learning in CS1010. Their responsibilities include:</p> <ul> <li>Planning and delivering the lessons during lectures, tutorials, and labs;</li> <li>Facilitating hands-on practices and discussions during tutorials and labs;</li> <li>Clarifying any doubts from students during class or offline via Piazza;</li> <li>Setting the assessment questions and practice exercises</li> <li>Providing feedback on submitted assessments and exercises;</li> <li>Planning and running the practical exams and the midterm test;</li> </ul> <p>Please note that the following are not handled by the CS1010 teaching team.  We can help to forward your requests to the relevant office but often it is faster if you contact them directly:</p> <ul> <li>Allocation of labs and tutorials (This is handled by the SoC UG office, through CourseReg)</li> <li>Management of programming environments, including the PE hosts, VPN, and computer labs (This is handled by the SoC IT Unit. You can contact them here)</li> <li>Planning and running the final examination (This is handled centrally with all other exams by the NUS Registrar Office.  You can contact them via examinations@nus.edu.sg);</li> </ul>"},{"location":"about.html#communication-policy","title":"Communication Policy","text":"<ul> <li>Piazza is the preferred platform if you have questions to ask or issues to raise (either publicly to your classmates or privately to the instructors)</li> <li>If you must use email, please send it to the email address cs1010@comp.nus.edu.sg.  This is a large course managed by a team.  Doing so would ensure that your email receives the right attention and is handled by the right member of the team.  Emailing individual instructors may cause a delay in response (if the email is not lost).</li> <li>Only email a specific individual instructor or message the instructor using Canvas if you have matters that are personal and private.</li> <li>Prefix your email subject with [CS1010]</li> <li>Use only your official NUS email for communication with the teaching staff -- either the one with @u.nus.edu or @comp.nus.edu.sg.</li> <li>If you email us your question, and we feel that your question and the answer are useful to the rest of the class, we will publish it on Piazza, with proper anonymization.</li> </ul>"},{"location":"about.html#essential-web-resource","title":"Essential Web Resource","text":"<p>CS1010 uses several web applications to manage the content, assessments, and interaction with students.</p> <ul> <li>Canvas: Announcements, class rosters, surveys, quizzes, grades, and sharing of PDF documents are managed through Canvas.</li> <li>Handbook: Notes, problem sets, programming exercises, and lab guides, are publicly available on the web.</li> <li>Piazza: Q &amp; A website that serves as the main forum for discussion about CS1010.</li> <li>GitHub: Contains submitted code repositories and feedback about the code from tutors.</li> <li>Softmark: Contain written test scripts and feedback about the answers.</li> </ul>"},{"location":"about.html#asking-questions-and-getting-help","title":"Asking Questions and Getting Help","text":"<p>CS1010 is not an easy course. Students are encouraged to ask questions if they don't understand something or if they are stuck solving a formative assessment question.  Students are encouraged to ask questions during lectures, tutorials, and lab sessions.  Outside of these lessons, there are several ways to do so.</p> <ul> <li>Piazza:<ul> <li>The best place to get help is on Piazza.  If you have a question, please first check if someone has already asked the same question and if there is an answer.  </li> <li>Students are expected to monitor Piazza regularly and learn from the interaction happening there.  Often, students asked good questions that can bring new insights to understanding the course materials.</li> <li>If your question has not been answered, you can post a question yourself.  Please follow the general etiquette and guidelines of asking questions on Piazza if you do so.</li> </ul> </li> <li>Office Hours:<ul> <li>Course instructors and tutorial instructors have set aside a weekly office hour to meet and answer questions from students, face-to-face.  Students are encouraged to meet with their tutorial instructors during this hour to clarify doubts and ask for help.</li> <li>Outside of this fixed hour, students can arrange for an appointment to meet with the tutorial instructors.</li> </ul> </li> <li>Messaging:<ul> <li>Many lab tutors made themselves available on messaging platforms to answer questions from their students.</li> <li>Note that lab tutors are not obligated to be available 24/7 to answer questions through messaging.   Each lab tutor is free to set their own policy on when they are available to answer questions via their choice of messaging platforms.</li> <li>We encourage all Q&amp;A to be done through Piazza so that all students can benefit from the questions and answers, instead of these messaging platforms, which only benefit a subset of students. </li> </ul> </li> </ul>"},{"location":"about.html#mental-health-and-wellness","title":"Mental Health and Wellness","text":"<ul> <li>Adjusting to new ways of learning and a new environment at NUS can be challenging, and it may be especially more so for students from diverse backgrounds and circumstances. </li> <li>If you feel stressed, anxious, depressed, overwhelmed, or just need someone to talk to, you may reach out to the SoC Student Support Manager from the Student Life office or the NUS University Counselling Services</li> <li>You may also approach the CS1010 Teaching Team, who can work with these services to support and accommodate students who need help (e.g., with alternative deadlines).</li> <li>Consider this - As you embark on your university journey with SoC, it's crucial to remember that your goals extend beyond just scoring high grades. While studying is important, equally vital are opportunities for personal growth, forming meaningful connections, enjoying life, and preparing for your future career. It is essential to maintain a healthy balance between academics and mental well-being, recognizing that a few marks should never jeopardize your overall health and well-being.</li> </ul>"},{"location":"about.html#expectations","title":"Expectations","text":"<p>To maximize the gain out of CS1010, students should commit to</p> <ul> <li>reading through the announcements, emails, and Piazza posts, to keep themselves up to date with the latest course activities and discussions in CS1010;</li> <li>following instructions and respecting stipulated deadlines on administrative matters;</li> <li>reading the provided lecture notes, attending classes, and actively seeking clarification when doubts arise;</li> <li>making a best effort attempt at solving the quizzes, problem sets, programming exercises, and past year questions; not copying solutions from friends, AI, or other online sources;</li> <li>striving to understand the thought process and the principle behind the solutions/sample code (from the teaching team or otherwise) after they are released;</li> <li>helping each other learn (through discussion and teaching each other) to better understand the course materials and to solve the assessment questions, without providing solutions verbatim for others to copy;</li> <li>actively participating in lab and tutorial lessons, by asking questions, sharing attempts, and commenting on each others' attempts;</li> <li>actively asking for guidance and feedback, when feeling lost with what is taught or falling behind.</li> </ul>"},{"location":"readings.html","title":"Readings and Other Resources","text":""},{"location":"readings.html#reference-book","title":"Reference Book","text":"<p>Modern C by Jens Gustedt, November 2019, ISBN 9781617295812.</p>"},{"location":"readings.html#must-read","title":"Must Read","text":"<p>How NOT to Go About a Programming Assignment, by Agustin Cernuda del Rio. </p> <p>Computer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again).._</p> <p>Best Teacher I Ever Had, by David Owen.  </p> <p>Mr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, .._</p>"},{"location":"readings.html#why-c","title":"Why C?","text":"<p>Learn C programming and the rest will come, by Marty Jacobs</p> <p>C is a concise language, and in its 45 years of existence, it has cemented its place as an essential tool in any programmer\u2019s arsenal. But why?</p> <p>The Resurgence of C Programming, by Mark Barlow</p> <p>\u201cC is the Latin of programming languages,\u201d says Ptah Pirate Dunbar, an open source hacker and professor of computer science. He notes that many commonly used high-level languages are influenced by C through syntax, function, or both. \u201cLearning C empowers developers with the mental flexibility required for transitioning across C-influenced languages with ease and agility.\u201d </p> <p>You Can't Dig Upwards, by Evan Miller</p> <p>To write extremely good software \u2014whether it\u2019s desktop, mobile, extraplanetary \u2014you need a firm understanding of how computers and operating systems work at a low level. How many data structures fit into the CPU cache? Why is this code slow when the built-in profiler says it is fast? When I ask the operating system to do something, what is it actually doing? I suppose you can acquire this knowledge with a strict reading regimen, but to develop the necessary intuition, there\u2019s no substitute for writing and optimizing a lot of C code.</p>"},{"location":"readings.html#vim","title":"Vim","text":"<p>Time to Drop Emacs and Vi? on StackOverflow.  </p> <p>Programmers are notorious for using the tools that helps them get the job done in the most efficient way possible. These editors are ancient yet still being used because they are good, solid editors, proven by time. If they get the job done and get the job done well, why should we drop them in favor of something else?\"</p> <p>What are the benefits of learning Vim? on Stack Overflow.  </p> <p>Usually vim's killer features are considered: A) that it's available on pretty much every Unix you'll ever encounter and B) your fingers very rarely have to leave the home row, which means you'll be able to edit text very, very quickly. It's also usually very fast and lightweight even when editing huge files.\"</p> <p>Learn <code>vim</code> Progressively</p> <p>I suggest you teach yourself Vim in 4 steps: 1. Survive. 2.  Feel comfortable. 3.  Feel Better, Stronger, Faster. 4.  Use superpowers of vim.</p> <p>-Where Vim Came From -- from TwoBitHistory.  </p> <p>Perhaps more importantly, while we\u2019re asking questions, why does exiting Vim involve typing :wq? Sure, it\u2019s a \u201cwrite\u201d operation followed by a \u201cquit\u201d operation, but that is not a particularly intuitive convention. Who decided that copying text should instead be called \u201cyanking\u201d? Why is :%s/foo/bar/gc short for \u201cfind and replace\u201d? Vim\u2019s idiosyncrasies seem too arbitrary to have been made up, but then where did they come from?</p> <p>Vim's Big Idea - by Mike Kozlowski. </p> <p>This philosophy of minimalist commands that can be composed together is the fundamental originating philosophy of Unix, and Vim exemplifies it like no other editor.</p> <p>VIM Pays Excellent Dividends - by John Bjorn Nelson.  </p> <p>Being conservative, let\u2019s say it makes you 5% more productive. More specifically\u200a\u2014\u200aonce your brain maps the keystrokes to muscle memory\u200a\u2014\u200ait makes you 5% faster at completing the mundane tasks\u2026the ones which dominate programming. That added productivity snowballs. It\u2019s an extra twenty minutes a day to build or explore (or learn), that used to go to copy/paste-like operations.</p> <p>The Powers of VIM by Artem Dudarev</p> <p>The 11 Steps to Learning Vim - by damassi. </p> <p>Regardless of the initial confusion and difficulty in getting started, you're making your future developer self immensely more productive by diving in and taking the plunge. Seriously. I'm just a few weeks in right now and I can positively say that learning Vim has been the best work-related decision of my life. It's fun, and in the strangest of ways it makes you think better.</p> <p>Vim for People Who Think Things like Vim and Weird and Hard - by Harry Roberts. </p> <p>.. the fact that, yes, people still use an editor that is over 20 years old (in turn based on a tool from the 70s), and those people number in the hundreds of thousands, perhaps they might be onto something.</p> <p>Why I use Vim - Pascal Precht. </p> <p>once I was able to do some basic operations in Vim and actually started working again, I made almost as twice as much progress at work in about half the time. I know that sounds kind of crazy but I\u2019m serious. And that convinced me that I made the right choice._</p> <p>So, do yourself a favor and climb that mountain. Just remember that you can slide down afterwards.\"</p>"},{"location":"schedule.html","title":"Class Schedule","text":"Week Starting Lecture PE Tutorials Labs Catch-Up Sessions Monday Tuesday Wednesday Thursday Saturday 1 2023-08-14 Units 1-2: Computational Problem-Solving 2 2023-08-21 Units 3-4: Functions and Types 3 2023-08-28 Units 5-7: Basic C Programming Problem Set 2 Unix/Vim Setup Session 1 4 2023-09-04 Units 8-10: Conditionals Problem Sets 3, 8 Debugging 5 2023-09-11 Units 11-12: Loops Problem Sets 9- 10 Coding Style 6 2023-09-18 Units 13-14: Call Stack, Arrays Problem Sets 11-12 Test Cases Session 2 2023-09-25 Recess 7 2023-10-02 Midterm PE0 Problem Sets 13-14 8 2023-10-09 Units 15-18:Pointers, Memory Management Problem Sets 15-17 Memory Errors 9 2023-10-16 Units 19-20: Multi-d Array, Efficiency Problem Sets 20 Compiling with Clang 10 2023-10-23 Units 21-22: Searching and Sorting PE1 Problem Sets 21- 22 C Pre-processor Session 3 11 2023-10-30 Units 23-25: More Recursion Problem Sets 23-25 Documentation 12 2023-11-06 Units 26-27: Struct &amp; Recap Past Year Papers 13 2023-11-13 Public Holiday PE2 Session 4 <ul> <li>Catch-up sessions are optional review + Q&amp;A sessions meant for students who need time to recap and catch up. They are held on Saturday 10 AM to 12 PM.</li> <li>Practical exams (PEs) are held on Tuesday evening from 6 to 9 PM</li> <li>Midterm is held during the lecture slot.</li> </ul>"},{"location":"team.html","title":"The CS1010 Teaching Team","text":""},{"location":"team.html#lecturer","title":"Lecturer","text":"<ul> <li>Ooi Wei Tsang (Associate Professor, Computer Science)</li> </ul>"},{"location":"team.html#tutorial-instructors","title":"Tutorial Instructors","text":"<ul> <li>Henry Chia (Senior Lecturer, Computer Science)</li> <li>Gizem Balikci (Ph.D. Student and Teaching Assistant, Computer Science)</li> <li>Malaika Afra Taj (Ph.D. Student and Teaching Fellow, Computer Science)</li> <li>Ang Zhendong (Ph.D. Student, Computer Science)</li> <li>Sng Weicong (Ph.D. Student, Computer Science)</li> </ul>"},{"location":"team.html#lab-tutors","title":"Lab Tutors","text":"<ul> <li>Albert Sutiono (Computer Engineering, Year 4)</li> <li>Bian Rui (Computer Engineering, Year 3)</li> <li>Choong Zhan Hong (Communications And New Media, Year 4)</li> <li>Edward Humianto (Computer Engineering, Year 2)</li> <li>Ee Zhi Jun Justin (Computer Science, Year 4)</li> <li>Ellawela Suveen Thinusha Bandara (Computer Engineering, Year 2)</li> <li>Irving Alexander de Boer (Computer Engineering, Year 3)</li> <li>James Hong Jey (Computer Engineering, Year 2)</li> <li>Jansen Ryan Patrick (Computer Science, Year 3)</li> <li>Jason Lienardi (Computer Engineering, Year 2)</li> <li>Justin Fidelis Wong Jun Wen (Computer Engineering, Year 4)</li> <li>Kerby Soh Chen Ker (Computer Science, Year 4)</li> <li>Liang Yuzhao (Computer Engineering, Year 4)</li> <li>Lui Wen-Jie, Benjamin (Computer Science Year 4)</li> <li>Miguel Foo Ming Yew (Computer Science, Year 2)</li> <li>Narang Hardik (Computer Science, Year 4)</li> <li>Pereira Prince Matthew James (Computer Engineering, Year 3)</li> <li>Phan Dinh Hung (Computer Engineering, Year 2)</li> <li>Pua Cheng Xuan Frederick (Computer Engineering, Year 2)</li> <li>Sai Sumanth Yalamarty (Computer Science, Year 4)</li> <li>Shanmugam Udhaya (Computer Science, Year 2)</li> <li>Shi Jiaao (Music, Year 4)</li> <li>Syed Omar Zoran (Computer Engineering, Year 2)</li> <li>Tan Dexter (Computer Engineering, Year 1)</li> <li>Vijayaraghavan Vishnuprasath (Computer Science, Year 2)</li> <li>Wang Xingyu (Information Security, Year 2)</li> <li>Yap Shan Teng (Computer Engineering, Year 2)</li> <li>Yeo Zhi Shen (Computer Engineering, Year 2)</li> <li>Yuv Bindal (Electrical Engineering, Year 2)</li> <li>Zhang Puyu (Mathematics, Year 2)</li> </ul>"},{"location":"team.html#support","title":"Support","text":"<ul> <li>Zhang Yuehan (Ph.D., Computer Science)</li> </ul>"},{"location":"exercises/ex00.html","title":"Exercise 0: I/O, Types, Arithmetic, Functions","text":""},{"location":"exercises/ex00.html#prerequisite","title":"Prerequisite","text":"<p>Before attempting this exercise, please make sure that you:</p> <ul> <li>can access the CS1010 programming environment.</li> <li>are familiar with basic UNIX CLI and using the terminal-based editor <code>vim</code>.</li> <li>have set up your <code>vim</code>.</li> <li>have read the guide and instructions for programming exercises.</li> </ul>"},{"location":"exercises/ex00.html#learning-outcomes","title":"Learning Outcomes","text":"<p>Be comfortable writing simple C programs that involve I/O, <code>long</code> and <code>double</code> types, arithmetic operations, and function decomposition/reuse.</p>"},{"location":"exercises/ex00.html#one-time-setup","title":"One-Time Setup","text":"<p>Before going into your first programming exercise, you need to do a one-time setup of your account on PE.  Follow the instructions here.</p>"},{"location":"exercises/ex00.html#concepts-and-difficulty","title":"Concepts and Difficulty","text":"Question I/O Types Arithmetic Function Difficulty 1 Echo 2 Divide 3 Ones 4 BMI 5 Quadratic 6 Cuboid"},{"location":"exercises/ex00.html#question-1-echo","title":"Question 1: Echo","text":"<p>Write a program <code>echo</code> (source file <code>echo.c</code>) that reads in an integer and prints that integer to the standard output.</p>"},{"location":"exercises/ex00.html#sample-run","title":"Sample run:","text":"<pre><code>ooiwt@pe111:~/ex00-ooiwt$ ./echo\n123\n123\nooiwt@pe111:~/ex00-ooiwt$ ./echo\n-1\n-1\n</code></pre> <p>The text <code>ooiwt@pe111:~/ex00-ooiwt$</code> is the command prompt.  Yours will look different, of course.  <code>echo</code> is the executable you created.  The next line, <code>123</code>, is the input you provide.  Press enter after the input.  <code>123</code> is the output printed by <code>echo</code>.</p>"},{"location":"exercises/ex00.html#question-2-divide","title":"Question 2: Divide","text":"<p>Write a program <code>divide</code> (source file <code>divide.c</code>) that reads in two integers, \\(x\\) and \\(y\\), and print the value of \\(x\\) divided by \\(y\\).  You can assume that \\(y\\) is never 0.</p>"},{"location":"exercises/ex00.html#sample-run_1","title":"Sample run:","text":"<pre><code>ooiwt@pe111:~/ex00-ooiwt$ ./divide\n10 2\n5.0000\nooiwt@pe111:~/ex00-ooiwt$ ./divide\n1 2\n0.5000\n</code></pre> <p>Question Credit: Hu Jialun (cohort 20/21)</p>"},{"location":"exercises/ex00.html#question-3-ones","title":"Question 3: Ones","text":"<p>Write a program <code>ones</code> (source file <code>ones.c</code>) that reads in a positive integer \\(n\\) that is at least 10.  Print two lines to the standard output: the first line contains the last digit of \\(n\\).  The next line contains all the other digits of \\(n\\) excluding the last one. </p>"},{"location":"exercises/ex00.html#sample-run_2","title":"Sample run:","text":"<pre><code>ooiwt@pe111:~/ex00-ooiwt$ ./ones\n10\n0\n1\nooiwt@pe111:~/ex00-ooiwt$ ./ones\n95324\n4\n9532\n</code></pre>"},{"location":"exercises/ex00.html#question-4-bmi","title":"Question 4: BMI","text":"<p>Your body mass index (BMI) can be calculated by your body mass divided by the square of the body height.  BMI is expressed in units of \\(kg/m^2\\). </p> <p>Write a program <code>bmi</code> (source file <code>bmi.c</code>) that reads in two real numbers \\(h\\) and \\(w\\) from the standard input.  \\(h\\) is the height of a person in centimeters (cm), and weight is the weight of the person in kilograms (kg).</p> <p>Your program must include a function called <code>compute_bmi</code> that takes in two parameters, the weight in kilograms (kg), and height in meters (m), and return the corresponding BMI of the given weight and height.</p> <p>Question Credit: Hu Jialun (cohort 20/21)</p>"},{"location":"exercises/ex00.html#sample-run_3","title":"Sample run:","text":"<pre><code>ooiwt@pe111:~/ex00-ooiwt$ ./bmi\n100.0 50\n50.0000\nooiwt@pe111:~/ex00-ooiwt$ ./bmi\n182.9 70.125\n20.9626\n</code></pre>"},{"location":"exercises/ex00.html#question-5-quadratic","title":"Question 5: Quadratic","text":"<p>Write a program <code>quadratic</code> (source file <code>quadratic.c</code>) that reads in three floating point numbers, \\(a\\), \\(b\\), and \\(c\\), that represent the quadratic equation \\(ax^2 + bx + c = 0\\), and prints its two roots.  Assume that \\(a \\not = 0\\) and \\(b^2 &gt; 4ac\\).  Recall that the roots are:</p> \\[ \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \\] <p>Print the root \\(\\frac{-b + \\sqrt{b^2 - 4ac}}{2a}\\) first on one line, followed by the other root \\(\\frac{-b - \\sqrt{b^2 - 4ac}}{2a}\\) on the next line.</p> <p>Try and decompose the computation of the roots into smaller functions for reusability.</p>"},{"location":"exercises/ex00.html#sample-run_4","title":"Sample run:","text":"<pre><code>ooiwt@pe111:~/ex00-ooiwt$ ./quadratic\n1.0 -2.0 1.0\n1.0000\n1.0000\nooiwt@pe111:~/ex00-ooiwt$ ./quadratic\n2.0 -7.0 3.0\n3.0000\n0.5000\n</code></pre>"},{"location":"exercises/ex00.html#question-6-cuboid","title":"Question 6: Cuboid","text":"<p>A cuboid is a 3D shape with six rectangular faces.  We can specify such a cuboid with three parameters, the width \\(w\\), the length \\(l\\), and the height \\(h\\).</p> <p></p> <p>Our task is to calculate (i) the surface area of a cuboid, and (ii) the length of the diagonal of the cuboid (the red dash line in the figure above). </p> <p>Complete the task by decomposing the calculations into two functions.  To complete this task, in <code>cuboid.c</code>,</p> <ul> <li>Write a function <code>hypotenuse_of</code> to compute the hypotenuse of a right-angled triangle, given the length of the legs (the sides adjacent to the right angle).</li> <li>Write a function <code>area_of_rectangle</code> that computes the area of a rectangle given its width and length.</li> </ul> <p>Finally, complete the program <code>cuboid.c</code> so that it reads, from the standard input, three positive integers representing the width, length, and height of the cuboid (in that order) and prints, to the standard output, its surface area, followed by the length of its diagonal.</p> <p>Solve this question by using composing and reusing the two functions above.  You may add additional functions if needed.</p> <p>Pay attention to the types (<code>long</code> or <code>double</code>) used in the inputs, calculations, and outputs.  Keep your variable as integer type (<code>long</code>) as long as possible.</p>"},{"location":"exercises/ex00.html#sample-run_5","title":"Sample Run","text":"<pre><code>ooiwt@pe111:~/ex00-ooiwt$ ./cuboid\n3 4 12\n192\n13.0000\nooiwt@pe111:~/ex00-ooiwt$ ./cuboid\n9 12 8\n552\n17.0000\n</code></pre>"},{"location":"exercises/ex01.html","title":"Exercise 1: Conditionals","text":""},{"location":"exercises/ex01.html#prerequisite","title":"Prerequisite","text":"<p>You have completed Exercise 0. </p>"},{"location":"exercises/ex01.html#learning-outcomes","title":"Learning Outcomes","text":"<p>Be comfortable writing simple C programs that involve conditional statements and logical expressions.</p>"},{"location":"exercises/ex01.html#deadline","title":"Deadline","text":"<p>This is part of CS1010 formative assessment. Submit before 11 September 2023, 23:59 to receive feedback and earn your achievement \"badges\".</p>"},{"location":"exercises/ex01.html#acceptance-link","title":"Acceptance Link","text":"<p>The link to accept the exercise is not available publicly.  Visit Canvas for the link.</p>"},{"location":"exercises/ex01.html#concepts-and-difficulty","title":"Concepts and Difficulty","text":"Question Conditions Comparison Logical Expression Recursion Difficulty 1 Odd 2 Sum 3 Candy 4 Triangle 5 Leap 6 Multiple 7 Date^ 8 Pressure^ 9 GCD^ 10 Digits 11 Power 12 Suffix 13 Taxi <p>^: Questions 7 - 9 serve as in-class exercise during lab session in Week 4.</p>"},{"location":"exercises/ex01.html#question-1-odd","title":"Question 1: Odd","text":"<p>Write a program <code>odd</code> (source file <code>odd.c</code>) that reads in an integer \\(n\\) and prints the smallest odd number that is larger than \\(n\\) to the standard output.</p> <p>Your program must find the answer within a function that takes in an integer and returns an integer called <code>find_next_odd</code>.</p>"},{"location":"exercises/ex01.html#sample-runs","title":"Sample Runs","text":"<pre><code>ooiwt@pe112:~/ex01-ooiwt$ ./odd\n1234\n1235\nooiwt@pe112:~/ex01-ooiwt$ ./echo\n-1\n1\n</code></pre> <p>Note: There is a less straightforward way to solve this question without using conditional statements.  See if you can solve it this way! (Credit: Hu Jialun (cohort 20/21))</p>"},{"location":"exercises/ex01.html#question-2-sum","title":"Question 2: Sum","text":"<p>Write a program <code>sum</code> (source file <code>sum.c</code>) that reads in two integers, \\(x\\) and \\(y\\), ignores any negative numbers, and prints the sum of the remaining (non-negative) numbers.  If both numbers are negatives, the sum is 0.</p> <p>Your program must find the answer within a function named <code>compute_sum_if_positive</code>.</p>"},{"location":"exercises/ex01.html#sample-runs_1","title":"Sample Runs","text":"<pre><code>ooiwt@pe111:~/ex01-ooiwt$ ./sum\n123456\n-100\n123456\nooiwt@pe111:~/ex01-ooiwt$ ./sum\n-1\n-2\n0\nooiwt@pe111:~/ex01-ooiwt$ ./sum\n1\n2\n3\n</code></pre>"},{"location":"exercises/ex01.html#question-3-candy","title":"Question 3: Candy","text":"<p>Beng needs to pack a bunch of candies into as few boxes as possible.  Each box can hold only a certain number of candies.</p> <p>Write a program <code>candy</code> that reads from the standard input two positive integers representing the number of candies that Beng has and the maximum number of candies that a box can hold.</p> <p>Your program must contain a function called <code>compute_num_of_boxes</code> that computes the minimum number of boxes that Beng needs to pack all the candies into.  The function should take in the number of candies and the maximum number of candies a box can hold as arguments, and return the number of boxes needed.</p> <p>Your program then prints, to the standard output, the number of boxes needed.</p> <p>For example, if there are 8 candies and each box can hold a maximum of 2 candies, then Beng needs 4 boxes.  If each box can hold a maximum of 3 candies, then only 3 boxes are needed.</p>"},{"location":"exercises/ex01.html#sample-runs_2","title":"Sample Runs","text":"<pre><code>ooiwt@pe111:~/ex01-ooiwt$ ./candy\n8 2\n4\nooiwt@pe111:~/ex01-ooiwt$ ./candy\n8 3\n3\n</code></pre>"},{"location":"exercises/ex01.html#question-4-triangle","title":"Question 4: Triangle","text":"<p>In a triangle, the sum of the length of any two sides is always longer than of the third side.  The area of the triangle with sides \\(a\\), \\(b\\), \\(c\\), can be computed with Heron's formula:</p> \\[\\sqrt{s(s-a)(s-b)(s-c)}\\] <p>where \\(s\\) is half of the perimeter:</p> \\[s = \\frac{a + b + c}{2}\\] <p>Write a program <code>triangle</code> that reads from standard input three positive integers representing the three sides of a triangle.  The program then either - prints, to the standard output, <code>Possible</code> if it is possible to create such a triangle, followed by the area of the triangle; or - prints <code>Impossible</code> if it is impossible to create such a triangle.</p> <p>For instance, suppose that you are given the three sides of a triangle <code>3 4 5</code>. Then the program prints: <pre><code>Possible\n6.0000\n</code></pre></p> <p>Suppose that you are given the three sides <code>4 4 10</code>. Then the program prints: <pre><code>Impossible\n</code></pre></p> <p>Your solution must contain two functions <code>is_possible_triangle</code>, which returns whether the input is a possible triangle, and <code>compute_area</code>, which computes the area of the triangle.</p>"},{"location":"exercises/ex01.html#sample-runs_3","title":"Sample Runs","text":"<pre><code>ooiwt@pe111:~/ex01-ooiwt$ ./triangle\n3 4 5\nPossible\n6.0000\nooiwt@pe111:~/ex01-ooiwt$ ./triangle\n4 4 10\nImpossible\n</code></pre> <p>Question Credit: Albert Sutiono (cohort 20/21)</p>"},{"location":"exercises/ex01.html#question-5-leap-year","title":"Question 5: Leap Year","text":"<p>A leap year is a calendar year containing an extra day to synchronize the calendar to seasons and astronomical events.  In the Gregorian calendar, years that are multiples of four (except for years divisible by 100 but not by 400) are leap years.</p> <p>Complete the program <code>leap.c</code> so that it reads in an integer representing a year from the standard input and prints out \" is a leap year\" if the input is a leap year.  Otherwise, print \" is not a leap year\" to the standard output. <p>Your program should include a <code>bool</code> function <code>is_leap_year</code> that takes in the input year and returns <code>true</code> if the input is a leap year and returns <code>false</code> otherwise.</p>"},{"location":"exercises/ex01.html#sample-runs_4","title":"Sample Runs","text":"<pre><code>ooiwt@pe112:~/ex01-ooiwt$ ./leap\n1995\n1995 is not a leap year\nooiwt@pe112:~/ex01-ooiwt$ ./leap\n1996\n1996 is a leap year\nooiwt@pe112:~/ex01-ooiwt$ ./leap\n1900\n1900 is not a leap year\nooiwt@pe112:~/ex01-ooiwt$ ./leap\n2000\n2000 is a leap year\n</code></pre>"},{"location":"exercises/ex01.html#question-6-multiple","title":"Question 6: Multiple","text":"<p>Given two integers, we want to check if one is a multiple of the other.  By definition, 0 is the multiple of any number.</p> <p>Write a program <code>multiple</code> that reads two integers from the standard input, and prints <code>true</code> to the standard output if one integer is the multiple of the other. Print <code>false</code> otherwise.</p> <p>Your program should include a <code>bool</code> function <code>is_multiple</code> that takes in the two integers and return if one is the multiple of the other.</p>"},{"location":"exercises/ex01.html#sample-runs_5","title":"Sample Runs","text":"<pre><code>ooiwt@pe112:~/ex01-ooiwt$ ./multiple\n3 8\nfalse\nooiwt@pe112:~/ex01-ooiwt$ ./multiple\n8 2\ntrue\nooiwt@pe112:~/ex01-ooiwt$ ./multiple\n0 190\ntrue\n</code></pre>"},{"location":"exercises/ex01.html#question-7-date","title":"Question 7: Date","text":"<p>A date consists of two integers, a month (1 - 12) and a day (1 - 31).  Given three dates (of the same year), we want to find out if the given dates are sorted in increasing order.</p> <p>Write a program <code>date</code> (source file <code>date.c</code>) that reads in three pairs of integers from the standard input, in the order of \\(m_1\\), \\(d_1\\), \\(m_2\\), \\(d_2\\), \\(m_3\\), and \\(d_3\\).  Print <code>yes</code> to the standard output the date (\\(m_1, d_1\\)) is strictly before (\\(m_2, d_2\\)), and the date (\\(m_2, d_2\\)) is strictly before (\\(m_3, d_3\\)).  Print <code>no</code> otherwise.</p> <p>Think: Can you break this problem down into a simpler sub-problem?</p>"},{"location":"exercises/ex01.html#sample-runs_6","title":"Sample Runs","text":"<pre><code>ooiwt@pe112:~/ex01-ooiwt$ ./date\n1 1\n12 31\n6 6\nno\nooiwt@pe112:~/ex01-ooiwt$ ./date\n5 5\n6 1\n7 3\nyes\n</code></pre>"},{"location":"exercises/ex01.html#question-8-pressure","title":"Question 8: Pressure","text":"<p>A blood pressure measurement is given by two numbers, \\(s/d\\), where \\(s\\) is the systolic reading and \\(d\\) is the diastolic reading.</p> <p>Given the two readings, the following diagram classifies a given blood pressure measurement into four regions: low, ideal, pre-high, and high.</p> <p></p> <p>Readings that fall on the borders are considered to be in the region to the top and to the right.  For instance, blood pressure 100/80 and 120/70 are considered to fall under the \"pre-high\" region.</p> <p>Write a program <code>pressure</code> that does the following:</p> <ol> <li>Reads in a blood pressure measurement from the standard input as two positive integers,  </li> <li>Determines which region the given blood pressure measurement belongs to according to the chart above, and</li> <li>Prints the region (either <code>low</code>, <code>ideal</code>, <code>pre-high</code>, or <code>high</code>) to the standard output, </li> </ol> <p>Steps 2 and 3 should be solved in the function below: <pre><code>void print_blood_pressure(long systolic, long diastolic)\n{\n  :\n}\n</code></pre></p>"},{"location":"exercises/ex01.html#sample-runs_7","title":"Sample Runs","text":"<pre><code>ooiwt@pe112:~/ex01-ooiwt$ ./pressure\n80 50\nlow\nooiwt@pe112:~/ex01-ooiwt$ ./pressure\n100 50\nideal\n</code></pre>"},{"location":"exercises/ex01.html#question-9-gcd","title":"Question 9: GCD","text":"<p>The GCD, or greatest common divisor, of two integers \\(a\\) and \\(b\\), is the largest positive integer that divides both \\(a\\) and \\(b\\).  For example, the GCD of 48 and 18 is 6.</p> <p>The GCD of two numbers \\(a\\) and \\(b\\) is the same as the GCD of \\(b\\) and \\(a\\) % \\(b\\).  To find the GCD of \\(a\\) and \\(b\\), we thus repeatedly replace (\\(a\\), \\(b\\)) with (\\(b\\), \\(a\\) % \\(b\\)) until we have the pair (\\(c\\), 0). \\(c\\) is the GCD of \\(a\\) and \\(b\\).</p> <p>For example, to find the GCD of 48 and 18, (48, 18) \\(\\rightarrow\\) (18, 12) \\(\\rightarrow\\) (12, 6) \\(\\rightarrow\\) (6, 0). The GCD of 48 and 18 is 6.</p> <p>Write a program <code>gcd</code> (source file <code>gcd.c</code>) that reads in two positive integers, \\(a\\) and \\(b\\), and prints their GCD.   The computation should be performed in a function called <code>compute_gcd</code> that takes in \\(a\\) and \\(b\\) and returns their GCD.</p> <p>Your program must solve this problem recursively, without using any loops.</p>"},{"location":"exercises/ex01.html#sample-runs_8","title":"Sample Runs","text":"<pre><code>ooiwt@pe112:~/ex01-ooiwt$ ./gcd\n48 32\n16\nooiwt@pe112:~/ex01-ooiwt$ ./gcd\n1 1\n1\n</code></pre>"},{"location":"exercises/ex01.html#question-10-digits","title":"Question 10: Digits","text":"<p>Write a program <code>digits.c</code> that reads in a non-negative integer, and prints the sum of the cube of individual digits in this integer.</p> <p>For instance, if the input is <code>1933091</code>, then the sum is \\(1^3 + 9^3 + 3^3 + 3^3 + 0^3 + 9^3 + 1^3 = 1514\\).</p> <p>You must not use a loop to solve this.  Instead, write a recursive function <code>sum_of_digits_cubed</code>.  This function takes in an integer and returns the sum of the cube of individual digits of that integer, and it should call itself to solve this question.</p> <p>A solution that uses a loop in any way will be considered incorrect for this question.</p>"},{"location":"exercises/ex01.html#sample-runs_9","title":"Sample Runs","text":"<pre><code>ooiwt@pe111:~/ex01-ooiwt$ ./digits\n1933091\n1514\nooiwt@pe111:~/ex01-ooiwt$ ./digits\n10\n1\n</code></pre>"},{"location":"exercises/ex01.html#question-11-power","title":"Question 11: Power","text":"<p>Write a program <code>power.c</code> that reads in two values: (i) an integer base \\(x\\) and (ii) a non-negative integer exponent \\(y\\), and compute \\(x^y\\).</p> <p>You must not use a loop to solve this.  Instead, write a recursive function <code>compute_power</code> that takes in takes in the base \\(x\\) and the exponent \\(y\\) and returns \\(x^y\\).  This function should call itself to solve this question.</p> <p>A solution that uses a loop in any way will be considered incorrect for this question.</p>"},{"location":"exercises/ex01.html#sample-runs_10","title":"Sample Runs","text":"<pre><code>ooiwt@pe111:~/ex01-ooiwt$ ./power\n2 3\n8\nooiwt@pe111:~/ex01-ooiwt$ ./power\n1 0\n1\nooiwt@pe111:~/ex01-ooiwt$ ./power\n-2 62\n4611686018427387904\n</code></pre>"},{"location":"exercises/ex01.html#question-12-suffix","title":"Question 12: Suffix","text":"<p>In English, an ordinal number is written with numerals, followed by its letter suffixes.  For instance: 1st, 2nd, 3rd, 4th, 11th, 31st, etc.  The rule is that a number that ends with digit 1 should have the suffix \"st\" (except if it ends with 11), a number that ends with 2 should have the suffix \"nd\" (except if it ends with 12), and a number that ends with 3 should have a suffix \"rd\" (except if it ends with 13).  All other numbers should end with \"th\".</p> <p>Write a program <code>suffix</code> that reads an integer number from the standard input and prints out the number with its ordinal suffix.</p> <p>Your program should include a <code>void</code> function <code>print_with_suffix(long n)</code> that takes in the input and prints out the number followed by its suffix.</p>"},{"location":"exercises/ex01.html#sample-runs_11","title":"Sample Runs","text":"<pre><code>ooiwt@pe112:~/ex01-ooiwt$ ./suffix\n2\n2nd\nooiwt@pe112:~/ex01-ooiwt$ ./suffix\n13\n13th\nooiwt@pe112:~/ex01-ooiwt$ ./suffix\n412\n412th\nooiwt@pe112:~/ex01-ooiwt$ ./suffix\n3\n3rd\n</code></pre>"},{"location":"exercises/ex01.html#question-13-taxi-fare","title":"Question 13: Taxi Fare","text":"<p>The taxi fare structure in Singapore must be one of the most complicated in the world! Check out: http://www.taxisingapore.com/taxi-fare/.</p> <p>For this exercise, we will just use the following simplified fare structure:</p> Basic Fare The first 1 km or less (Flag Down) $3.90 Every 400 m thereafter or less, up to 10 km $0.24 Every 350 m thereafter or less, after 10 km $0.24 Surcharge Monday to Friday 6:00 to 9:29 25% of metered fare Daily 18:00 to 23:59 25% of metered fare Daily 0:00 (midnight) to 5:59 50% of metered fare <p>Note that the surcharge is applicable based on the boarding time. For instance, if the trip started at 17:50 and ended at 18:10, then no surcharge is incurred.</p> <p>Write a program <code>taxi.c</code> that computes the taxi fare.  The program, called <code>taxi</code>, takes in four integers as inputs:</p> <ul> <li>The first is the day of the week.  It can only be the value <code>0</code> to <code>6</code>, <code>0</code> denotes Sunday, <code>1</code> denotes Monday, ..., and <code>6</code> denotes Saturday.</li> <li>The second and the third inputs denote the starting time of the trip: the second input indicates the hours since midnight of the stated day, and the third input indicates the minutes since the beginning of the stated hours.</li> <li>The fourth and final input is the distance of the trip, in meters.</li> </ul> <p>Your program should print a single floating point number, which is the cost of the fare in dollars.</p> <p>Examine the following examples for more details:</p>"},{"location":"exercises/ex01.html#example-1","title":"Example 1","text":"<pre><code>ooiwt@pe111:~/ex01-ooiwt$ ./taxi\n1 17 59 1000\n3.9000\n</code></pre> <ul> <li>Start: Mon 17:59</li> <li>Distance: 1,000 m</li> </ul> <p>The metered fare is $3.90 since the distance traveled is 1 km.  The boarding time is before 18:00, so there is no surcharge.  The total fare is $3.90.</p>"},{"location":"exercises/ex01.html#example-2","title":"Example 2","text":"<pre><code>ooiwt@pe111:~/ex01-ooiwt$ ./taxi\n1 17 57 2000\n4.6200\n</code></pre> <ul> <li>Start: Mon 17:57</li> <li>Distance: 2,000 m</li> </ul> <p>The metered fare for the first 1,000 m (1 km) is $3.90.  The next 1,000 m is charged $0.24 for every 400 m (or less) traveled.  The passenger is charged an additional 3 x $0.24 = $0.72, giving the total metered fare of $4.62.  </p> <p>The boarding time is before 18:00, so there is no surcharge.</p>"},{"location":"exercises/ex01.html#example-3","title":"Example 3","text":"<pre><code>ooiwt@pe111:~/ex01-ooiwt$ ./taxi\n1 5 50 15000\n19.5300\n</code></pre> <ul> <li>Start: Mon 05:50</li> <li>Distance: 15,000 m</li> </ul> <p>The metered fare for the first 1,000 m (1 km) is $3.90.  The next 9,000 m is charged $0.24 for every 400 m traveled.  The passenger is charged an additional 23 x $0.24 = $5.52.  The remaining 5,000 m is charged $0.24 for every 350 m (or less) traveled.  The passenger is charged an additional 15 x $0.24 = $3.60.  The metered fare is $3.90 + $5.52 + $3.60 = $13.02</p> <p>The boarding time is before 6:00, so there is a 50% surcharge.  The total fare is $19.53.</p>"},{"location":"exercises/ex01.html#instructions","title":"Instructions","text":"<ul> <li> <p>Break down this problem into multiple sub-problems, each can be solved by a function.  Write one function to answer each question below:</p> <ul> <li>given the day of the week, is it a weekday?</li> <li>given the time of boarding, does it fall under the morning peak hour (6:00 - 9:29)?</li> <li>given the time of boarding, does it fall under the evening peak hour (18:00 - 23:59)?</li> <li>given the time of boarding, does it fall under the midnight peak hour (0:00 - 5:59)?</li> </ul> </li> <li> <p>Furthermore, break the calculation of fare down into two parts: the basic metered fare and the surcharge. Each of these can be a function.  Think about the four inputs to the <code>taxi</code> program.  Which one is needed to compute the metered fare?  Which ones are used to compute the surcharge?  Pass in the appropriate arguments to the function that computes the metered fare and the function that computes the surcharge.</p> </li> </ul>"},{"location":"exercises/ex02.html","title":"Exercise 2: Loops","text":""},{"location":"exercises/ex02.html#prerequisite","title":"Prerequisite","text":"<p>You have completed Exercise 1. </p>"},{"location":"exercises/ex02.html#learning-outcomes","title":"Learning Outcomes","text":"<p>Be comfortable writing simple C programs that involve loops.</p>"},{"location":"exercises/ex02.html#deadline","title":"Deadline","text":"<p>This is part of the CS1010 formative assessment. Submit before 18 September 2023, 23:59 to receive feedback and earn your achievement \"badges\".</p>"},{"location":"exercises/ex02.html#acceptance-link","title":"Acceptance Link","text":"<p>The link to accept the exercise is not available publicly.  Visit Canvas for the link.</p>"},{"location":"exercises/ex02.html#concepts-and-difficulty","title":"Concepts and Difficulty","text":"Question Loops Efficiency Difficulty 1 Lemon 2 Factor 3 Parity 4 Nine 5 HDB 6 Binary^ 7 Onigiri^ 8 Fibonacci^ 9 Collatz 10 Rectangle 11 Prime 12 Pattern <p>^: Questions 6 - 8 serve as in-class exercises during the lab session in Week 5.</p>"},{"location":"exercises/ex02.html#efficiency","title":"Efficiency","text":"<p>For <code>prime</code> and <code>pattern</code>, while we do not require an advanced fast algorithm to check for primality testing, your code should not waste time by doing redundant work.  You can use the <code>time</code> command to measure how long it takes to run a command.  E.g.,</p> <pre><code>$ time ./test.sh prime\nprime: passed\n\nreal    0m3.908s\nuser    0m3.864s\nsys     0m0.083s\n\n$ time ./test.sh pattern\npattern: passed\n\nreal    0m0.172s\nuser    0m0.133s\nsys     0m0.059s\n</code></pre> <p>If you code takes too long to run, it will timeout and fail the test case.</p>"},{"location":"exercises/ex02.html#question-1-lemon","title":"Question 1: Lemon","text":"<p>A \\((l,m,n)\\)-run (also known as a lemon run) is a sequence of \\(m\\) integers (\\(m \\ge 1\\)) with a gap of \\(n\\) between one number and the next, starting with \\(l\\), i.e., \\(\\langle l, l+n, l+2n, ..., l+(m-1)n \\rangle.\\)</p> <p>Write a program called <code>lemon</code> that reads in three integers \\(l\\), \\(m\\), and \\(n\\) from the standard input, and prints to the standard outputs, the numbers in the \\((l, m, n)\\)-run, one number per line.</p>"},{"location":"exercises/ex02.html#sample-runs","title":"Sample Runs","text":"<pre><code>ooiwt@pe112:~/ex02-ooiwt$ ./lemon\n1 4 3\n1\n4\n7\n10\nooiwt@pe112:~/ex02-ooiwt$ ./lemon\n-1 2 0\n-1\n-1\nooiwt@pe112:~/ex02-ooiwt$ ./lemon\n10 3 -1\n10\n9\n8\n</code></pre>"},{"location":"exercises/ex02.html#question-2-factor","title":"Question 2: Factor","text":"<p>Given a number \\(n\\), we want to find out how many factors \\(n\\) has, excluding the trivial factor 1 and \\(n\\).</p> <p>Write a program <code>factor</code> that reads, from the standard input, a positive integer \\(n\\), and prints, to the standard output, the number of factors of \\(n\\) between 2 and \\(n-1\\), inclusive.</p>"},{"location":"exercises/ex02.html#sample-runs_1","title":"Sample Runs","text":"<pre><code>ooiwt@pe112:~/ex02-ooiwt$ ./factor\n48\n8\nooiwt@pe112:~/ex02-ooiwt$ ./factor\n49\n1\nooiwt@pe112:~/ex02-ooiwt$ ./factor\n1\n0\n</code></pre>"},{"location":"exercises/ex02.html#question-3-parity","title":"Question 3: Parity","text":"<p>Write a program <code>parity</code>, that reads from standard input a positive integer \\(n\\) and prints to the standard output the following two lines, <pre><code>odd: X\neven: Y\n</code></pre></p> <p>where <code>X</code> represents the number of odd digits in \\(n\\), and <code>Y</code> represents the number of even digits in \\(n\\).</p>"},{"location":"exercises/ex02.html#sample-runs_2","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/ex02-albertsutz$ ./parity\n123456\nodd: 3\neven: 3\nooiwt@pe119:~/ex02-albertsutz$ ./parity\n111333\nodd: 6\neven: 0\n</code></pre> <p>Question Credit: Albert Sutiono (cohort 20/21)</p>"},{"location":"exercises/ex02.html#question-4-nine","title":"Question 4: Nine","text":"<p>Write a program that looks for the least significant occurrence of digit 9 in a given number.</p> <p>Your program, <code>nine</code>, should read a positive number from the standard input and print out the position of the least significant occurrence of 9.  The rightmost digit has the position of 1, the second last has the position of 2, etc.  If the number 9 does not appear in the given number, print 0.</p> <p>Solve this problem in a function called <code>find_least_significant_9</code> that takes in a <code>long</code> parameter (the input number) and returns a <code>long</code> (the position of 9).  Your function should not search through more digits than necessary.</p>"},{"location":"exercises/ex02.html#sample-runs_3","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/ex02-ooiwt$ ./nine\n900\n3\nooiwt@pe119:~/ex02-ooiwt$ ./nine\n9999999\n1\nooiwt@pe119:~/ex02-ooiwt$ ./nine\n123456780\n0\n</code></pre>"},{"location":"exercises/ex02.html#question-5-hdb","title":"Question 5: HDB","text":"<p>ASCII Art refers to the art of drawing with only common letters, numbers, and symbols on our keyboard.  My daughter has discovered that, if we draw rows of <code>#</code> symbols together, the output looks like an HDB flat!</p> <p>Write a program <code>hdb</code> that takes in two positive integers \\(w\\) and \\(h\\), and draw \\(h\\) rows of <code>#</code> symbols, each row containing \\(w\\) <code>#</code>, with no spaces before, in between, and after.</p>"},{"location":"exercises/ex02.html#sample-runs_4","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/2122s1/ex02-ooiwt$ ./hdb\n3 3\n###\n###\n###\nooiwt@pe119:~/2122s1/ex02-ooiwt$ ./hdb\n10 15\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\nooiwt@pe119:~/2122s1/ex02-ooiwt$ ./hdb\n24 10\n########################\n########################\n########################\n########################\n########################\n########################\n########################\n########################\n########################\n########################\n</code></pre>"},{"location":"exercises/ex02.html#question-6-binary","title":"Question 6: Binary","text":"<p>In this question, you are asked to convert a number represented in binary format (using digits 0 and 1) into decimal format (using digits 0 and 9).</p> <p>A number in decimal format is represented with base 10.  The last digit (rightmost) corresponds to the unit of 1, the next digit (second last) corresponds to the unit of 10, and so on. So, one can write the decimal number, for instance, 7146 as 7\u00d71000 + 1\u00d7100 + 4\u00d710 + 6\u00d71.</p> <p>A number represented in binary uses base 2 instead of base 10.  The last digit corresponds to 1. The second last digit corresponds to 2, the third last digit corresponds to 4, and so on. So, the binary number 1101, for instance, corresponds to 1\u00d78 + 1\u00d74 + 1\u00d71 = 13.</p> <p>Write a program called <code>binary</code> that reads in a positive integer consisting of only 0s and 1s from the standard input, treats it as a binary number, and prints the corresponding decimal number to the standard output.</p> <p>Try to solve this question with two different approaches: (i) recursively and (ii) iteratively with loops.</p>"},{"location":"exercises/ex02.html#sample-runs_5","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex02-ooiwt$ ./binary\n1101\n13\nooiwt@pe113:~/ex02-ooiwt$ ./binary\n111\n7\nooiwt@pe113:~/ex02-ooiwt$ ./binary\n10110100\n180\n</code></pre>"},{"location":"exercises/ex02.html#question-7-onigiri","title":"Question 7: Onigiri","text":"<p>Onigiri is a Japanese rice ball often formed in a triangular or cylindrical shape and wrapped in nori. </p> <p>We are going to draw some triangular onigiri on our screen using #s.</p> <p>Write a program <code>onigiri.c</code> that draws an isosceles triangle using <code></code> (white space) and <code>#</code>.  The program must read in a positive integer representing the height \\(h\\) of a triangle.  The triangle must have exactly \\(h\\) rows.  Each row must have exactly \\(2h-1\\) characters (including white spaces but excluding a new line).  On each row, the sequence of \"#\" characters must be centralized, padded by white spaces on both sides.</p>"},{"location":"exercises/ex02.html#sample-run","title":"Sample Run","text":"<pre><code>ooiwt@pe112:~/ex02-ooiwt$ ./onigiri\n5\n    #     \n   ###    \n  #####   \n ####### \n#########\nooiwt@pe112:~/ex02-ooiwt$ ./onigiri\n3\n  #  \n ### \n#####\nooiwt@pe112:~/ex02-ooiwt$ ./onigiri\n1\n#\n</code></pre>"},{"location":"exercises/ex02.html#hints","title":"Hints","text":"<ol> <li> <p>First, find the pattern to draw the triangle.</p> <p>On row \\(k\\), how many <code>#</code>s should you draw?  How many white spaces should be padded on the left and the right?</p> </li> <li> <p>Write a function that draws a particular row of the triangle.  Then, call this function repeatedly in a loop.</p> </li> <li> <p>White spaces are not visible.  To help you debug, you can pipe the output through a Unix tool called <code>sed</code>.</p> </li> </ol> <pre><code>ooiwt@pe112:~/ex02-ooiwt$ ./onigiri | sed 's/ /./g'\n4\n...#...\n..###..\n.#####.\n#######\n</code></pre>"},{"location":"exercises/ex02.html#question-8-fibonacci","title":"Question 8: Fibonacci","text":"<p>The Fibonacci sequence is a sequence of numbers 1, 1, 2, 3, 5, 8, 13, ... Fibonacci numbers often appear in mathematics as well as in nature and have many fascinating properties.</p> <p>The Fibonacci sequence can be constructed as follows. The first Fibonacci number is 1. The second Fibonacci number is also 1. Subsequently, the \\(i\\)-th Fibonacci number is computed as the sum of the previous two Fibonacci numbers, the \\((i-2)\\)-th, and the \\((i-1)\\)-th.</p> <p>Write a program called <code>fibonacci</code> that reads a positive integer number \\(n\\) from the standard input, and prints the \\(n\\)-th Fibonacci number to the standard output. </p> <p>Try to solve this question with two different approaches: (i) recursively and (ii) iteratively with loops.  </p> <p>Note that when \\(n\\) is large, your recursive approach may take a long time to run, or even crash with the error <code>Segmentation fault (core dumped)</code>.  This is expected.</p>"},{"location":"exercises/ex02.html#sample-runs_6","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex02-ooiwt$ ./fibonacci\n1\n1\nooiwt@pe113:~/ex02-ooiwt$ ./fibonacci\n10\n55\nooiwt@pe113:~/ex02-ooiwt$ ./fibonacci\n83\n99194853094755497\n</code></pre>"},{"location":"exercises/ex02.html#question-9-collatz","title":"Question 9: Collatz","text":"<p>The Collatz Conjecture was introduced by the mathematician Lothar Collatz in 1937. Also known as the \\(3n+1\\) conjecture, the problem can be stated very simply but yet no one can prove that it is true or false. The conjecture states the following:</p> <p>Consider the following operation on a positive integer \\(n\\): if \\(n\\) is even, divide it by two; otherwise, triple it and add one. Suppose we form a sequence of numbers by performing this operation repeatedly, beginning with any positive integer, then this process will eventually reach the number 1, for any initial positive integer \\(n\\).</p> <p>For instance, if \\(n\\) = 10, then we have the sequence</p> <p>10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1</p> <p>The smallest number of steps taken by this process for \\(n\\) to reach 1 is called the total stopping time. In the example above, the total stopping time for 10 is 6.</p> <p>Write a program <code>collatz.c</code> that reads in two positive integers \\(m\\) and \\(n\\) from the standard input (\\(m \\le n\\)) and finds out, among the numbers between \\(m\\) to \\(n\\), inclusive, which one has the largest total stopping time. If two numbers have the same total stopping time, we break ties by choosing the larger number as the answer.</p> <p>Your program should print to the standard output, the largest total stopping time, followed by the corresponding number, in two different lines.</p>"},{"location":"exercises/ex02.html#sample-runs_7","title":"Sample Runs","text":"<pre><code>ooiwt@pe114:~/ex02-ooiwt$ ./collatz\n1 1\n0\n1\nooiwt@pe114:~/ex02-ooiwt$ ./collatz\n1 9\n19\n9\n</code></pre>"},{"location":"exercises/ex02.html#question-10-rectangle","title":"Question 10: Rectangle","text":"<p>Write a program called rectangle that reads two positive integers from the standard input, corresponding to the width and the height of the rectangle. The width and height must be at least 2. Draw a rectangle on the screen using the special ASCII characters \"\u2554\" \"\u2557\" \"\u255d\" \"\u255a\" \"\u2550\" \"\u2551\", which corresponds to the top left, top right, bottom right, bottom left, top/bottom edge, and left/right edge of the rectangle respectively. Strings consisting of these special characters have been given to you in <code>rectangle.c</code>, and we have defined them as constants. For instance, \"\u2554\" is called <code>TOP_LEFT</code>, and to print this out, you can write  <pre><code>cs1010_print_string(TOP_LEFT);\n</code></pre></p>"},{"location":"exercises/ex02.html#sample-runs_8","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex02-ooiwt$ ./rectangle\n2 2\n\u2554\u2557\n\u255a\u255d\nooiwt@pe113:~/ex02-ooiwt$ ./rectangle\n2 10\n\u2554\u2557\n\u2551\u2551\n\u2551\u2551\n\u2551\u2551\n\u2551\u2551\n\u2551\u2551\n\u2551\u2551\n\u2551\u2551\n\u2551\u2551\n\u255a\u255d\nooiwt@pe113:~/ex02-ooiwt$ ./rectangle\n10 10\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551        \u2551\n\u2551        \u2551\n\u2551        \u2551\n\u2551        \u2551\n\u2551        \u2551\n\u2551        \u2551\n\u2551        \u2551\n\u2551        \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre>"},{"location":"exercises/ex02.html#question-11-prime","title":"Question 11: Prime","text":"<p>Write a program called <code>prime</code> that reads a positive integer \\(n\\) (\\(n \\ge 2\\)) from the standard input and prints the largest prime smaller or equal to \\(n\\).</p> <p>Recall that a prime number is a number that is only divisible by 1 and itself.</p> <p>Your program must not make unnecessary checks or do repetitive work.  In particular, once you find the evidence that a number is not a prime, there is no need to continue checking.</p> <p>Your program must contain a boolean function <code>is_prime</code> that checks if a given number is prime.  You should call this function in a loop to solve this problem.</p> <p><code>prime</code> should not take more than 5 seconds on CS1010 PE hosts to pass each of the provided test cases.</p>"},{"location":"exercises/ex02.html#sample-runs_9","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex02-ooiwt$ ./prime\n2\n2\nooiwt@pe113:~/ex02-ooiwt$ ./prime\n10\n7\nooiwt@pe113:~/ex02-ooiwt$ ./prime\n1000\n997\n</code></pre>"},{"location":"exercises/ex02.html#question-12-pattern","title":"Question 12: Pattern","text":"<p>Even though the sequence of prime numbers appears to be random, mathematicians have found some intriguing patterns related to prime numbers. In this question, you are asked to write a program to draw a variation of the \"Parallax Compression\" pattern discovered by a software engineer, Shaun Gilchrist.</p> <p>The pattern visualizes the distribution of prime numbers in a triangle, in the following way. The inputs given are an interval \\(m\\) (\\(m \\ge 1\\)) and the height of the triangle \\(h\\).</p> <p>The triangle has \\(h\\) rows. The first row of the triangle has one cell, the second row has three cells, the third row has five, etc. The cells are centrally aligned so that visually they form an equilateral triangle. We call the left-most cell of each row the leading cell.</p> <p>Each cell in the triangle contains \\(m\\) integers. The first cell in the first row contains the numbers 1, 2, ..., \\(m\\). The leading cell of the next row, Row 2, contains \\(m\\) numbers between \\(m + 1\\) and \\(3m\\), with an increment of 2: i.e., \\(m + 1\\), \\(m + 3\\), \\(m + 5\\), .., \\(m + (2m - 1)\\). The leading cell of the next row, Row 3, contains the numbers \\(3m + 1\\) and \\(6m\\), with an increment of 3: i.e., \\(3m + 1\\), \\(3m + 4\\), \\(3m + 7\\),..  \\(3m+(3m\u22122)\\), etc.</p> <p>Lemon Run</p> <p>The leading cell of the rows corresponds to lemon runs for \\((1, m, 1)\\), \\((m+1, m, 2)\\), \\((3m+1, m, 3)\\), etc. </p> <p>For instance, if \\(m\\) is 5, the leading cells of the first three rows contain the numbers</p> <ul> <li>{1, 2, 3, 4, 5},</li> <li>{6, 8, 10, 12, 14},</li> <li>{16, 19, 22, 25, 28},</li> </ul> <p>respectively.</p> <p>The rest of the cells in each row contains \\(m\\) numbers where each is one more than a number contained in the cell on its left. So, in Row 2, the numbers in the three cells are</p> <ul> <li>{6, 8, 10, 12, 14},</li> <li>{7, 9, 11, 13, 15}, and</li> <li>{8, 10, 12, 14, 16}.</li> </ul> <p>In Row 3, the cells contain</p> <ul> <li>{16, 19, 22, 25, 28},</li> <li>{17, 20, 23, 26, 29},</li> <li>{18, 21, 24, 27, 30},</li> <li>{19, 22, 25, 28, 31}, and</li> <li>{20, 23, 26, 29, 32}.</li> </ul> <p>Now, to visualize the distribution of primes, we do the following, for each cell of the triangle that contains at least one prime, we print <code>#</code> to the standard output at the corresponding position. Otherwise, we print <code>.</code>.</p> <p>For example, in Row 3,</p> <ul> <li>Cell 1: {16, 19, 22, 25, 28}, we print <code>#</code> since 19 is prime</li> <li>Cell 2: {17, 20, 23, 26, 29}, we print <code>#</code> since 23 is prime</li> <li>Cell 3: {18, 21, 24, 27, 30}, we print <code>.</code> since there is no prime</li> <li>Cell 4: {19, 22, 25, 28, 31}, we print <code>#</code> since 19 is prime</li> <li>Cell 5: {20, 23, 26, 29, 32}, we print <code>#</code> sine 23 is prime</li> </ul> <p>So Row 3 will be printed as <code>##.##</code> (leading and trailing white spaces are not shown).</p> <p>Your output must contain exactly \\(h\\) rows, each row exactly \\(2h\u22121\\) characters (including the white spaces but excluding the newline). Note that in the sample runs below, the white spaces are not visible.</p>"},{"location":"exercises/ex02.html#example","title":"Example","text":"<pre><code>ooiwt@pe114:~/ex02-ooiwt$ ./pattern\n2 4\n   #   \n  #.#  \n ##.## \n#.#.#.#\n</code></pre> <p>To understand the output, consider the cells below:</p> <p></p> <p>Now, consider the two numbers contained in each cell, in the four rows:</p> <ul> <li>Row 1: {1,2}</li> <li>Row 2: {3,5} {4,6} {5,7}</li> <li>Row 3: {7,10} {8,11} {9,12} {10,13} {11,14}</li> <li>Row 4: {13,17} {14,18} {15,19} {16,20} {17,21} {18,22} {19,23}</li> </ul> <p></p> <p>Now, we check whether the numbers contained in each cell have at least one prime, and replace them with either <code>#</code> or <code>.</code>.</p> <p></p>"},{"location":"exercises/ex02.html#sample-runs_10","title":"Sample Runs","text":"<pre><code>ooiwt@pe114:~/ex02-ooiwt$ ./pattern\n11 11\n          #          \n         .#.         \n        ##.##        \n       #.#.#.#       \n      ####.####      \n     .#.#...#.#.     \n    ######.#.####    \n   #.#.#.#.#.#.#.#   \n  ##.##.##.##.##.##  \n .#.#.#.#...#.#.#.#. \n######.###.##########\nooiwt@pe114:~/ex02-ooiwt$ ./pattern\n100 29\n                            #                            \n                           #.#                           \n                          ##.##                          \n                         #.#.#.#                         \n                        ####.####                        \n                       #...#.#...#                       \n                      ######.######                      \n                     #.#.#.#.#.#.#.#                     \n                    ##.##.##.##.##.##                    \n                   #.#...#.#.#.#...#.#                   \n                  ##########.##########                  \n                 #...#.#...#.#...#.#...#                 \n                ############.############                \n               #.#.#...#.#.#.#.#.#...#.#.#               \n              ##.#..##..#.##.##.#..##..#.##              \n             #.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#             \n            ################.################            \n           #...#.#...#.#...#.#...#.#...#.#...#           \n          ##################.##################          \n         #.#...#.#.#.#...#.#.#.#...#.#.#.#...#.#         \n        ##.##..#.##.#..##.##.##.##..#.##.#..##.##        \n       #.#.#.#.#...#.#.#.#.#.#.#.#.#.#...#.#.#.#.#       \n      ######################.######################      \n     #...#.#...#.#...#.#...#.#...#.#...#.#...#.#...#     \n    ####.####.####.####.####.####.####.####.####.####    \n   #.#.#.#.#.#...#.#.#.#.#.#.#.#.#.#.#.#...#.#.#.#.#.#   \n  ##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##  \n #.#.#...#.#.#.#.#.#...#.#.#.#.#.#...#.#.#.#.#.#...#.#.# \n############################.############################\n</code></pre>"},{"location":"exercises/ex02.html#hints_1","title":"Hints","text":"<p>As always, solve this problem by breaking it down into smaller problems.</p> <p>In addition to drawing triangles and checking if a number is prime, you might find the following sub-problems useful:</p> <ul> <li> <p>Find the first number of each leading cell of each row, given the row number and the interval \\(m\\).</p> </li> <li> <p>Given the row, the col, and the interval \\(m\\), does the cell contain a prime?</p> </li> </ul> <p><code>pattern</code> should take less than a second to pass all the given test cases.</p>"},{"location":"exercises/ex03.html","title":"Exercise 3: Fixed-Length Arrays","text":""},{"location":"exercises/ex03.html#prerequisite","title":"Prerequisite","text":"<p>You have completed Exercise 2. </p>"},{"location":"exercises/ex03.html#learning-outcomes","title":"Learning Outcomes","text":"<p>Be comfortable writing simple C programs that involve fixed-length arrays.</p>"},{"location":"exercises/ex03.html#deadline","title":"Deadline","text":"<p>This is part of the CS1010 formative assessment. Submit before 9 October 2023, 23:59 to receive feedback and earn your achievement \"badges\".</p>"},{"location":"exercises/ex03.html#acceptance-link","title":"Acceptance Link","text":"<p>The link to accept the exercise is not available publicly.  Visit Canvas for the link.</p>"},{"location":"exercises/ex03.html#concepts-and-difficulty","title":"Concepts and Difficulty","text":"Question Array as Lookup Table Array as Compound Type Efficiency Difficulty 1 Counter^ 2 Dot 3 Unit 4 Largest^ 5 Days^ 6 ID^ 7 Max 8 Padovan <p>^: Questions 1, 4 - 6 serve as in-class exercises during the lab session in Week 7.</p>"},{"location":"exercises/ex03.html#efficiency","title":"Efficiency","text":"<p>For <code>max</code> and <code>padovan</code>, your code should not waste time by doing redundant work.  With the given compilation settings, <code>max</code> should take no more than 1s for the given test cases; <code>padovan</code> should take no more than 2s for the given test cases.</p>"},{"location":"exercises/ex03.html#question-1-counter","title":"Question 1: Counter","text":"<p>Write a program called <code>counter</code> that reads in a non-negative integer and count how many times each digit appears in this number.  Print each digit and the number of times it appears on a separate line, in ascending order of the digits.  Digits that do not appear in the input number need not be printed.</p>"},{"location":"exercises/ex03.html#sample-runs","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex03-ooiwt$ ./counter\n24680\n0: 1\n2: 1\n4: 1\n6: 1\n8: 1\nooiwt@pe113:~/ex03-ooiwt$ ./counter\n0\n0: 1\nooiwt@pe113:~/ex03-ooiwt$ ./counter\n4611686018427387904 \n0: 2\n1: 3\n2: 1\n3: 1\n4: 3\n6: 3\n7: 2\n8: 3\n9: 1\n</code></pre>"},{"location":"exercises/ex03.html#question-2-dot","title":"Question 2: Dot","text":"<p>Write a program called <code>dot</code> that, given two 4-dimension vectors, find its dot product.</p> <p>Your program should read the two vectors from the standard inputs.  Each vector is specified by four integers.  Print, to the standard output, the dot product of the two vectors.</p>"},{"location":"exercises/ex03.html#sample-runs_1","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex03-ooiwt$ ./dot\n1 2 3 2\n2 1 0 3\n10\nooiwt@pe113:~/ex03-ooiwt$ ./dot\n100 100 100 100\n1 2 -2 -1\n0\n</code></pre>"},{"location":"exercises/ex03.html#question-3-unit","title":"Question 3: Unit","text":"<p>A unit vector is a vector with a length of 1.  Write a program that, given a 3-dimensional vector, find the unit vector in the same direction.</p> <p>Your program should read a 3-D vector \\(\\vec{v}\\) from the standard inputs, specified by three integers.  Print, to the standard output, the unit vector in the same direction of \\(\\vec{v}\\).  Print each element in the vector on a new line.</p> <p>Solve this problem by writing a function with the following header:</p> <pre><code>void find_unit_vector(const long v[3], double unit[3]) { .. }\n</code></pre>"},{"location":"exercises/ex03.html#sample-runs_2","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex03-ooiwt$ ./unit\n1 1 1\n0.5774\n0.5774\n0.5774\nooiwt@pe113:~/ex03-ooiwt$ ./unit\n-2 0 1\n-0.8944\n0.0000\n0.4472\n</code></pre>"},{"location":"exercises/ex03.html#question-4-largest","title":"Question 4: Largest","text":"<p>An integer can be transformed into another by rearranging its digits. Given a number \\(n\\), we want to find the largest number after rearranging the digits in \\(n\\).</p> <p>For example, the largest possible number we get by rearranging the digits in 6752378 is 8776532.</p> <p>The largest possible number we get by rearranging the digits in -1010 is -11.</p> <p>Write a program called <code>largest</code> that reads an integer \\(n\\) from the standard input and prints to the standard output the largest possible number we get by rearranging the digits in \\(n\\).</p> <p>Solve this by using a fixed-length array, building upon the solution of <code>counter</code>, and by writing a function with the following header:</p> <pre><code>long find_largest(long n) { .. }\n</code></pre>"},{"location":"exercises/ex03.html#sample-runs_3","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex03-ooiwt$ ./largest\n6752378\n8776532\nooiwt@pe113:~/ex03-ooiwt$ ./largest\n-1010\n-11\n</code></pre>"},{"location":"exercises/ex03.html#question-5-days","title":"Question 5: Days","text":"<p>Write a program called <code>days</code> that reads in two integers from the standard input, the first is the month (ranged from 1 to 12, inclusive) and the second is the day (ranged from 1 to 31, inclusive).  The program then prints to the standard output which day of the year it is.  For instance, September 15 is the 258th day of the year.  If the input to <code>days</code> is <code>9 15</code>, the program should print <code>258</code>.</p> <p>Assume that the year is not a leap year.</p> <p>Use a fixed-length array and loops to solve this problem instead of conditional statements.  Avoid using conditional statements (in any form, including <code>if-else</code>, <code>switch</code>, and the <code>? :</code> operator).</p>"},{"location":"exercises/ex03.html#sample-runs_4","title":"Sample Runs","text":"<pre><code>ooiwt@pe112:~/ex01-ooiwt$ ./days\n1 1\n1\nooiwt@pe112:~/ex01-ooiwt$ ./days\n9 15\n258\nooiwt@pe112:~/ex01-ooiwt$ ./days\n12 31\n365\n</code></pre>"},{"location":"exercises/ex03.html#question-6-id","title":"Question 6: ID","text":"<p>Your NUS student id has a letter at the end. This letter is called a check code and is a form of redundancy check used for detecting errors, especially when your student id is manually entered into a software application.</p> <p>Your check code is calculated by:</p> <ol> <li>Sum up the digits in your student id. Let the sum be \\(N\\).</li> <li>Divide \\(N\\) by 13, and take the remainder. Let the remainder    be \\(R\\).  </li> <li>Look up the table below:</li> </ol> R Check Code 0 Y 1 X 2 W 3 U 4 R 5 N 6 M 7 L 8 J 9 H 10 E 11 A 12 B <p>Write a program <code>id.c</code> that reads in an integer containing the digits of a student's id from the standard input. Print out the check code to the standard output.</p> <p>Each check code can be stored as a <code>char</code> variable.  In C, <code>char</code> constants are surrounded by a single quote, e.g., <code>'A'</code>.  You can use the <code>putchar</code> function to print a single <code>char</code> variable to the standard output.</p> <p>Example: <pre><code>#include \"cs1010.h\"\nint main() {\n  char a[2] = { 'A', 'B' }; // an array of two `char`\n  putchar(a[0]); // print 'A'\n}\n</code></pre></p> <p>Use a fixed-length array and loops to solve this problem instead of conditional statements.  Avoid using conditional statements (in any form, including <code>if-else</code>, <code>switch</code>, and the <code>? :</code> operator).</p>"},{"location":"exercises/ex03.html#sample-runs_5","title":"Sample Runs","text":"<pre><code>ooiwt@pe116:~/ex03-ooiwt$ ./id\n1933091\nY\nooiwt@pe116:~/ex03-ooiwt$ ./id\n3364497\nE\nooiwt@pe116:~/ex03-ooiwt$ ./id\n1111111111111\nY\n</code></pre>"},{"location":"exercises/ex03.html#question-7-max","title":"Question 7: Max","text":"<p>Write a program max that finds the maximum value from a list \\(L\\) of \\(k\\) integers.</p> <p>Instead of doing this with a loop, solve this question with recursion.  Fill in the function</p> <pre><code>long find_max(const long list[], long start, long end)\n{\n    :\n}\n</code></pre> <p>that calls itself recursively and returns the maximum value among the array elements <code>list[start] .. list[end - 1]</code>.  </p> <p>In the function definition above, the keyword <code>const</code> (short for constant) is used to annotate that the array list is meant to remain unchanged.</p> <p>The program should read the following from the standard inputs:</p> <ul> <li>The first number is a positive integer \\(k\\).</li> <li>The next \\(k\\) numbers correspond to the list of integers \\(L\\).</li> </ul> <p>The program should then print the largest integer from the list to the standard output.</p> <p>\\(k\\) is guaranteed to be no more than 100000.  We can use a fixed-length array on the stack to store the inputs.  The <code>main</code> function to read the inputs and print the maximum value has been given.  You should not change the <code>main</code> function unless you have a good reason.</p> <p>Since you are supposed to solve this problem with recursion, you are not allowed to use loops of any kind (<code>for</code>, <code>while</code>, <code>do-while</code>) inside the function <code>find_max</code>.  Solutions that use loops inside <code>find_max</code> is considered incorrect.</p>"},{"location":"exercises/ex03.html#sample-runs_6","title":"Sample Runs","text":"<pre><code>ooiwt@pe116:~/ex03-ooiwt$ cat input\n5\n-5 3 1 8 2\nooiwt@pe116:~/ex03-ooiwt$ ./max &lt; input\n8\n</code></pre>"},{"location":"exercises/ex03.html#question-8-padovan","title":"Question 8: Padovan","text":"<p>Padovan numbers are a sequence of numbers defined as follows:</p> \\[ p(i)= \\begin{cases} 1 &amp; i = 0 \\\\ 0 &amp; i = 1 \\\\ 0 &amp; i = 2 \\\\ p(i-2) + p(i-3) &amp; i &gt; 2\\\\ \\end{cases} \\] <p>You might notice the similarity between the Padovan numbers and Fibonacci numbers.  Padovan numbers are named after Richard Padovan, an architect.  Unlike Fibonacci, Mr. Padovan is \"only\" 88 years old and the sequence is named after him only recently!</p> <p>Like the Fibonacci sequence, the Padovan sequence grows quickly.  The number \\(p(161)\\) would exceed the limit of the type <code>long</code>.  For this question, we will thus consider a variation of Padovan sequence, called 4D-Padovan, where we only compute the last 4 digits, as such:</p> \\[ p(i)= \\begin{cases} 1 &amp; i = 0 \\\\ 0 &amp; i = 1 \\\\ 0 &amp; i = 2 \\\\ (p(i-2) + p(i-3)) \\bmod 10000 &amp; i &gt; 2\\\\ \\end{cases} \\] <p>Write a program <code>padovan</code> that reads in a non-negative integer \\(n\\) from the standard input, and writes to the standard output, 100 4D-Padovan numbers \\(p(n - 1)\\), \\(p(n - 2)\\), .. \\(p(n-100)\\), in order (one number per line).</p> <p>\\(n\\) is guaranteed to be 100 or more.</p> <p>There is a time-limit of 2s per test case.  Hint: To solve within this time limit, avoid repetitively re-calculating the same sequence of numbers over and over.</p>"},{"location":"exercises/ex04.html","title":"Exercise 4: Dynamic Arrays and Strings","text":""},{"location":"exercises/ex04.html#prerequisite","title":"Prerequisite","text":"<p>You have completed Exercise 3. </p>"},{"location":"exercises/ex04.html#learning-outcomes","title":"Learning Outcomes","text":"<p>Be comfortable writing simple C programs that involve dynamically allocated arrays and strings.</p>"},{"location":"exercises/ex04.html#deadline","title":"Deadline","text":"<p>This is part of the CS1010 formative assessment. Submit before 16 October 2023, 23:59 to receive feedback and earn your achievement \"badges\".</p>"},{"location":"exercises/ex04.html#acceptance-link","title":"Acceptance Link","text":"<p>The link to accept the exercise is not available publicly.  Visit Canvas for the link.</p>"},{"location":"exercises/ex04.html#concepts-and-difficulty","title":"Concepts and Difficulty","text":"Question String Character Dynamic-Size Array Difficulty 1 Word 2 Line 3 Up^ 4 List 5 Length^ 6 Concat^ 7 Kendall 8 Search 9 Subtract <p>^: Questions 3, 5, and  6 serve as in-class exercises during the lab session in Week 8.</p>"},{"location":"exercises/ex04.html#cs1010-io-library","title":"CS1010 I/O Library","text":"<p>You may need to use a new collection of functions available in the CS1010 I/O library for this exercise onwards.</p>"},{"location":"exercises/ex04.html#reading","title":"Reading","text":"<ul> <li><code>cs1010_read_size_t</code></li> <li><code>cs1010_read_word</code></li> <li><code>cs1010_read_line</code></li> <li><code>cs1010_read_long_array</code></li> <li><code>cs1010_read_double_array</code></li> </ul> <p>Note that, for this exercise, you should avoid <code>cs1010_read_word_array</code> and <code>cs1010_read_line_array</code> unless you know what you are doing, as it involves 2D arrays.</p>"},{"location":"exercises/ex04.html#printing","title":"Printing","text":"<ul> <li><code>cs1010_print_size_t</code> and <code>cs1010_println_size_t</code></li> </ul>"},{"location":"exercises/ex04.html#separate-compilation","title":"Separate Compilation","text":"<p>In some questions, you will see that the <code>main</code> function is located in a separate C file, with a <code>-main.c</code> suffix, e.g., <code>length-main.c</code>. The function that you are tasked to write is located in the usual <code>&lt;problem&gt;.c</code> file (e.g., <code>length.c</code>).  </p> <p>In these cases, you are not allowed to change the C file that contains the <code>main</code> function.</p>"},{"location":"exercises/ex04.html#hidden-test-cases","title":"Hidden Test Cases","text":"<p>From this exercise onwards, we may test your code more extensively using additional test cases not included in the skeleton.  You should test your code extensively using your own test cases.</p>"},{"location":"exercises/ex04.html#question-1-word","title":"Question 1: Word","text":"<p>Using <code>cs1010_read_word</code>, write a program called <code>word</code> that reads a word from the standard input and prints the word back to the standard output.</p> <p>The input is guaranteed to have at least one word.</p>"},{"location":"exercises/ex04.html#sample-runs","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex04-ooiwt$ ./word\nhello\nhello\nooiwt@pe113:~/ex04-ooiwt$ ./word\nBye bye, see you later!\nBye\n</code></pre>"},{"location":"exercises/ex04.html#question-2-line","title":"Question 2: Line","text":"<p>Using <code>cs1010_read_line</code>, write a program called <code>line</code> that reads a line of text from the standard input and prints the line back to the standard output. </p> <p>Pay attention to the printing of new lines.  The input is guaranteed to have at least one line (but the line may be empty).</p>"},{"location":"exercises/ex04.html#sample-runs_1","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex04-ooiwt$ ./line\nhello\nhello\nooiwt@pe113:~/ex04-ooiwt$ ./line\nBye bye, see you later!\nBye bye, see you later!\n</code></pre>"},{"location":"exercises/ex04.html#question-3-up","title":"Question 3: Up","text":"<p>Using <code>cs1010_read_line</code>, write a program called <code>line</code> that reads a line of text from the standard input and prints the line back to the standard output in upper case. </p> <p>You are not allowed to use C standard library functions <code>islower</code> or <code>toupper</code> to solve this.  Instead of <code>islower</code>, compare if a character is between <code>'a'</code> and <code>'z'</code> to determine if it is a lowercase character.  Instead of <code>toupper</code>, add the offset <code>'A' - 'a'</code> to a lower case character.</p> <p>The input is guaranteed to have at least one line and the line may be empty.</p>"},{"location":"exercises/ex04.html#sample-runs_2","title":"Sample Runs","text":"<pre><code>ooiwt@pe113:~/ex04-ooiwt$ ./up\nhello\nHELLO\nooiwt@pe113:~/ex04-ooiwt$ ./up\nBye bye, see you later!\nBYE BYE, SEE YOU LATER!\n</code></pre>"},{"location":"exercises/ex04.html#question-4-list","title":"Question 4: List","text":"<p>Write a program <code>list</code> that reads a list of integers from the standard input, stores it in a dynamically allocated array, and then prints out the list in reverse order, one number per line.</p> <p>The first integer read from the standard input is \\(k\\) (\\(k &gt; 0\\)), the number of elements of the list.  The next \\(k\\) integers are the elements of the list.</p>"},{"location":"exercises/ex04.html#sample-run","title":"Sample Run","text":"<pre><code>ooiwt@pe101:~/ex04-ooiwt$ ./list\n3\n100 -120 130\n130\n-120\n100\n</code></pre>"},{"location":"exercises/ex04.html#question-5-length","title":"Question 5: Length","text":"<p>Write a program <code>length</code> that reads a line of text from the standard input and prints the number of characters in the line (including the newline character) to the standard output.</p> <p>You may use <code>cs1010_read_line</code> to read the line of text from the standard input.</p> <p>Fill in the following method in the given skeleton code: <pre><code>size_t length_of(const char *str) {\n    // fill in the function\n}\n</code></pre></p> <p>The goal of this exercise is to let you practice processing and manipulating strings in C.  Solve this problem directly without using any C library functions from <code>string.h</code>.</p>"},{"location":"exercises/ex04.html#sample-run_1","title":"Sample Run","text":"<pre><code>ooiwt@pe101:~/ex04-ooiwt$ ./length\nHello world!\n13\n</code></pre>"},{"location":"exercises/ex04.html#question-6-concat","title":"Question 6: Concat","text":"<p>Write a program <code>concat</code> that reads two words from the standard input, append them into a new string, and then print a new string, to the standard output.</p> <p>You may use <code>cs1010_read_word</code> to read a word from the standard input.</p> <p>Fill in the following method in the given skeleton code: <pre><code>char* concatenate(const char *str1, const char *str2) {\n    // fill in the function\n}\n</code></pre></p> <p>The function is responsible for allocating the required amount of memory for the resulting string.  The caller of <code>concatenate</code> is responsible for deallocation.</p> <p>The goal of this exercise is to let you practice processing and manipulating strings in C.  Solve this problem directly without using any C library functions from <code>string.h</code>.  You may use the method <code>length_of</code> you have written above. </p>"},{"location":"exercises/ex04.html#sample-run_2","title":"Sample Run","text":"<pre><code>ooiwt@pe101:~/ex04-ooiwt$ ./concat\ncs\n1010\ncs1010\n</code></pre>"},{"location":"exercises/ex04.html#question-7-kendall","title":"Question 7: Kendall","text":"<p>Suppose that we are given a set of items and we ask two different parties to rank the items according to some order.  We may get two different orders of the items. How do we measure how similar (or dissimilar) the two rankings are?</p> <p>For example, consider a search engine that returns a list of web pages ranked by their relevance to the search query. A user may not always agree with the ranking of the search engine and may judge the relevance of the search result differently, i.e., the user may have his or her own ranking.  This measurement of similarity between the ranking by the search engine and the ranking by the user gives us a metric on how good the search engine result is. The more similar it is to the ranking of the user, the better the search engine is in ranking in the search results.</p> <p>One way to measure the similarity of the two rankings is the Kendall tau distance. You will write a program <code>kendall</code> that calculates the normalized Kendall tau distance for this question.</p> <p>We will represent a ranking by the order of the items. The first item is ranked 1, the second is ranked 2, and so on. To simplify the problem, we take one of the rankings that we want to calculate the Kendall tau distance on and label the items sequentially, as the sequence 1, 2, 3, 4, 5, ... \\(n\\), where n is the number of items. We call this the base ranking. The other ranking will then be a permutation of the numbers 1 to \\(n\\).</p> <p>For example, suppose we have three items A, B, and C. The first ranking ranks the items as B, C, and A. The second ranking ranks the items C, A, B. After relabelling the first ranking as 1, 2, 3, the second ranking becomes 2, 3, 1.</p> <p>The Kendall tau distance counts the pairs of items in one ranking that are ranked in a different order in the other ranking. In the example above, we have three possible pairs:</p> Pair Ranking 1 Ranking 2 A-B B then A A then B A-C C then A C then A B-C B then C C then B <p>Out of the three pairs, the pairs A-B and B-C are ordered differently in the two rankings, so that Kendall tau distance is 2.</p> <p>The normalized Kendall tau distance is the ratio of the number of pairs ranked in a different order to the number of all possible pairs.</p> <p>In the example above, the normalized Kendall distance is 2/3 = 0.6666.</p> <p>Your program should read the following from the standard input:</p> <ul> <li>The first positive integer, \\(n\\), is the number of items (\\(n \\ge 2\\)).</li> <li>The next \\(n\\) numbers are a permutation of integers between   1 to \\(n\\). This corresponds to the ranking of the items   from 1 to \\(n\\).</li> </ul> <p>Your program should print the normalized Kendall tau distance between the ranking read above and the base ranking (1, 2, 3, .. \\(n\\)) to the standard output.</p> <p>Your program must not assume any limit to the length of the input, except that their length can fit into the type <code>size_t</code>.</p> <p>As a guideline for efficiency, your code should take no more than 5s for the given test cases.</p>"},{"location":"exercises/ex04.html#sample-runs_3","title":"Sample Runs","text":"<pre><code>ooiwt@pe118:~/ex04-ooiwt$ ./kendall\n3\n2 3 1\n0.6667\nooiwt@pe118:~/ex04-ooiwt$ ./kendall\n10\n1 2 3 4 5 6 7 8 9 10\n0.0000\nooiwt@pe118:~/ex04-ooiwt$ ./kendall\n6\n6 5 4 3 2 1\n1.0000\n</code></pre>"},{"location":"exercises/ex04.html#question-8-search","title":"Question 8: Search","text":"<p>Write a program <code>search</code> that finds a list of words \\(w_0, w_1, .. w_{k-1}\\) appear in a given string \\(s\\).</p> <p>The program reads the following from the standard input:</p> <ul> <li>The first line of the input is the string \\(s\\)</li> <li>The next line is an integer \\(k\\)</li> <li>The next \\(k\\) lines contain one word each.</li> </ul> <p>The program then prints \\(k\\) lines to the standard output:</p> <ul> <li>If \\(w_i\\) is a substring of \\(s\\), then print the position of the first occurrence of \\(w_i\\) within \\(s\\).  The first character in \\(s\\) has position 0, the second character has position 1, etc.  </li> <li>If \\(w_i\\) is not a substring of \\(s\\), then print the string \"not found\".</li> </ul> <p>You may use <code>cs1010_read_word</code> to read the list of words \\(w_0..w_{k-1}\\) one-by-one from the standard input.  Avoid <code>cs1010_read_word_array</code> for this exercise, unless you know what you are doing.</p>"},{"location":"exercises/ex04.html#sample-runs_4","title":"Sample Runs","text":"<pre><code>ooiwt@pe101:~/ex04-ooiwt$ ./search\nhaystack\n1\nneedle\nnot found\nooiwt@pe101:~/ex04-ooiwt$ ./search\nhaystack \n2\nhay\nstack\n0\n3\nooiwt@pe101:~/ex04-ooiwt$ ./search\nWhen life gives you lemons, make lemonade.\n4\nlife\nlemon\n,\nlime\n5\n20\n26\nnot found\n</code></pre>"},{"location":"exercises/ex04.html#question-9-subtract","title":"Question 9: Subtract","text":"<p>In this question, you are asked to write a program that subtracts two non-negative numbers which can be arbitrarily large.</p> <p>The types provided by C can only represent a number up to a certain value.  Thus, for this question, we will represent an integer using an arbitrarily long string consisting of characters (of type <code>char</code>) <code>'0'</code> to <code>'9'</code> (note: not integer 0 to 9).  </p> <p>C supports arithmetic operations on <code>char</code> values as well.  To convert a digit character to the numerical value of a digit character, we can do the following:</p> <ul> <li> <p>To convert from a digit character to its numerical value, we subtract the <code>char</code> <code>'0'</code>.  For instance, <code>'6' - '0'</code> will give us the value 6.</p> </li> <li> <p>To convert from a numerical value of a digit to its character, we add the <code>char</code> <code>'0'</code>.  For instance, <code>6 + '0'</code> will give us the character '6'.</p> </li> </ul> <p>Write a program <code>subtract</code> that reads, from the standard input, two non-negative numbers \\(a\\) and \\(b\\), represented as strings consisting of digits <code>'0'</code> to <code>'9'</code> (\\(a \\ge b\\)).  The program then prints \\(a - b\\) to the standard output.</p> <p>You will likely need to use the C standard library function <code>strlen</code>, which returns you the number of characters in a string (excluding the terminating <code>'\\0'</code>).  Look up how to use this function on your own.  Alternatively, you can use <code>length_of</code> which you have written in Question 5 above.</p> <p>Your program must not assume any limit to the length of the input, except that their length can fit into the type <code>size_t</code>.</p> <p>In particular, you must not convert the input string to an integer before subtracting, since if the input string is long enough, it would not fit into a C integer type.</p>"},{"location":"exercises/ex04.html#sample-runs_5","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/ex04-ooiwt$ ./subtract\n2\n1\n1\nooiwt@pe119:~/ex04-ooiwt$ ./subtract\n10\n9\n1\nooiwt@pe119:~/ex04-ooiwt$ ./subtract\n1000000\n1\n999999\nooiwt@pe119:~/ex04-ooiwt$ ./subtract\n19330911933091193309119330911933091\n1400060514000605140006051400605\n19329511872577192703979324860532486\n</code></pre>"},{"location":"exercises/ex05.html","title":"Exercise 5: Multi-Dimensional Arrays","text":""},{"location":"exercises/ex05.html#prerequisite","title":"Prerequisite","text":"<p>You have completed Exercise 4. </p>"},{"location":"exercises/ex05.html#learning-outcomes","title":"Learning Outcomes","text":"<p>Be comfortable writing simple C programs that involve 2D arrays.</p>"},{"location":"exercises/ex05.html#deadline","title":"Deadline","text":"<p>This exercise is part of the CS1010 formative assessment. Submit your solution before 23 October 2023, 23:59 to receive feedback and earn your achievement \"badges\".</p>"},{"location":"exercises/ex05.html#acceptance-link","title":"Acceptance Link","text":"<p>The link to accept the exercise is not available publicly.  Visit Canvas for the link.</p>"},{"location":"exercises/ex05.html#concepts-and-difficulty","title":"Concepts and Difficulty","text":"Question Fixed 2D Arrays Dynamic 2D Array Jagged Array Difficulty 1 Add^ 2 Echo 3 Line^ 4 Popular^ 5 Contact 6 Social <p>^: Questions 2, 3, and 4 serve as in-class exercises during the lab session in Week 9.</p>"},{"location":"exercises/ex05.html#cs1010-io-library","title":"CS1010 I/O Library","text":"<p>You may need to use a new collection of functions available in the CS1010 I/O library for this exercise onwards.</p> <ul> <li><code>cs1010_read_word_array</code></li> <li><code>cs1010_read_line_array</code></li> </ul>"},{"location":"exercises/ex05.html#question-1-add","title":"Question 1: Add","text":"<p>Write a program <code>add</code> that reads two 3x3 matrices \\(M\\) and \\(N\\) from the standard inputs and prints the resulting matrix \\(M + N\\) to the standard output.</p> <p>For example,</p> <p>\\(\\begin{pmatrix} 3 &amp; 1 &amp; 2\\\\ 0 &amp; 4 &amp; 1\\\\ 3 &amp; 5 &amp; 0 \\\\ \\end{pmatrix}\\) +  \\(\\begin{pmatrix} 1 &amp; -1 &amp; 3\\\\ -1 &amp; 2 &amp; 0\\\\ 0 &amp; 1 &amp; 3 \\\\ \\end{pmatrix}\\) = \\(\\begin{pmatrix} 4 &amp; 0 &amp; 5\\\\ -1 &amp; 6 &amp; 1\\\\ 3 &amp; 6 &amp; 3 \\\\ \\end{pmatrix}\\)</p> <p>If the two input matrices are <pre><code>3 1 2\n0 4 1\n3 5 0\n</code></pre></p> <p>and <pre><code>1 -1 3\n-1 2 0\n0 1 3\n</code></pre></p> <p>then print to the standard output <pre><code>4 0 5\n-1 6 1\n3 6 3\n</code></pre></p>"},{"location":"exercises/ex05.html#sample-run","title":"Sample Run","text":"<pre><code>ooiwt@pe101:~$ ./add\n3 1 2\n0 4 1\n3 5 0\n1 -1 3\n-1 2 0\n0 1 3\n4 0 5\n-1 6 1\n3 6 3\n</code></pre>"},{"location":"exercises/ex05.html#question-2-echo","title":"Question 2: Echo","text":"<p>Write a program <code>echo</code> that reads a 2D matrix of integers and prints the matrix back to the standard output.</p> <p>The input consists of the following:</p> <ul> <li>the first two numbers correspond to \\(R\\), the number of rows, and \\(C\\), the number of columns of the matrix respectively</li> <li>the next line contains \\(R\\) x \\(C\\) integers.</li> </ul> <p>Print to the standard output:</p> <ul> <li>\\(R\\) rows of numbers, each row contains \\(C\\) integers, corresponding to the rows of the matrix.</li> </ul> <p>Your code should contain two functions:</p> <pre><code>long **read_matrix(size_t nrows, size_t ncols) {\n  :\n}\n</code></pre> <p>to allocate, read, and return the matrix (return NULL if allocation fails).</p> <p>and</p> <pre><code>void print_matrix(size_t nrows, size_t ncols, long **matrix) {\n  :\n}\n</code></pre> <p>to print the matrix.</p>"},{"location":"exercises/ex05.html#sample-run_1","title":"Sample Run","text":"<pre><code>ooiwt@pe101:~$ ./echo\n3 4\n1 2 3 4 5 6 7 8 9 10 11 12\n1 2 3 4\n5 6 7 8\n9 10 11 12\n</code></pre>"},{"location":"exercises/ex05.html#question-3-line","title":"Question 3: Line","text":"<p>Write a program that draws a white line on an image with a black background of sizes \\(W\\) and \\(H\\).</p> <p>The line is specified as two coordinates (\\(x_1\\), \\(y_1\\)) and (\\(x_2\\), \\(y_2\\)).  The top left corner has a coordinate (0,0).  The x coordinates increase to the right; the y coordinates increase to the bottom.</p> <p>Let (\\(x\\), \\(y\\)) be any point that lies on this line, then we have:</p> \\[ \\frac{y-y_1}{y_2 - y1} = \\frac{x-x_1}{x_2-x_1}\\] <p>We can rearrange and get:</p> \\[y = \\frac{y_2-y_1}{x_2 - x1}(x-x_1) + y_1\\] <p>Let</p> \\[m = \\frac{y_2 - y_1}{x_2 - x_1}\\] <p>be the slope of the line.</p> <p>If the line passes through (\\(x\\), \\(y\\)), then it passes through (\\(x + 1\\), \\(y + m\\)).</p> <p>Mathematically, x and y are floating-point numbers.  But, when we draw the line in an image, we have to round them into integers.  This process is called rasterization in computer graphics.</p> <p>To draw a rasterized straight line, we can then loop through different values of \\(x\\), from \\(x_1\\) to \\(x_2\\), and update the corresponding value of \\(y\\) (by repeatedly adding \\(m\\) every time \\(x\\) increments by 1).</p> <p>Since \\(y\\) is a floating-point number, we round \\(y\\) to the nearest integer and draw the line at pixel (\\(x, y\\)).  You may find the function <code>round</code> from <code>math.h</code> useful.</p> <p>We will draw the output in an image format called PGM.  Each pixel of the image has a value ranging between 0 and 255.  For this question, we draw images with two colors: 0 for the black background and 255 for the white line.</p> <p>Your program should read from the standard input:</p> <ul> <li>Two positive integers, \\(W\\) and \\(H\\) (\\(W\\) &gt; 1, \\(H\\) &gt; 1)</li> <li>Four non-negative integers, \\(x_1\\), \\(y_1\\), \\(x_2\\), \\(y_2\\), that corresponds to the two endpoints (\\(x_1\\), \\(y_1\\)) and (\\(x_2\\), \\(y_2\\)) of the line.  The slope of the line is guaranteed to be between -1 and 1.  Furthermore, \\(x_2\\) &gt; \\(x_1\\).</li> </ul> <p>Your program should print to the standard output,</p> <ul> <li> <p>The first line contains the string \"P2\"</p> </li> <li> <p>The second line contains two integers, the width \\(W\\) and height \\(H\\) of the image</p> </li> <li> <p>The third line contains the number 255</p> </li> <li> <p>The rest of the output contains \\(W\\times H\\) integers, each having a value of either 0 or 255.  Each value corresponds to a pixel in the output image.  The order of the pixels is from left to right, top to bottom.  Each row of the image must be printed on a separate line.</p> </li> </ul> <p>If you pipe your output into <code>~cs1010/bin/viu</code>, you can visualize your output as an image.</p> <pre><code>ooiwt@pe101:~$ ./line &lt; inputs/line.3.in | ~cs1010/bin/viu -\n</code></pre> <p>Note that if your image to too big to fit your terminal, <code>viu</code> will resize your image.</p>"},{"location":"exercises/ex05.html#sample-runs","title":"Sample Runs","text":"<pre><code>ooiwt@pe101:~$ ./line\n4 4\n0 0 3 3\nP2\n4 4\n255\n255 0 0 0\n0 255 0 0\n0 0 255 0\n0 0 0 255\nooiwt@pe101:~$ ./line\n4 4\n0 2 3 2\nP2\n4 4\n255\n0 0 0 0\n0 0 0 0\n255 255 255 255\n0 0 0 0\n</code></pre>"},{"location":"exercises/ex05.html#question-4-popular","title":"Question 4: Popular","text":"<p>We can measure the popularity of a person by how many friends a person has.  We assume that \"friend\" is a symmetric relation. If A is a friend of B, then B is a friend of A.  Because of this, we can represent friendships between people as a lower triangular matrix (using a jagged 2D array). A proper type to store in each element of the matrix is bool. To simplify our life, however, we store each element of the matrix as a char, with '1' representing a friendship connection, and '0' otherwise. The friendship for \\(n\\) people is thus an array of \\(n\\) strings, each string containing characters of '0' and '1' only. The first row of the matrix is a string of length one; the second row is of length two; the third row, length three, etc. The last character of each string (i.e., the diagonal of the matrix) is 1 as we assume everyone is a friend with him/herself.</p> <p>For instance, suppose we have the following friendship relations.  We represent each person with id 0, 1, 2, ... Person with id \\(i\\) has its information stored in Row \\(i\\) and Column \\(i\\). Recall that if Row \\(i\\) and Column \\(j\\) is 1, it means that Person \\(i\\) is a friend of Person \\(j\\).</p> <pre><code>1\n01\n011\n</code></pre> <p>The relation indicates that Person 1 and 2 are friends with each other. Person 0 is not a friend of 1 and 2. </p> <p>The example below adds another Person 4, who is a friend of Person 0 and Person 2. <pre><code>1\n01\n011\n1011\n</code></pre></p> <p>Write a program <code>popular</code>, that reads from standard input:</p> <ul> <li>a positive integer \\(n\\),</li> <li>followed by \\(n\\) lines of strings consisting of '1' or '0' representing the friendship among these \\(n\\) people.</li> </ul> <p>Print, to the standard output, </p> <ul> <li>the id of the person who is the most popular (i.e., with the most number of friends).  We break ties by preferring the person with a smaller id.</li> <li>the number of friends that the person has.</li> </ul> <p>The purpose of this question is for you to practice using a jagged 2D array. Hence, you are not allowed to store the input matrix or intermediate matrices using a rectangular array, or you risk being penalized heavily for this question.</p>"},{"location":"exercises/ex05.html#sample-runs_1","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/as05-skeleton$ cat inputs/popular.1.in\n3\n1\n01\n011\nooiwt@pe119:~/as05-skeleton$ ./popular &lt; inputs/popular.1.in\n1\n1\nooiwt@pe119:~/as05-skeleton$ cat inputs/popular.2.in\n4\n1\n01\n011\n1011\nooiwt@pe119:~/as05-skeleton$ ./popular &lt; inputs/popular.2.in\n2\n2\n</code></pre>"},{"location":"exercises/ex05.html#question-5-contact","title":"Question 5: Contact","text":"<p>Contact tracing is an important step to contain a pandemic. Suppose we are given the information on who is in contact with whom. We wish to answer the following questions:</p> <ul> <li>Given two people A and B, have they been directly in contact with each other?</li> <li>Given two people A and B, is there a common person that they have been in contact with? In other words, is there a third person C, where (i) A and C have been in contact with each other, and (ii) B and C have been in contact with each other?</li> </ul> <p>We assume that \"contact\" is a symmetric relation. If A has been in contact with B, then B has been in contact with A too. Because of this, we can represent the contact traces between n people as a lower triangular matrix (using a jagged 2D array). Similar to Question 1, we store each element of the matrix as a char, with '1' representing a contact, and '0' otherwise. The contact traces for \\(n\\) people is again an array of \\(n\\) strings, each string containing characters of '0' and '1' only. The first row of the matrix is a string of length one; the second row is of length two; the third row, length three, etc. The last character of each string (i.e., the diagonal of the matrix) is 1 since everyone has contact with him/herself.</p> <p>Write a program contact, that reads from standard input:</p> <ul> <li>a positive integer \\(n\\),</li> <li>followed by \\(n\\) lines of strings consisting of '1' or '0' representing the contact traces of these \\(n\\) people.</li> <li>followed by two positive integers \\(j\\) and \\(k\\), representing the ids of a pair of people we are interested in querying. An input of \\(i\\) corresponds to the person whose contact information is stored in Row \\(i\\) and Column \\(i\\).</li> </ul> <p>Print, to the standard output, the following information:</p> <ul> <li>\"direct contact\" if there is direct contact between \\(j\\) and \\(k\\)</li> <li>\"contact through x\" if there is no direct contact but there is an indirect contact between \\(j\\) and \\(k\\) through a third person \\(x\\) (replace \\(x\\) with the actual id). If there are multiple such people, output the person with the smallest id.</li> <li>\"no contact\" if there is no direct or indirect contact through a third person in the contact traces.</li> </ul> <p>The purpose of this question is for you to practice using a jagged 2D array. Hence, you are not allowed to store the input matrix or intermediate matrices using a rectangular array, or you risk being penalized heavily for this question.</p>"},{"location":"exercises/ex05.html#sample-runs_2","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/as05-skeleton$ cat inputs/contact.1.in\n3\n1\n11\n011\n0 1\nooiwt@pe119:~/as05-skeleton$ ./contact &lt; inputs/contact.1.in\ndirect contact\nooiwt@pe119:~/as05-skeleton$ cat inputs/contact.2.in\n3\n1\n11\n011\n0 2\nooiwt@pe119:~/as05-skeleton$ ./contact &lt; inputs/contact.2.in\ncontact through 1\nooiwt@pe119:~/as05-skeleton$ cat inputs/contact.3.in\n4\n1\n01\n011\n1011\n0 1\nooiwt@pe119:~/as05-skeleton$ ./contact &lt; inputs/contact.3.in\nno contact\n</code></pre>"},{"location":"exercises/ex05.html#question-6-social","title":"Question 6: Social","text":"<p>You should solve this question after solving Questions 4 and 5. The functions you wrote for Questions 4 and 5 might be useful for solving this question.</p> <p>In this question, we are interested in understanding the social network of a group of people.  Suppose that person A is a friend of person B, then we say that A is connected to B with one hop, or A is one hop away from B. </p> <p>Consider a friend of B, say C, who is not a friend of A. So C is a friend of a friend of A. We say that C is two hops away from A, and there is a chain of friendship of 2 hops between A and C (A -&gt; B -&gt; C). </p> <p>Suppose there are \\(n\\) people, and we know the social network of these \\(n\\) people -- i.e., we know who is a friend with whom.  We call the network a social network of degree 1.  Your task is to compute a social network of degree \\(k\\), representing who is connected to whom via a friendship chain of up to \\(k\\) hops.</p> <p>Similar to Question 1, we assume that friendship is bi-directional -- if A is a friend of B, then B is a friend of A. We represent a social network as a lower triangular matrix (using a jagged 2D array) in the same format as Question 1, where a 1 in Row \\(i\\) and Column \\(j\\) means Person \\(i\\) and Person \\(j\\) are friends; 0 otherwise.</p> <p>The social network below shows the friendship relations between four people.</p> <pre><code>1\n01\n011\n1011\n</code></pre> <p>Suppose now we consider the social network of degree 2. Person 0 is two hops away from Person 2 (Person 0 knows Person 3, and Person 3 knows Person 2). Person 1 is also two hops away from Person 3 (Person 1 knows Person 2 and Person 2 knows Person 3).</p> <p>The social network of degree 2 becomes:</p> <pre><code>1\n01\n111\n1111\n</code></pre> <p>Write a program <code>social</code>, that reads from standard input two positive integers \\(n\\) and \\(k\\), followed by \\(n\\) lines of strings consisting of '1' or '0' representing the social network of degree 1 of these \\(n\\) people. Print, to the standard output, the social network of degree \\(k\\) formed by friendship chains of up to \\(k\\) hops.</p> <p>The purpose of this question is for you to practice using a jagged 2D array. Hence, you are not allowed to store the input matrix or intermediate matrices using a rectangular array, or you risk being penalized heavily for this question.</p>"},{"location":"exercises/ex05.html#hint","title":"Hint","text":"<p>There are many ways to solve this problem. The most straightforward way is to compute the social network formed by a friendship chain of degree \\(i\\), \\(N(i)\\), changing \\(i\\) from 1 to \\(k\\).</p> <ul> <li>\\(N(1)\\) is just the input;</li> <li>\\(N(2)\\) can be computed in a similar way to how you solved Question 2.</li> <li>Now, given \\(N(i-1)\\) and \\(N(1)\\), can you compute \\(N(i)\\)?</li> </ul>"},{"location":"exercises/ex05.html#sample-runs_3","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/as05-skeleton$ cat inputs/social.1.in\n3 1\n1\n11\n011\nooiwt@pe119:~/as05-skeleton$ ./social &lt; inputs/social.1.in\n1\n11\n011\nooiwt@pe119:~/as05-skeleton$ cat inputs/social.2.in\n4 2\n1\n01\n011\n1011\nooiwt@pe119:~/as05-skeleton$ ./social &lt; inputs/social.2.in\n1\n01\n111\n1111\nooiwt@pe119:~/as05-skeleton$ cat inputs/social.3.in\n5 2\n1\n11\n011\n0011\n10011\nooiwt@pe119:~/as05-skeleton$ ./social &lt; inputs/social.3.in\n1\n11\n111\n1111\n11111\n</code></pre>"},{"location":"exercises/ex06.html","title":"Exercise 6: Searching and Sorting","text":""},{"location":"exercises/ex06.html#prerequisite","title":"Prerequisite","text":"<p>You have completed Exercise 5. </p>"},{"location":"exercises/ex06.html#learning-outcomes","title":"Learning Outcomes","text":"<p>Be comfortable studying properties in the input and apply them to efficiently solve problems.</p>"},{"location":"exercises/ex06.html#deadline","title":"Deadline","text":"<p>This exercise is part of the CS1010 formative assessment. Submit your solution before 30 October 2023, 23:59 to receive feedback and earn your achievement \"badges\".</p>"},{"location":"exercises/ex06.html#acceptance-link","title":"Acceptance Link","text":"<p>The link to accept the exercise is not available publicly.  Visit Canvas for the link.</p>"},{"location":"exercises/ex06.html#concepts-and-difficulty","title":"Concepts and Difficulty","text":"Question Sorting Searching Difficulty 1 Sort 2 Valley 3 Inversion 4 Lexicon"},{"location":"exercises/ex06.html#question-1-sort","title":"Question 1: Sort","text":"<p>A v-array is an array of integers with a special property.  The array can be partitioned into two segments: in the first segment, the numbers are sorted in non-ascending order.  In the second part, the numbers are sorted in non-descending order.  For example, <code>9 4 2 5 5 8</code> is a v-array.  <code>9 4</code> is in non-ascending order, while <code>2 5 5 8</code> are in non-descending order.   On the other hand, <code>9 4 5 2 5 8</code> is not a v-array.  </p> <p>A v-array can be only non-ascending or non-descending.  For instance, both <code>1 2 3</code>, <code>8 8 8 8</code>, and <code>-2 -5 -10</code> are all valid v-arrays.</p> <p>Write a program <code>sort</code>, that reads from standard input:</p> <ul> <li>a positive integer \\(n\\),</li> <li>followed by \\(n\\) numbers that form a v-array.</li> </ul> <p>The program <code>sort</code> then sorts the numbers in the v-array in non-descending order and prints the numbers to the standard output, one number per line.</p> <p>You must solve this problem with an \\(O(n)\\) algorithm.  Solving this in \\(O(n^2)\\) or \\(O(n \\log{n})\\) is trivial and such solution will be categorized as \"Need Improvement\"</p>"},{"location":"exercises/ex06.html#sample-runs","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/ex06-skeleton$ cat inputs/sort.1.in\n5\n5 4 2 1 3\nooiwt@pe119:~/ex06-skeleton$ ./sort &lt; inputs/sort.1.in\n1\n2\n3\n4\n5\n</code></pre>"},{"location":"exercises/ex06.html#question-2-valley","title":"Question 2: Valley","text":"<p>A strict v-array is a v-array where no two adjacent elements have the same value.</p> <p>In this problem, we wish to find the minimum value of a strict v-array, known as a valley.  </p> <p>Write a program <code>valley</code>, that reads from standard input:</p> <ul> <li>a positive integer \\(n\\),</li> <li>followed by \\(n\\) numbers that form a strict v-array.</li> </ul> <p>The program <code>valley</code> then prints the valley of the array to the standard output.</p> <p>You must solve this problem with an \\(O(\\log{n})\\) algorithm.  Solving this in \\(O(n)\\) is trivial, and such solution will be marked as \"Need Improvement.\"</p>"},{"location":"exercises/ex06.html#sample-runs_1","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/ex06-skeleton$ cat inputs/valley.1.in\n5\n5 4 2 1 3\nooiwt@pe119:~/ex06-skeleton$ ./sort &lt; inputs/valley.1.in\n1\n</code></pre>"},{"location":"exercises/ex06.html#question-3-inversion","title":"Question 3: Inversion","text":"<p>In an array that is supposed to be sorted in some order, an inversion is a pair of numbers that is out of order.  For instance, if we want to sort the array \"1 3 4 2\", in increasing order, the pair (3, 2) and (4, 2) are out of order.  So there are two inversions in this array.  </p> <p>An array that is sorted has no inversion, while an array of size \\(n\\) that is inversely sort has \\(n(n-1)/2\\) inversions.  </p> <p>The concept of inversion is not new.  In the problem <code>kendall</code>, you have counted the number of inversions.  In bubble sort, every pass removes some number of inversions until no more inversion is left. </p> <p>In this question, you are given an array of \\(n\\) integers where the elements are unique, i.e., there is no duplicate in the inputs.  Furthermore, the input is the inverse of a v-array.  There is some \\(k\\), \\(0 \\le k \\le n\\), where the first \\(k\\) elements in the array are in increasing order, and the remaining \\(n - k\\) elements are in decreasing order.</p> <p>Write a program <code>inversion</code> that reads, from the standard input, the following:</p> <ul> <li>An integer \\(n (n \\ge 1)\\), followed by</li> <li>\\(n\\) integers</li> </ul> <p>You program should then prints, to the standard output, the number of inversions in the input.</p> <p>You have already solved this problem in <code>kendall</code> in \\(O(n^2)\\) time, so, an \\(O(n^2)\\) solution would be marked as \"Need Improvement\".  An \\(O(n log n)\\) solution would be \"Good\", while an \\(O(n)\\) solution would be \"Excellent\".</p>"},{"location":"exercises/ex06.html#sample-runs_2","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/ex06-weitsang$ cat inputs/inversion.1.in\n5\n1 3 5 4 2\nooiwt@pe119:~/ex06-weitsang$ ./inversion &lt; inputs/inversion.1.in\n4\nooiwt@pe119:~/ex06-weitsang$ cat inputs/inversion.2.in\n3\n1 20 300\nooiwt@pe119:~/ex06-weitsang$ ./inversion &lt; inputs/inversion.2.in\n0\nooiwt@pe119:~/ex06-weitsang$ cat inputs/inversion.3.in\n1\n-100\nooiwt@pe119:~/ex06-weitsang$ ./inversion &lt; inputs/inversion.3.in\n0\n</code></pre>"},{"location":"exercises/ex06.html#question-4-lexicon","title":"Question 4: Lexicon","text":"<p>Given a lexicon consisting of words that are made up of a set of symbols, we wish to sort them in increasing lexicographical order.  Assume that the order of two symbols is defined, the ordering of two words is defined as follows:</p> <ul> <li> <p>Given two words \\(W_1 = a_0a_1..a_k\\) and \\(W_2 = b_0b_1..b_k\\) of equal length.  Let \\(i\\) be the smallest index where the two words differ, i.e., \\(a_j = b_j\\) for \\(j = 0, 1, .., i-1\\) and \\(a_i \\not = b_i\\).  Then \\(W_1 &lt; W_2\\) if \\(a_i &lt; b_i\\).  </p> </li> <li> <p>Given two words \\(W_1 = a_0a_1..a_l\\) and \\(W_2 = b_0b_1..b_k\\) of different length, with \\(l &lt; k\\), then the ordering pads \\(W_1\\) with a special symbol that is smaller than every other symbols, until both \\(W_1\\) and \\(W_2\\) are of equal length. </p> </li> </ul> <p>For this question, we consider the set of printable ASCII characters, except the white space <code>' '</code>, as the set of symbols in our lexicon.  The ordering of two symbols is defined by the ordering of the ASCII value of the characters.  We can thus use the null character `'\\0', with an ASCII value of 0, as the padding symbols.</p> <p>For instance, the word <code>ooi</code> is smaller than <code>oops</code>.  The first symbol that differs is at position 2 (the first letter is position 0) and the ASCII code for <code>i</code> is smaller than <code>p</code>.</p> <p>As another example, given <code>ooi</code> and <code>ooink</code>, the ordering pad <code>ooi</code> with the null character at position 3, to give the order <code>ooi</code> &lt; <code>ooink</code>.</p> <p>Write a program <code>lexicon</code>, that reads from standard input:</p> <ul> <li>a positive integer \\(n\\),</li> <li>followed by \\(n\\) words </li> </ul> <p>Print, to the standard output, </p> <ul> <li>the list of words in lexicographical order, one word per line.</li> </ul> <p>Suppose that \\(k\\) symbols are used in the lexicon, and the longest string is of length \\(m\\).  You must solve this problem with the running time of \\(O(m(n + k))\\).</p> <p>Solving this in \\(O(mn^2)\\) or \\(O(mn \\log{n})\\) is trivial, and such solution will be marked as \"Need Improvement\"</p>"},{"location":"exercises/ex06.html#sample-runs_3","title":"Sample Runs","text":"<pre><code>ooiwt@pe119:~/ex06-skeleton$ cat inputs/lexicon.1.in\n6\nc\ns\n1\n0\n1\n0\nooiwt@pe119:~/ex06-skeleton$ ./lexicon &lt; inputs/lexicon.1.in\n0\n0\n1\n1\nc\ns\nooiwt@pe119:~/ex06-skeleton$ cat inputs/lexicon.2.in\n9\ncow\ndog\ncat\nmuk\nant\nbee\nfox\nhen\nfor\nooiwt@pe119:~/ex06-skeleton$ ./lexicon &lt; inputs/lexicon.2.in\nant\nbee\ncat\ncow\ndog\nfor\nfox\nhen\nmuk\nooiwt@pe119:~/ex06-skeleton$ cat inputs/lexicon.3.in\n3\nooi\noops\nooink\nooiwt@pe119:~/ex06-skeleton$ ./lexicon &lt; inputs/lexicon.3.in\nooi\nooink\noops\n</code></pre>"},{"location":"exercises/ex07.html","title":"Exercise 7: Recursions","text":""},{"location":"exercises/ex07.html#prerequisite","title":"Prerequisite","text":"<p>You have completed Exercise 6. </p>"},{"location":"exercises/ex07.html#learning-outcomes","title":"Learning Outcomes","text":"<p>Able to model a problem as a search problem and solve it recursively.</p>"},{"location":"exercises/ex07.html#deadline","title":"Deadline","text":"<p>This exercise is part of the CS1010 formative assessment. Submit your solution before 6 November 2023, 23:59 to receive feedback and earn your achievement \"badges\".</p>"},{"location":"exercises/ex07.html#acceptance-link","title":"Acceptance Link","text":"<p>The link to accept the exercise is not available publicly.  Visit Canvas for the link.</p>"},{"location":"exercises/ex07.html#concepts-and-difficulty","title":"Concepts and Difficulty","text":"Question Recursion Branch-and-Bound Difficulty 1 Fill 2 Maze 3 Walk 4 Sudoku"},{"location":"exercises/ex07.html#question-1-fill","title":"Question 1: Fill","text":"<p>One of the basic operations in a drawing application is the fill operation (aka bucket fill).  You will implement this operation in this assignment.</p> <p>An image can be considered as a 2D array of pixels.  Each pixel has a color, represented by three integers, corresponding to the red, green, and blue components of the color.   We say that two pixels are adjacent to each other if they share a common edge.  So a pixel can have at most four adjacent pixels.</p> <p>We denote the top left pixel to be (0,0).  The indices increase towards the right and down.  For instance, if we have an image of width 20 by 30, then the top-right pixel has the coordinate (0, 19); the bottom-left pixel has the coordinate (29, 0); and the bottom-right has the coordinate (29, 19).</p> <p>An image can be divided into one or more segments.  A segment is a set of pixels (i) with the same color, and (ii) given any two pixels \\(p\\) and \\(q\\) in a segment, we can find a series of adjacent pixels in the segment going from \\(p\\) to \\(q\\).</p> <p>The fill operation takes in as an input the (\\(x\\),\\(y\\)) coordinate of a pixel \\(p\\), and a color \\(c\\) to fill.  The operation then replaces the color of all pixels belonging to the same segment as \\(p\\) with the given color \\(c\\).</p> <p>Write a program, <code>fill.c</code>, that reads from standard input two positive integers \\(m\\) and \\(n\\) in the first line.  \\(m\\) refers to the number of rows, and \\(n\\) is the number of columns.</p> <p>Then read \\(3mn\\) integers representing an \\(m\\) by \\(n\\) image from the standard inputs.  Each tuple of 3 integers refers to the color of a pixel.  The pixels are read from left to right, top to bottom.  Thus, the first three integers refer to the color of the pixel at (0, 0); the next three integers refer to the color of the pixel at (0, 1), etc.</p> <p>The next input is a positive integer \\(q\\), which is the number of fill operations.  Following this, there are \\(q\\) lines.  Each line has two integers \\(x\\), \\(y\\), and three integers, \\(r\\), \\(g\\), and \\(b\\), corresponding to a color.  Each line specifies a fill operation, to fill the segmented pixel \\((x, y)\\) is in with the color \\((r, g, b)\\).</p> <p>The program shall print to standard output, the image after executing all the given fill operations.  The image should be printed in the following format:</p> <ul> <li>The first line starts with a string \"P3\", followed by a space, followed by two integers, \\(n\\), and \\(m\\), that correspond to the width and height of the image.  This is followed by a space, and then the number 255.</li> <li>The remaining lines contain the color of each pixel, one color (i.e., three integers) per line.  The pixels should be printed from left to right, top to bottom.</li> </ul> <p>An example output: <pre><code>P3 2 2 255\n0 0 0\n0 10 79\n140 120 30\n50 30 255\n</code></pre></p> <p>You should use recursion to implement the fill operation.</p> <p>Your solution must take no more than \\(O(mnq)\\) time.</p> <p>You can visualize the resulting image using the <code>viu</code> command:</p> <pre><code>./fill &lt; inputs/fill.3.in | ~cs1010/bin/viu -``\n</code></pre> <p>Note that <code>viu</code> might rescale your image if your terminal is too small.</p>"},{"location":"exercises/ex07.html#tips","title":"Tips","text":"<p>Similar to <code>social</code>, your code would be simpler if you separate the representation of the image from the underlying 2D array.  Writing functions to retrieve, update, and compare the color of a pixel of an image would make your code much simpler and easier to read, write, and debug.</p> <p>Your solution must take no more than \\(O(mnq)\\) time to be categorized as \"Excellent\".</p>"},{"location":"exercises/ex07.html#question-2-maze","title":"Question 2: Maze","text":"<p>Agent Scully woke up and found herself in the dark.  She figured out that she was in a maze.  She has to find her way out if there is one!</p> <p>The maze can be simplified as a grid of (\\(m \\times n\\)) cells. Each cell can be of the following:</p> <ol> <li> <p>'#' denotes a segment of a wall.  No one can pass through the walls.</p> </li> <li> <p>'.' denotes an empty space.</p> </li> <li> <p>'@' denotes where Scully is currently. It is also an empty space.</p> </li> </ol> <p>Anytime Scully reaches a border cell (a cell in either the top-most or bottom-most row or left-most or right-most column), she escapes the maze and can go save her partner Agent Mulder.  She can only move from one empty space to another adjacent cell in one step.  Two cells are adjacent if they share a common edge.</p> <p>Scully took CS1010, and she got a concrete plan to seek a way out by trial and error.  She follows strictly the following strategy to find a way through the maze starting from her initial position.  At each time step,</p> <ol> <li> <p>She looks for an empty adjacent cell that has never been visited yet, in the sequence of up/right/down/left to the current cell she is at.  If there is an empty adjacent cell, she moves to that cell.  The cell she moves to is now visited.</p> </li> <li> <p>If no empty, unvisited, adjacent cell exists, she backtracks on the path that she comes from, moving one step back, and repeats 1 again.</p> </li> </ol> <p>In this way, Scully systematically explores the maze, with no repetitive visit of any cell more than once except when she backtracks.  She will stop when successfully escapes the maze, or finds that there is no way out after backtracking all the way back to the original position.  She is completely trapped within the maze and now must wait for her partner Agent Mulder to come and free her.</p> <p>Write a program <code>maze.c</code>, that reads from standard input.  First, read two positive integers \\(m\\) and \\(n\\), followed by \\(m\\) lines of \\(n\\) characters in each line that represents the maze setup.  One and only one <code>@</code> will be present in the maze setup.</p> <p>The program then prints, to standard output, an animation of \\(k\\) iterations. The output should only contain \\(m\\) rows with \\(n\\) characters in each row, with an additional row at last.  Similarly, you must use <code>#</code> to represent a wall, a <code>.</code> to represent empty space, and <code>@</code> to represent where Scully is at.  After printing the maze, your program prints the number of steps that Scully has made.</p> <p>You should use recursion to explore the maze and look for a way out.</p> <p>Here is an example.  The following is the starting position of Scully and the maze.</p> <pre><code>###########\n#.#.....#.#\n#.#####.#.#\n#.#...#.#.#\n#.#.#.....#\n#.#.##.#.##\n#@#.#..#..#\n#...#.#.#..\n###########\n0\n</code></pre> <p>Scully first moves five steps up: <pre><code>###########\n#@#.....#.#\n#.#####.#.#\n#.#...#.#.#\n#.#.#.....#\n#.#.##.#.##\n#.#.#..#..#\n#...#.#.#..\n###########\n5\n</code></pre></p> <p>At this point, Scully is stuck since there is no more adjacent empty cell that has not been visited.  Scully then backtracks: <pre><code>###########\n#.#.....#.#\n#.#####.#.#\n#.#...#.#.#\n#.#.#.....#\n#.#.##.#.##\n#@#.#..#..#\n#...#.#.#..\n###########\n10\n</code></pre></p> <p>Scully then moves down: <pre><code>###########\n#.#.....#.#\n#.#####.#.#\n#.#...#.#.#\n#.#.#.....#\n#.#.##.#.##\n#.#.#..#..#\n#@..#.#.#..\n###########\n11\n</code></pre></p> <p>Then right: <pre><code>###########\n#.#.....#.#\n#.#####.#.#\n#.#...#.#.#\n#.#.#.....#\n#.#.##.#.##\n#.#.#..#..#\n#..@#.#.#..\n###########\n13\n</code></pre></p> <p>Then up: <pre><code>###########\n#.#.....#.#\n#.#####.#.#\n#.#@..#.#.#\n#.#.#.....#\n#.#.##.#.##\n#.#.#..#..#\n#...#.#.#..\n###########\n17\n</code></pre></p> <p>Then right (two steps) and then down (two steps) and then right (two steps):</p> <pre><code>###########\n#.#.....#.#\n#.#####.#.#\n#.#...#.#.#\n#.#.#..@..#\n#.#.##.#.##\n#.#.#..#..#\n#...#.#.#..\n###########\n22\n</code></pre> <p>Then Scully moves up and left, and she is stuck again.</p> <pre><code>###########\n#.#@....#.#\n#.#####.#.#\n#.#...#.#.#\n#.#.#.....#\n#.#.##.#.##\n#.#.#..#..#\n#...#.#.#..\n###########\n29\n</code></pre> <p>At this point, she backtracks:</p> <pre><code>###########\n#.#.....#.#\n#.#####.#.#\n#.#...#.#.#\n#.#.#..@..#\n#.#.##.#.##\n#.#.#..#..#\n#...#.#.#..\n###########\n36\n</code></pre> <p>Moves right, and up, and stuck again!</p> <p><pre><code>###########\n#.#.....#@#\n#.#####.#.#\n#.#...#.#.#\n#.#.#.....#\n#.#.##.#.##\n#.#.#..#..#\n#...#.#.#..\n###########\n41\n</code></pre> She backtracks again,</p> <pre><code>###########\n#.#.....#.#\n#.#####.#.#\n#.#...#.#.#\n#.#.#...@.#\n#.#.##.#.##\n#.#.#..#..#\n#...#.#.#..\n###########\n45\n</code></pre> <p>This time she found her way out!</p> <pre><code>###########\n#.#.....#.#\n#.#####.#.#\n#.#...#.#.#\n#.#.#.....#\n#.#.##.#.##\n#.#.#..#..#\n#...#.#.#.@\n###########\n50\n</code></pre> <p>It took her a total of 50 steps to exit the maze.</p> <p>Your solution must take no more than \\(O(mn)\\) time to be graded as \"Excellent\".</p> <p>Hint: You need to strictly follow the described strategy and sequence of exploration. Do not forget to print the initial maze and the final maze.</p> <p>We have provided a function <code>print_maze</code> to draw the maze in the skeleton file.</p>"},{"location":"exercises/ex07.html#sample-run","title":"Sample Run","text":"<p>You can use the sample program <code>~cs1010/ex07/maze</code> on the given inputs to view the animation.</p> <p>Note that how the maze is printed on the standard output is different from when it is written to a file.</p>"},{"location":"exercises/ex07.html#question-3-walk","title":"Question 3: Walk","text":"<p>Many cities in the world, such as New York City, are laid out as a grid, with streets running in north-south directions and east-west directions.  Buildings between two streets are called blocks.</p> <p>Suppose we start at a junction of two streets, and we wish to walk to another junction that is \\(y\\) blocks to the north and \\(x\\) blocks to the east, how many possible paths are there to walk to the destination?</p> <p>For example, suppose we want to walk to a junction that is one block to the north and one block to the east, and we can only walk eastward and northward, there are two possible paths.  We can walk east for one block, then walk north for another block.  Or, we can walk north first for one block, then walk east for another block.</p> <p>The figure below illustrates the scenario, where we are positioned at source D and we wish to go to destination B.  The two possible paths are DAB and DEB.</p> <pre><code>A---B---C\n|   |   |\nD---E---F\n</code></pre> <p>Suppose now we want to walk to C, a junction that is two blocks to the east, and one block to the north.  There are three different possible paths.  The three paths are DABC, DEBC, and DEFC.</p> <p>Write a program <code>walk</code> that reads in two integers \\(x\\) and \\(y\\) \\((x \\ge 0, y &gt;= 0)\\), and prints the number of possible paths we can walk to the destination that is \\(x\\) block to the east and \\(y\\) block to the north.</p> <p>Your solution must take no more than \\(O(xy)\\) time.</p> <p>Hint: Think recursively, but solve iteratively.</p>"},{"location":"exercises/ex07.html#sample-runs","title":"Sample Runs","text":"<pre><code>ooiwt@pe111:~/as08-ooiwt$ walk\n10 0\n1\nooiwt@pe111:~/as08-ooiwt$ walk\n1 1\n2\nooiwt@pe111:~/as08-ooiwt$ walk\n2 2\n6\nooiwt@pe111:~/as08-ooiwt$ walk\n20 20\n137846528820\n</code></pre>"},{"location":"exercises/ex07.html#question-4-sudoku","title":"Question 4: Sudoku","text":"<p>This question is inspired by The Prime Minister of Singapore, Lee Hsien Loong, who once wrote a sudoku solver in C++:</p> <p>In the game of sudoku, we are given a \\(9 \\times 9\\) grid, with some of the cells filled with numbers 1 to 9.  We must fill up the rest of the cells with 1 to 9, such that no number repeats itself in each row, in each column, and in each of the nine $3 \\times 3$ subgrids.</p> <p>Write a program, <code>sudoku.c</code>, that reads in a sudoku puzzle, and search for a solution to the puzzle, using the following algorithm:</p> <ul> <li> <p>Start from the top left, and scan left to right, top to bottom.</p> </li> <li> <p>If an empty cell is encountered, try to fill it up with a digit, starting with 1, 2, .. until 9.  For each digit we try, check if it is possible to find a solution, and if so, solve the updated puzzle recursively.</p> </li> <li> <p>If a solution is found, print the solution and stop searching.  Otherwise, (backtrack and) try a different digit, until either we have tried all digits or a solution is found.</p> </li> </ul> <p>The input to the program consists of 9 lines, 9 characters in each line, representing the puzzle.  The input contains only the digits 1 to 9 and the <code>.</code> character, which represents the empty cell.</p> <p>The output contains the steps of the search, printed with the <code>print_sudoku</code> function provided.  At the end of the program, either the solution is printed or the string \"no solution\" if the sudoku cannot be solved.</p> <p>Your code should take less than 5s to run for each test case given.</p>"},{"location":"exercises/ex07.html#sample-run_1","title":"Sample Run","text":"<p>You can try to run the program <code>~cs1010/ex07/sudoku</code> to see the animation of how the solution is expected to work.</p> <p>Note that how the puzzle is printed on the standard output is different from when it is written to a file.</p>"},{"location":"exercises/ex08.html","title":"Exercise 8: Digits","text":""},{"location":"exercises/ex08.html#prerequisite","title":"Prerequisite","text":"<p>You have completed Exercise 7. </p>"},{"location":"exercises/ex08.html#learning-outcomes","title":"Learning Outcomes","text":"<p>Able to model a problem as a search problem and solve it recursively.</p>"},{"location":"exercises/ex08.html#deadline","title":"Deadline","text":"<p>This exercise is part of the CS1010 formative assessment. Submit your solution before 17 November 2023, 23:59 to receive feedback and earn your achievement \"badges\".</p>"},{"location":"exercises/ex08.html#acceptance-link","title":"Acceptance Link","text":"<p>The link to accept the exercise is not available publicly.  Visit Canvas for the link.</p>"},{"location":"exercises/ex08.html#concepts-and-difficulty","title":"Concepts and Difficulty","text":"Question Struct Difficulty 1 Digits"},{"location":"exercises/ex08.html#question-1-digits","title":"Question 1: Digits","text":"<p>We started CS1010 with an assignment question on digits, so it is fitting that we end with one.</p> <p>In this assignment, your goal is to write a program that can recognize handwritten digits. This is a classic problem in pattern recognition and machine learning. The state-of-the-art techniques can now achieve a recognition rate of over 99%. We, however, will implement a simple algorithm called the \\(k\\)-nearest neighbor algorithm, which has a lower accuracy but is simpler.</p>"},{"location":"exercises/ex08.html#supervised-machine-learning","title":"Supervised Machine Learning","text":"<p>The \\(k\\)-nearest neighbor algorithm belongs to a category of algorithms called supervised machine learning_ algorithms.  These algorithms teach or train the machine to learn to do something, by showing the machine many samples.  These are called training samples.  After showing the machine a bunch of these training samples, we can then test the machine how well it has learned, by showing the machine some testing samples.</p> <p>In our case, we want to train the machine to recognize handwritten digits.  During the training phase, we will present a set of handwritten digits in the form of images (as 2D arrays) to the machine, together with a label indicating which digits it is (i.e., \"this picture shows the digit 1, this picture shows the digit 4, etc.\").  </p> <p>Then, during the testing phase, we present a set of handwritten digits to the machine, and ask, \"ok, which digit do you think this is?\"</p> <p>We will then compare the machine's answer with the label of the handwritten digit (also called the ground truth) to see whether the machine recognizes it correctly or not.</p>"},{"location":"exercises/ex08.html#representation-of-a-handwritten-digit","title":"Representation of a handwritten digit","text":"<p>A handwritten digit is an image, represented as a 28-by-28 array of characters, consisting of <code>.</code> and <code>#</code>. An example is:</p> <pre><code>............................\n............................\n............................\n..........#######...........\n.........########...........\n........##########..........\n.......####....###..........\n.......###....####..........\n..............####..........\n.............####...........\n............#####...........\n............####............\n...........####.............\n...........###..............\n..........####..............\n.........####...............\n.........####...............\n........####................\n........###.................\n........###...........####..\n........###################.\n........###################.\n.........###########........\n............................\n............................\n............................\n............................\n............................\n</code></pre> <p>The image above contains the digit 2.</p>"},{"location":"exercises/ex08.html#training-data","title":"Training Data","text":"<p>For this assignment, we will use the data provided by the MNIST Handwritten Digit Database. The original data has been post-processed into CSV file by Joseph Redmon, then post-processed again by yours truly into the format above.</p> <p>The dataset from above contains 60,000 training samples. I have created two smaller subsets for you to test your code.</p> <ul> <li>The first subset contains 10 samples for each digit -- this is given in the file <code>train100.in</code>.</li> <li>The second subset contains 6 samples for digits 0 and 1 -- this is given in the file <code>train6.in</code>.</li> </ul> <p>The full training set from MNIST is too big to be included on GitHub. You can read it from <code>~cs1010/ex08/train60000.in</code> if you want to play with it.</p>"},{"location":"exercises/ex08.html#testing-samples","title":"Testing Samples","text":"<p>We provide two sets of testing samples. The first contains three testing samples per digit. The second contains only a single digit corresponding to the example below.</p> <p>The full testing dataset from MNIST contains 10000 digits. It takes a long time to test every handwritten digit in this file, so you should do this only after you have made sure that your code is fast and correct. Again, the file is too big to be posted on GitHub. You can read it directly from <code>~cs1010/ex08/test10000.in</code>.</p>"},{"location":"exercises/ex08.html#the-algorithm","title":"The Algorithm","text":"<p>We use the \\(k\\)-nearest neighbor algorithm for this assignment.  The idea of this algorithm is that, given a testing sample, the machine will compare it to all the training samples, and find out which digit this testing sample is most similar to.</p> <p>Let's define the distance between the two handwritten digits \\(d(x_1,x_2)\\) as the number of pixels that are different between them, i.e., how many pixels are <code>#</code> in one image but is <code>.</code> in the other image.</p> <p>Given a test sample, \\(q\\), we find the distance between \\(q\\) and all the available training samples and find the \\(k\\) training samples with the smallest distance (i.e., \\(k\\)-nearest neighbors).  \\(k\\) is usually small -- we use \\(k\\) = 5 in this assignment.</p> <p>The intuition is that \\(q\\) must be \"close\" to the training data that has the same labels (i.e., the same digits). So we look at these \\(k\\)-nearest neighbors and find the most common digit \\(d\\) among them. We then recognize \\(q\\) as containing the digit \\(d\\). </p>"},{"location":"exercises/ex08.html#breaking-ties","title":"Breaking Ties","text":"<p>There are two tie-breaking scenarios that we need to consider.  First, if there are more than \\(k\\) nearest neighbors.  In this case, we pick the nearest \\(k\\) by favoring the smaller digit.  For example, if we have the following training samples:</p> digit distance 3 120 2 125 3 131 7 140 1 140 2 140 <p>We favor 1 and 2 and eliminate 7 from the top-\\(k\\) since they are smaller than 7.</p> <p>Second, multiple digits may tie as the most common digit.  In this case, we choose the one that has the smaller distance.  In the example above, after eliminating 7, both 2 and 3 are tied for the most common digit as they both appear twice among the top 5.  We choose 3 since it has a smaller distance (120 vs. 125).  If the closest samples of the digits have the same distance, then we again break ties by favoring the smaller digit.  For example, if the digit 2 in the second entry in the table above also has a distance of 120, then we pick 2 since 2 is the smaller digit.</p>"},{"location":"exercises/ex08.html#efficiency","title":"Efficiency","text":"<p>Suppose we have \\(n\\) training samples, recognizing a digit should take no more than \\(O(kn)\\) time (or \\(O(n)\\) since \\(k\\) is a constant).</p> <p>There is also an opportunity to stop early the calculation of the distance between two handwritten digits if the distance is too large, pruning away redundant work.</p>"},{"location":"exercises/ex08.html#example","title":"Example","text":"<p>Consider the following simple example with six training samples and a test sample.</p> <pre><code>6\n0\n............................\n............................\n............................\n............................\n...............#####........\n...............#####........\n.............########.......\n............##########......\n...........###########......\n..........########.###......\n..........####.##...###.....\n.........#####......###.....\n........####........###.....\n.......####.........###.....\n.......###..........###.....\n......####..........###.....\n......###..........###......\n......###.........####......\n......###........###........\n......###......####.........\n......####..#######.........\n......###########...........\n.......########.............\n........#####...............\n............................\n............................\n............................\n............................\n0\n............................\n............................\n............................\n............................\n.................####.......\n................######......\n...............#######......\n.............#########......\n...........###########......\n..........############......\n.........#############......\n........#####.####.###......\n.......#####..###...##......\n.......####.........##......\n.......##...........##......\n......###...........##......\n.....####..........###......\n.....####..........###......\n.....####.........###.......\n.....####.......####........\n.....##############.........\n......############..........\n........########............\n.........######.............\n............................\n............................\n............................\n............................\n0\n............................\n............................\n............................\n............................\n............................\n..............######........\n..............########......\n.............#########......\n.............#########......\n............##########......\n..........######..####......\n..........#####...####......\n..........#####...####......\n..........#####..#####......\n..........####...#####......\n.........####....####.......\n........#####...#####.......\n........#####...####........\n........#####..#####........\n........####..#####.........\n........##########..........\n........#########...........\n........#########...........\n.........######.............\n..........#####.............\n............................\n............................\n............................\n1\n............................\n............................\n............................\n............................\n............................\n..................####......\n.................#####......\n.................#####......\n................####........\n...............#####........\n...............####.........\n...............####.........\n..............####..........\n.............####...........\n............####............\n............####............\n...........####.............\n...........####.............\n..........####..............\n..........####..............\n.........####...............\n.........####...............\n........####................\n........####................\n.........###................\n............................\n............................\n............................\n1\n............................\n............................\n............................\n............................\n............###.............\n............####............\n............####............\n............####............\n............####............\n............####............\n............#####...........\n.............####...........\n.............####...........\n.............####...........\n.............####...........\n.............####...........\n.............####...........\n.............####...........\n.............#####..........\n.............#####..........\n..............####..........\n..............####..........\n..............####..........\n...............###..........\n............................\n............................\n............................\n............................\n1\n............................\n............................\n............................\n............................\n............................\n.............##.............\n.............##.............\n.............##.............\n.............##.............\n.............###............\n.............###............\n.............###............\n.............###............\n.............###............\n.............###............\n.............###............\n.............###............\n.............###............\n.............###............\n..............###...........\n..............##............\n..............##............\n..............###...........\n..............##............\n..............##............\n............................\n............................\n............................\n</code></pre> <p>The test sample is</p> <pre><code>1\n0\n............................\n............................\n............................\n............................\n............................\n..............#####.........\n.............#######........\n...........##########.......\n..........####.##.####......\n.........####......####.....\n.........###........###.....\n........####.........##.....\n........###..........##.....\n.......###...........##.....\n.......###...........##.....\n.......###...........##.....\n......####...........##.....\n......####..........###.....\n.......###..........###.....\n.......###.........###......\n........###.......###.......\n........####....#####.......\n.........##########.........\n..........#########.........\n............#####...........\n............................\n............................\n............................\n</code></pre> <p>The distances between the test sample and each of the training samples are 101, 120, 162, 174, 173, and 162. The \\(k\\) nearest neighbors belong to digits 0, 0, 0, 1, and 1. The most common digit among these neighbors is 0, so we conclude (correctly) that the test sample is digit 0.</p>"},{"location":"exercises/ex08.html#using-struct","title":"Using struct","text":"<p>One of the objectives of this assignment is to see if you know how to use <code>struct</code>.</p> <p>For this assignment, you should define and use two <code>struct</code>:</p> <ul> <li> <p>a <code>struct digit</code> that encapsulates the 2D array that represents the handwritten digit and its label,</p> </li> <li> <p>a <code>struct neighbor</code> that encapsulates a neighboring digit and the distance to it.</p> </li> </ul>"},{"location":"exercises/ex08.html#inputoutput","title":"Input/Output","text":"<p>Write a program <code>digits</code> that reads, from the standard input, the following:</p> <ul> <li> <p>A positive integer \\(n\\), corresponding to the number of training samples, then repeatedly read \\(n\\) handwritten digits, containing:</p> </li> <li> <p>a label corresponding to the digit in the next image (a number between 0 - 9)</p> </li> <li> <p>28 lines of text, consisting of '.' and '#' only, representing a handwritten digit</p> </li> <li> <p>followed by another positive integer \\(m\\), corresponding to the number testing samples, then repeatedly read \\(m\\) handwritten digits, containing:</p> </li> <li> <p>a label corresponding to the digit in the next image (a number between 0 - 9)</p> </li> <li>28 lines of text, consisting of '.' and '#' only, representing a handwritten digit</li> </ul> <p>The program prints, to the standard output, the following:</p> <p>For each testing sample,</p> <ul> <li>print the digit it is labeled as, followed by a space, followed by the digit it is recognized as.</li> </ul> <p>Finally, print a double value that corresponds to the accuracy, i.e, the percentage of training testing samples correctly recognized.</p> <p>We separated the training samples and testing samples into two files, so the usual way of redirecting a file into your program does not work anymore (since you need two files).</p> <p>The way to run your program is to do the following:</p> <pre><code>cat &lt;training samples&gt; &lt;testing samples&gt; | ./digits\n</code></pre> <p>We use <code>cat</code>, which concatenates two files into one to pass both the training samples and testing samples into the program using the pipe <code>|</code>.</p> <p>The name convention for the output files is different for this assignment. The name is formatted as <code>X-Y.out</code> where <code>X</code> refers to the training samples <code>trainX.in</code> and <code>Y</code> refers to the testing samples <code>testY.in</code>.</p>"},{"location":"exercises/ex08.html#testing","title":"Testing","text":"<p>In addition to the MNIST dataset, a small set of test data has been provided to help you test your code.  These are given as the files <code>digits.X.in</code> and <code>digits.X.out</code> in the <code>inputs</code> and <code>outputs</code> directory.  They are hand-crafted inputs that do not contain any digit-like data.</p> <p>If you wish to test using only these hand-crated test cases, run <pre><code>./test.sh digits\n</code></pre></p> <p>You can also run <pre><code>./test.sh digits &lt;X&gt; &lt;Y&gt;\n</code></pre></p> <p>to test with the training samples <code>trainX.in</code> and testing samples <code>testY.in</code>.</p> <p>Running  <pre><code>make\n</code></pre></p> <p>will cycle through testing with these test cases as usual, followed by a combination of training/testing data.</p>"},{"location":"exercises/ex08.html#sample-runs","title":"Sample Runs","text":"<pre><code>ooiwt@pe121:~/cs1010/ex08$ cat inputs/train6.in inputs/test1.in | ./digits\n0 0\n100.0000\nooiwt@pe121:~/cs1010/ex08$ cat inputs/train100.in inputs/test30.in | ./digits\n0 0\n0 0\n0 6\n1 1\n1 1\n1 1\n2 2\n2 5\n2 2\n3 3\n3 3\n3 3\n4 9\n4 4\n4 9\n5 5\n5 3\n5 3\n6 2\n6 6\n6 6\n7 7\n7 7\n7 7\n8 8\n8 1\n8 8\n9 9\n9 9\n9 9\n73.3333\n</code></pre> <p>When you use the file <code>~cs1010/ex08/train60000.in</code> as the training samples, you should get 100% accuracy with <code>test30.in</code> and 96.56% accuracy with <code>~cs1010/ex08/test10000.in</code></p> <p>To speed up the execution of your code, you can remove the following lines from <code>compile_flags.txt</code> (after making sure that it does not contain any memory errors).</p> <pre><code>-g\n-fsanitize=bounds\n-fsanitize=address\n</code></pre>"},{"location":"guides/c-in-cs1010.html","title":"C in CS1010","text":"<p>C is a simple and flexible language, providing programmers with many ways to achieve the same thing.</p> <p>Some of these features that C provides, however, could be bug-prone.  Wei Tsang has written enough buggy programs himself and seen enough buggy programs from students.  He feels that some of these features from C are not useful for beginners (or even seasoned programmers).</p> <p>Furthermore, some features in C simply encourage bad programming habits that are widely frowned upon.  Some would lead to insecure programs.  </p> <p>As such, in CS1010, we ban and discourage the use of certain operators, functions, constructs, and features in C.</p> <p>This article summarizes this list.  </p>"},{"location":"guides/c-in-cs1010.html#banned-in-cs1010","title":"Banned in CS1010","text":"<p>The banned items should not be used in CS1010.  Students should use alternatives.  The teaching staff reserves the right to apply a penalty while grading the assignments and practical exams if these banned features are used.</p>"},{"location":"guides/c-in-cs1010.html#1-the-and-operators","title":"1. The <code>++</code> and <code>--</code> operators.","text":""},{"location":"guides/c-in-cs1010.html#why","title":"Why?","text":"<ul> <li>These operators lead to potential undefined behavior.  E.g., <code>i = i++;</code></li> <li>The potential confusion is caused by the difference between <code>i++</code> and <code>++i</code>.</li> </ul>"},{"location":"guides/c-in-cs1010.html#what-should-be-used-instead","title":"What should be used instead?","text":"<ul> <li>Use <code>i += 1</code> or <code>i -= 1</code> instead of <code>i++</code> or <code>i--</code></li> </ul>"},{"location":"guides/c-in-cs1010.html#2-skipping-of-curly-braces-for-single-statement-conditional-or-loop-body","title":"2. Skipping of curly braces for single statement conditional or loop body","text":""},{"location":"guides/c-in-cs1010.html#why_1","title":"Why?","text":"<ul> <li>Could lead to dangling <code>else</code> confusion</li> <li>Easy to forget to put back the <code>{}</code> pair if the body is modified beyond a single statement</li> </ul>"},{"location":"guides/c-in-cs1010.html#what-should-be-used-instead_1","title":"What should be used instead?","text":"<ul> <li>Always use <code>{}</code> even if the conditional or loop body contains only a single statement.</li> </ul>"},{"location":"guides/c-in-cs1010.html#3-nested-conditional-operator","title":"3. Nested conditional operator <code>?:</code>","text":""},{"location":"guides/c-in-cs1010.html#why_2","title":"Why?","text":"<ul> <li>Can get difficult to read, understand, and modify.  Example:</li> </ul> <pre><code>a = (x &gt; y) ? ((y &gt; z) ? y : z) : ((x &gt; z) ? x : z);\n</code></pre>"},{"location":"guides/c-in-cs1010.html#what-should-be-used","title":"What should be used","text":"<ul> <li>Use nested <code>if-else</code> loop</li> </ul>"},{"location":"guides/c-in-cs1010.html#4-global-variables","title":"4. Global variables","text":""},{"location":"guides/c-in-cs1010.html#why_3","title":"Why?","text":"<ul> <li>It makes the code hard to reason about and trace, as you have no idea who will modify these variables.  For instance,  if <code>x</code> is not a global variable, we can safely assert that <code>x</code> is still 1 after calling <code>f()</code>.  If <code>x</code> is a global variable, we can no longer assert anything about <code>x</code>.</li> </ul> <pre><code>x = 1;\nf();\n// { x == 1 }\n</code></pre>"},{"location":"guides/c-in-cs1010.html#what-should-be-used-instead_2","title":"What should be used instead","text":"<ul> <li>Declare the variables as local, automatic variables, and pass them around.</li> </ul>"},{"location":"guides/c-in-cs1010.html#5-using-int-and-short","title":"5. Using <code>int</code> and <code>short</code>","text":""},{"location":"guides/c-in-cs1010.html#why_4","title":"Why?","text":"<ul> <li>C standard guarantees that both <code>short</code> and <code>int</code> are at least 16 bits, which limits its guaranteed range to only -32,768 to 32,767.  This is too small for many purposes.</li> <li>We are not concerned about memory usage in CS1010.  If we do want to have precise control over memory, we should be anyway using the types from <code>stdint.h</code>.</li> </ul>"},{"location":"guides/c-in-cs1010.html#what-should-be-used-instead_3","title":"What should be used instead","text":"<ul> <li><code>long</code>, which is guaranteed to be at least 32 bits.</li> </ul>"},{"location":"guides/c-in-cs1010.html#exception","title":"Exception","text":"<ul> <li>If a function from a C library calls for the use of <code>int</code> and offers no <code>long</code> alternative, then we have to use <code>int</code>.</li> </ul>"},{"location":"guides/c-in-cs1010.html#6-the-type-float","title":"6. The type <code>float</code>","text":""},{"location":"guides/c-in-cs1010.html#why_5","title":"Why?","text":"<ul> <li>Not enough precision.  It will cause floating-point errors.</li> </ul>"},{"location":"guides/c-in-cs1010.html#what-should-be-used-instead_4","title":"What should be used instead","text":"<ul> <li><code>double</code></li> </ul>"},{"location":"guides/c-in-cs1010.html#exception_1","title":"Exception","text":"<ul> <li>If a function from a C library calls for the use of <code>float</code> and offers no <code>double</code> alternative, then we have to use <code>float</code>.</li> </ul>"},{"location":"guides/c-in-cs1010.html#7-using-integer-values-for-truefalse","title":"7. Using integer values for true/false","text":""},{"location":"guides/c-in-cs1010.html#why_6","title":"Why?","text":"<ul> <li>Confusing and error-prone</li> </ul>"},{"location":"guides/c-in-cs1010.html#what-should-be-used-instead_5","title":"What should be used instead","text":"<ul> <li>Use the <code>bool</code> type, and the values <code>true</code> and <code>false</code>.</li> </ul>"},{"location":"guides/c-in-cs1010.html#8-goto","title":"8. <code>goto</code>","text":""},{"location":"guides/c-in-cs1010.html#why_7","title":"Why?","text":"<ul> <li>makes the logical flow of the code hard to follow and trace</li> </ul>"},{"location":"guides/c-in-cs1010.html#what-should-be-used-instead_6","title":"What should be used instead","text":"<ul> <li>combinations of conditionals and loops</li> </ul>"},{"location":"guides/c-in-cs1010.html#discouraged-in-cs1010","title":"Discouraged in CS1010","text":"<p>These are things that are not strictly banned, but their usage is discouraged.  Students should use them only if they know very well what they are doing.  Use at own perils.</p>"},{"location":"guides/c-in-cs1010.html#1-printf-and-scanf-functions","title":"1. <code>printf</code> and <code>scanf</code> Functions","text":""},{"location":"guides/c-in-cs1010.html#why_8","title":"Why?","text":"<ul> <li>Using the wrong format modifier for <code>printf</code> could lead to strange results</li> <li>Using the wrong format modifier for <code>scanf</code> could lead to memory corruption</li> <li>Need to look up what is the right format modifier to use</li> <li>Need to pre-allocate memory for <code>scanf</code> of strings</li> <li><code>scanf</code> is not secure</li> <li><code>scanf</code> is not a pure function.  Prefers students to learn about the concept of pure functions first.</li> <li>etc. etc.</li> </ul>"},{"location":"guides/c-in-cs1010.html#what-should-be-used-instead_7","title":"What should be used instead","text":"<ul> <li>The CS1010 I/O library</li> </ul>"},{"location":"guides/c-in-cs1010.html#2-switch-statements","title":"2. <code>switch</code> Statements","text":""},{"location":"guides/c-in-cs1010.html#why_9","title":"Why?","text":"<ul> <li>Bug prone (missing <code>break</code> would cause the case to fall through)</li> <li>Only works on ordinal types.</li> </ul>"},{"location":"guides/c-in-cs1010.html#what-should-be-used-instead_8","title":"What should be used instead","text":"<ul> <li><code>if</code>-<code>else</code> statements</li> </ul>"},{"location":"guides/c-in-cs1010.html#3-break-and-continue-statements","title":"3. <code>break</code> and <code>continue</code> Statements","text":""},{"location":"guides/c-in-cs1010.html#why_10","title":"Why?","text":"<ul> <li>Using <code>break</code> and <code>continue</code> complicates the flow of a loop, marks it harder to reason about the correctness of the loop, and is, therefore, bug-prone.  </li> </ul>"},{"location":"guides/c-in-cs1010.html#what-should-be-used-instead_9","title":"What should be used instead","text":"<ul> <li>Simple loops with a single entry and a single exit point.  Use flag variables to indicate special conditions to exit or continue with the loop.</li> </ul>"},{"location":"guides/c-in-cs1010.html#4-skipping-parenthesis","title":"4. Skipping parenthesis","text":""},{"location":"guides/c-in-cs1010.html#why_11","title":"Why?","text":"<ul> <li>Parenthesis makes it clear to the reader the order of evaluation of arithmetic operations / logical operations.  We should add parenthesis to make sure the intention of the code is clear.</li> </ul>"},{"location":"guides/c-in-cs1010.html#why-should-be-used-instead","title":"Why should be used instead","text":"<ul> <li>Parenthesis</li> </ul>"},{"location":"guides/clang.html","title":"CS1010 Compilation Guide","text":"<p>We have automated the steps to compile C programs for all CS1010 assignments and exercises by providing <code>Makefile</code> and <code>compile_flags.txt</code>.  The following guide explains how one can compile a C program with <code>clang</code> directly, without using <code>Makefile</code>.  This information is useful once students graduated from CS1010 and go to other modules/scenarios where <code>Makefile</code> is not provided.</p>"},{"location":"guides/clang.html#1-compile-a-standalone-c-program","title":"1. Compile a standalone C program","text":"<p>Suppose we have a standalone C program <code>teh.c</code> that does not use any external libraries.  We can compile the program using the command</p> <pre><code>ooiwt@pe118:~$ clang teh.c\n</code></pre> <p>This command should create an executable called <code>a.out</code> in the current directory, which you can then run with:</p> <pre><code>ooiwt@pe118:~$ ./a.out\n</code></pre>"},{"location":"guides/clang.html#2-renaming-executable-file","title":"2. Renaming executable file","text":"<p>The name <code>a.out</code> is an abbreviation for assembler output, a name that many compilers kept as the default output name since the 60s.  We should, however, give our executable more descriptive name, by using the <code>-o</code> flag.  (<code>o</code> is the mnemonic for output).</p> <pre><code>ooiwt@pe118:~$ clang teh.c -o teh\n</code></pre> <p>or</p> <pre><code>ooiwt@pe118:~$ clang -o teh teh.c\n</code></pre> <p>The command above would create an executable called <code>teh</code>.</p> <p>Beware of the order</p> <p>If you are not careful and run the following command instead: <pre><code>ooiwt@pe118:~$ clang -o teh.c teh\n</code></pre> <code>clang</code> would overwrite your code <code>teh.c</code> -- all your hard work will be gone!!</p>"},{"location":"guides/clang.html#3-warning-for-possible-bugs","title":"3. Warning for possible bugs.","text":"<p>The <code>clang</code> checks for syntax errors in your C files -- i.e., things that violate the C syntax rules.  The compiler, however, is smart enough to identify possible bugs -- errors that will cause your program to behave incorrectly, even if the syntax follows C's rules.  You can ask <code>clang</code> to warn you about this, using the <code>-W</code> flag (<code>W</code> is the mnemonic for warning -- note the capital W).  The manual for <code>clang</code> lists different types of warnings that <code>clang</code> can warn you about.  For instance, we can ask <code>clang</code> to warn us by enabling <code>-Wall</code> warnings.  The command to do so is:</p> <pre><code>ooiwt@pe118:~$ clang -Wall teh.c -o teh\n</code></pre> <p>For beginners, it is highly recommended that you always compile with at least <code>-Wall</code>, <code>-Wextra</code>, and the <code>-Wpedantic</code> flag.</p> <p>clang warning flags</p> <p><code>-Wall</code> in <code>clang</code> does not catually enable all warnings. <code>-Weverything</code> enables every warning but it could be overwhelming for beginners.   In CS1010 assignments, we will provide a <code>Makefile</code> so that you can use <code>make</code> to automate the compilation process.  Appropriate warning flags will be enabled for you.</p>"},{"location":"guides/clang.html#4-generating-additional-information-for-debugging","title":"4. Generating additional information for debugging.","text":"<p>In order to use the debugger <code>lldb</code> to trace through and debug your program, <code>clang</code> needs to generate additional information and store them in the executable file.  We can instruct <code>clang</code> to generate them with the flag <code>-g</code> (<code>g</code> for generate).  </p> <pre><code>ooiwt@pe118:~$ clang -Wall -g teh.c -o teh\n</code></pre> <p>It is recommended that you always compile with <code>-g</code> flags during the development phase.  If you need to measure the performance (e.g., how fast it runs) of your program or when you are releasing the program to the public, you can remove the <code>-g</code> flag and compile with the optimization flags (e.g., <code>-O</code>) instead.  </p>"},{"location":"guides/clang.html#5-linking-with-the-standard-library","title":"5. Linking with the standard library.","text":"<p>To link with a standard library, we use the <code>-l</code> flag to specify the name of the library to link.  For instance, to link with the C standard math library (abbreviated as <code>m</code>), you issue the command:</p> <pre><code>ooiwt@pe118:~$ clang -Wall -g teh.c -o teh -lm\n</code></pre>"},{"location":"guides/clang.html#6-linking-with-3rd-party-library","title":"6. Linking with 3rd party library","text":"<p>By default, <code>clang</code> looks for headers and libraries in the systems directories (<code>/usr/include</code>, <code>/usr/lib</code>, etc) and the current working directory.  </p> <p>If you use a third-party library, you usually need to tell <code>clang</code> where to look for the corresponding headers and libraries.  You can use the <code>-I</code> flag and the <code>-L</code> flag for these purposes. For instance, if you have a library installed under your home called <code>citadel</code>, and the file <code>citadel.h</code> can be found under <code>~/citadel/include</code> and the file <code>libcitadel.a</code> can be found under <code>~/citadel/lib</code>, to tell <code>clang</code> where to find these files, you can compile with:</p> <pre><code>ooiwt@pe118:~$ clang -Wall -g -I ~/citadel/include -L ~/citadel/lib teh.c -o teh -lm -lcitadel\n</code></pre> <p>For instance, to link with the CS1010 I/O library on the PE nodes, you can run <pre><code>ooiwt@pe118:~$ clang -Wall -g -I ~cs1010/include -L ~cs1010/lib teh.c -lcs1010\n</code></pre></p>"},{"location":"guides/clang.html#7-the-file-compile_flagstxt","title":"7. The file <code>compile_flags.txt</code>","text":"<p>The list of compilation flags can get lengthy.  For CS1010 assignments/exercises, we have included all the necessary flags in a file called <code>compile_flags.txt</code>.  We can then pass this file with the <code>@</code> prefix to <code>clang</code>.  <code>clang</code> will read the flags from the file.</p> <pre><code>ooiwt@pe118:~$ clang @compile_flags.txt teh.c -lcs1010\n</code></pre>"},{"location":"guides/documentation.html","title":"Code Documentation","text":"<p>Code documentation is as important as the code itself.  It helps readers of your code, including your future self, to understand</p> <ul> <li>the purpose of a piece of code</li> <li>what assumptions are being made, and</li> <li>the reasoning behind why certain things are done.</li> </ul>"},{"location":"guides/documentation.html#c-syntax-for-comments","title":"C Syntax for Comments","text":"<p>In C, you can write comments in two ways:</p> <ul> <li>Either prefix a one-line comment with two slashes <code>//</code> , or</li> <li>Write multiple-line comments between <code>/*</code> and <code>*/</code></li> </ul> <p>For example:</p> <pre><code>// assume the number of elements &gt; 1\n</code></pre> <pre><code>/*\n This function reads in the radius of a sphere and returns the\n volume of the sphere.  We assume the radius is normalized between\n 0.0 and 1.0.\n */\n</code></pre>"},{"location":"guides/documentation.html#the-doxygen-format","title":"The Doxygen Format","text":"<p>In CS1010, we will adopt the Doxygen format for C comments.  Doxygen is a tool that automatically generates HTML documents from comments in C code and is widely used in the industry.</p> <p>We write a Doxygen comment with an additional <code>*</code> after <code>/*</code>:</p> <pre><code>/**\n\n */\n</code></pre> <p>The comments can be free-form text.  However, to help with creating a more structured document, we can add what Doxygen calls special \"commands\".  I view these commands as keys to certain information.  Useful commands are:</p>"},{"location":"guides/documentation.html#author-the-name-the-author","title":"<code>@author</code>: The name the author","text":"<p>This is used to identify the author and placed at the top of the <code>.c.</code> file   This is what you have been using since Exercise 0.</p>"},{"location":"guides/documentation.html#file-the-name-of-a-file","title":"<code>@file</code>: The name of a file","text":"<p>This is used to identify the name of the file and be placed at the top of the <code>.c.</code> file.  This is usually written for you already.</p>"},{"location":"guides/documentation.html#pre-the-precondition-of-a-function","title":"<code>@pre</code>: The precondition of a function","text":"<p>If your function makes certain assumptions about the inputs, explain it using this command. This is used to document assertions at the beginning of your function (e.g., a string is not empty, a pointer is not NULL, etc)</p>"},{"location":"guides/documentation.html#post-the-postcondition-of-a-function","title":"<code>@post</code>: The postcondition of a function","text":"<p>This command is used to document assertions that are true just before you return from your function.</p>"},{"location":"guides/documentation.html#paramdirection-name-describe-a-parameter-of-a-function","title":"<code>@param[&lt;direction&gt;] &lt;name&gt;</code>: Describe a parameter of a function.","text":"<p><code>&lt;name&gt;</code> is the name of the parameter (can be a variable, array, pointers, struct, etc).</p> <p><code>&lt;direction&gt;</code> indicates if you are passing data in or out of the function.  From Unit 1 to 16, we only pass data into the function.  For such parameters, we document it with <code>@param[in]</code>.  In Unit 17, we will learn about passing by reference.  If a parameter is passed by reference to be modified inside the function, we will document it as <code>@param[out]</code>.  For a parameter that is meant to serve both purposes (pass a value into the function, be modified, and passed the new modified value out), we use <code>@param[in,out]</code>.</p>"},{"location":"guides/documentation.html#return-describe-the-return-value-of-a-function","title":"<code>@return</code>: Describe the return value of a function","text":"<p>The comments should be placed before a file, a function, or a variable that you want the comment to apply to.</p>"},{"location":"guides/documentation.html#example-1-cs1010-io-library","title":"Example 1: CS1010 I/O Library","text":"<pre><code>/**\n * @file: cs1010.c\n * @author: Ooi Wei Tsang\n *\n * This file contains the implementation of the CS1010 I/O library to\n * simplify the reading and writing of integer, real numbers, and text\n * from the standard input and output respectively.\n */\n\n/**\n * Read k white-space-separated words from the standard input in an array.\n * The notion of \"word\" is the same to cs1010_read_word().  The caller is\n * responsible for freeing the memory allocated for the array by calling\n * free().\n *\n * @param[in] k The number of words to read.\n * @return Returns NULL if there is a memory allocation error, otherwise,\n * return an array of char* containing the words.\n */\nchar** cs1010_read_word_array(size_t k)\n{\n   :\n}\n</code></pre>"},{"location":"guides/documentation.html#example-2-collatz","title":"Example 2: Collatz","text":"<pre><code>/**\n * Find the number between 1 and n with the maximum number of \n * steps to reach 1, breaking ties by finding the larger among\n * these numbers.\n *\n * @param[in,out] max_num_steps The maximum number ot steps\n * @param[out] max_n The number with the maximum number of steps\n *\n * @pre max_num_steps &lt;= 0\n */\nvoid solve(long n, long *max_n, long *max_num_steps) {\n  for (long i = 1; i &lt;= n; i += 1) {\n    long num_of_steps = count_num_of_steps(i);\n    if (num_of_steps &gt;= *max_num_steps) {\n      *max_n = i;\n      *max_num_steps = num_of_steps;\n    }\n  }\n}\n</code></pre> <p>Note: a better design of the function above is not to rely on the  caller to set <code>max_num_steps</code> to 0, but set it at the beginning of  the function ourselves.</p>"},{"location":"guides/documentation.html#example-3-taxi","title":"Example 3: Taxi","text":"<pre><code>/**\n * Checks if a given day is a weekday or not.\n *\n * @param[in] day This indicates which day it is.  1 is Monday; \n *                7 is Sunday.\n * @return Returns true if day is a weekday, false otherwise.\n *\n * @pre 1 &lt;= day &lt;= 7\n */\nbool is_weekday(long day)\n{\n    return (day &gt;= 1 &amp;&amp; day &lt;= 5);\n}\n</code></pre>"},{"location":"guides/environments.html","title":"The CS1010 Programming Environment","text":"<p>C is a common programming language.  You can find different implementations of a C compiler on many platforms.  Wikipedia lists more than 40 different C compilers.  These different compilers support different processor architectures and operating systems and may behave slightly differently as well as support different features of C standards.  It is therefore important for CS1010 to stick to a single platform and single compiler.</p> <p>Our platform of choice is Ubuntu 20.04. using the <code>clang</code> compiler (version 10.0 or later).</p> <p>The school has provided a list of computing servers for you to use.  You can access them remotely via <code>ssh</code> (Secure SHell).  The hosts are named <code>pe111</code>, <code>pe112</code>, ... , <code>pe120</code>.  (<code>pe</code> stands for \"programming environment\").  We will refer to these servers generally as the PE hosts.</p> <p>pe115 and pe116</p> <p>For this semester, the two servers <code>pe115</code> and <code>pe116</code> are not available.</p> <p>You can choose which of the 8 hosts to use.  You share the same home directory across all the hosts (this home directory, however, is different from that of <code>stu</code>).</p> <p>For simplicity, the following guide uses <code>pe111</code> in all examples.  Do keep in mind that you can use other hosts for CS1010 to spread out the load.</p> <p>While you could complete your programming assignments on your own computers, the practical exams are done in a controlled environment using servers similar to the PE hosts.  It is therefore advisable for you to familiarize yourself with accessing the PE servers via <code>ssh</code> and edit your program with either <code>vim</code>.</p>"},{"location":"guides/environments.html#basic-requirements","title":"Basic Requirements","text":"<ol> <li> <p>You need to have an SoC Unix account.  If you do not have one, you can apply for one online.</p> </li> <li> <p>Once you have an account, you need to activate your access to the PE hosts, which are part of the SoC computer clusters.</p> </li> <li> <p>You need a command line <code>ssh</code> client.  Windows 10/11, macOS, and Linux users should already have <code>ssh</code> installed by default.  If your OS does come with <code>ssh</code> (i.e., it cannot find the <code>ssh</code> command when you type <code>ssh</code> into your terminal), look for instructions on how to install OpenSSH client on your operating system.</p> </li> <li> <p>You need a terminal emulator.  The default terminal emulator that comes with Windows and Mac supports only basic features.  For Windows 10/11 users, CS1010 recommends either PowerShell (pre-installed) or Windows Terminal.  For macOS users, CS1010 recommends iTerm2.</p> </li> </ol> <p>For older versions of Windows, you can check out XShell 6 (free for home/school use), or PuTTY.  These are GUI-based programs so the command lines instructions below do not apply.</p>"},{"location":"guides/environments.html#the-command-to-ssh","title":"The Command to SSH","text":"<p>To connect to a remote host, run the following in your terminal on your local computer: <pre><code>ssh &lt;username&gt;@&lt;hostname&gt;\n</code></pre></p> <p>Replace <code>&lt;username&gt;</code> with your SoC Unix username and <code>&lt;hostname&gt;</code> with the name of the host you want to connect to. For instance, I would do: <pre><code>ssh ooiwt@pe112.comp.nus.edu.sg\n</code></pre></p> <p>if I want to connect to <code>pe112.comp.nus.edu.sg</code>.</p> <p>After the command above, follow the instructions on the screen.  The first time you ever connect to <code>pe112.comp.nus.edu.sg</code>, you will be warned that you are connecting to a previously unknown host.  Answer <code>yes</code>.  After that, you will be prompted with your SoC Unix password.  Note that nothing is shown on the screen when your password is being entered.</p>"},{"location":"guides/environments.html#accessing-the-pe-hosts-from-outside-soc","title":"Accessing The PE Hosts from Outside SoC","text":"<p>The PE hosts can only be accessed from within the School of Computing networks.  If you want to access it from outside, you need to connect through SoC VPN.</p> <p>First, you need to set up a Virtual Private Network (VPN) (See instructions here).  The staff at <code>helpdesk@comp.nus.edu.sg</code> or the IT helpdesk in COM1, Level 1, will be able to help you with setting up if needed.</p> <p>SoC VPN vs NUS VPN</p> <p>Note that SoC VPN is different from NUS VPN.  Connecting to NUS VPN only allows you access to the NUS internal network, but not the SoC internal network.</p>"},{"location":"guides/environments.html#copying-files-between-pe-nodes-and-local-computer","title":"Copying Files between PE Nodes and Local Computer","text":"<p>Secure copy, or <code>scp</code>, is one way to transfer files between the programming environments and your local computer.   <code>scp</code> behaves just like <code>cp</code> (see Unix: Essentials).  The command takes in two arguments, the source and the destination.   The difference is that we use the <code>&lt;username&gt;@&lt;hostname&gt;:&lt;filename&gt;</code> notation to specify a file on a remote host.</p> <p>Let's say you want to transfer a set of C files from the directory <code>a01</code> to your local computer, then, on your local computer.  You run:</p> <pre><code>ooiwt@macbook:~$ scp ooiwt@pe111.comp.nus.edu.sg:~/a01/*.c .\n</code></pre> <p>Warning</p> <p>If you have files with the same name in the remote directory, the files will be overwritten without warning.  I have lost my code a few times due to <code>scp</code>.  </p> <p>The expression <code>*.c</code> is a regular expression that means all files with filename ending with <code>.c</code> (see Advanced Topics on Unix). You can copy specific files as well.  For instance, to copy the file <code>hello.c</code> from your local computer to your <code>~/a01</code> directory:</p> <pre><code>ooiwt@macbook:~$ scp hello.c ooiwt@pe111.comp.nus.edu.sg:~/a01\n</code></pre> <p><code>scp</code> supports <code>-r</code> (recursive copy) as well.</p> <p>Note that we always run <code>scp</code> on your local computer in the examples above, since the SSH server runs on the PE node.</p>"},{"location":"guides/environments.html#setting-up-ssh-keys","title":"Setting up SSH Keys","text":"<p>The next step is not required but is a time-saver and a huge quality-of-life improvement.  You need to be familiar with basic Unix commands, including how to copy files to remote hosts (using <code>scp</code>) and how to check/change file permissions (using <code>ls -l</code> and <code>chmod</code>).  If you are still not comfortable with these commands, make sure you play with the basic Unix commands first.  You can come back and complete this step later. </p> <p>Our goal here is to set up a pair of public/private keys for authentication so that you do not need to type your password every time you log into a PE host.</p> <p>You can use the following command on your local computer to generate a pair of keys: <pre><code>ssh-keygen -t rsa\n</code></pre></p> <p>This command will generate two keys, a private key <code>id_rsa</code> and a public key <code>id_rsa.pub</code>.  Keep the private key <code>id_rsa</code> on your local machine in the hidden <code>~/.ssh</code> directory, and copy the public key <code>id_rsa.pub</code> to your home directory on PE <code>pe111</code>.  On <code>pe111</code>, run <pre><code>cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\n</code></pre></p> <p>Make sure that the permission for <code>.ssh</code> both on the local machine and on PE is set to <code>700</code> and the files <code>id_rsa</code> on the local machine and <code>authorized_keys</code> on the remote machine are set to <code>600</code>.  Once set up, you need not enter your password every time you run <code>ssh</code> or <code>scp</code>.  </p> <p>Using ssh-copy-id</p> <p>If you have <code>ssh-copy-id</code> installed (e.g., this is pre-installed with macOS), you can simplify the above to two steps: <pre><code>ssh-keygen -t rsa\nssh-copy-id &lt;username&gt;@pe111.comp.nus.edu.sg\n</code></pre></p>"},{"location":"guides/environments.html#stability-of-network-connection","title":"Stability of Network Connection","text":"<p>Note that a stable network connection is required to use the PE hosts for a long period without interruption.   If you encounter frequent disconnections while working at home or on campus while connected wirelessly, please make sure that your Wi-Fi signal is strong and that there is no interference from other sources. </p> <p>If your connection is disconnected in the middle of editing, <code>vim</code> saves the state of the buffer for you.  See the section on recovery file on how to recover your files.</p> <p>If you experience frequent disconnection, you can consider running <code>screen</code>. After logging into a PE host, run:</p> <pre><code>screen\n</code></pre> <p>You will see some messages, press ++Enter++ to go to the command prompt. You can now use the PE host as usual. In case you are disconnected (e.g., in the middle of editing), you can log into the same PE host again, and run:</p> <pre><code>screen -r\n</code></pre> <p>to resume your previous session.</p>"},{"location":"guides/environments.html#troubleshooting","title":"Troubleshooting","text":"<p>Suppose you try to connect to <code>pe111</code> using: <pre><code>ssh ooiwt@pe111.comp.nus.edu.sg\n</code></pre> and you get the following error:</p> <ol> <li> <p><code>ssh: Could not resolve hostname pe111.comp.nus.edu.sg</code></p> <p><code>ssh</code> cannot recognize the name <code>pe111</code>, it is likely that you are not connected to the SoC VPN.</p> </li> <li> <p><code>Connection closed by 192.168.48.xxx port 22</code></p> <p>You have connected to the PE host, but you are kicked out because you have no permission to use the host.</p> <p>Make sure you have activated your access to \"SoC computer clusters\" here: https://mysoc.nus.edu.sg/~myacct/services.cgi</p> </li> <li> <p><code>Permission denied, please try again</code></p> <p>You did not enter the correct password or username.  Please use the username and password  of your SoC Unix account which you have created here: https://mysoc.nus.edu.sg/~newacct/.</p> <p>Check that you have entered your username correctly.  It is case-sensitive.</p> <p>If you have lost your password, go here: https://mysoc.nus.edu.sg/~myacct/resetpass.cgi</p> </li> <li> <p><code>Could not chdir to home directory /home/o/ooiwt: Permission denied</code></p> <p>This error means that you have successfully connected to the PE hosts, but you have no access to your home directory. </p> <p>This should not happen.  Please send an email with the above error message to helpdesk@comp.nus.edu.sg, including the PE hosts that you connected to with this error and your username.  The system administrator can reset the permission of your home directory for you.</p> </li> </ol>"},{"location":"guides/exercises.html","title":"Programming Exercises","text":"<p>Programming cannot be \"studied\".  Students must practice what they learn, through solving programming problems, to attain the skills of computational problem-solving in C.</p> <p>CS1010 provides close to 90 programming questions for students to practice.  These are organized into 11 weekly programming exercises.</p>"},{"location":"guides/exercises.html#general-advice","title":"General Advice","text":"<ul> <li> <p>Spend some time thinking about the algorithm before you begin coding.  Write out the pseudo-code or draw out the flowchart on your own before you start typing in your program. </p> </li> <li> <p>Practice incremental coding.  Incremental coding means do NOT type in the whole long program in a single session and then compile it. Instead, type your program in bits and pieces and compile it incrementally. Try to maintain a compilable program even while you are working on it.  Submitting a compilable program that partially works is better than submitting an un-compilable one; this is especially important for your practical exams. </p> </li> <li> <p>Decompose a problem into smaller or simpler solvable problems.  When a problem is too complex, break the problem down into smaller sub-problems and solve each one separately (by writing functions), before combining them into a solution that solves the original problem.  This way, you can compartmentalize your thoughts and focus on solving smaller, simpler, more tractable sub-problems. </p> </li> <li> <p>If you can't solve a given problem fully, sometimes it helps to make additional assumptions to simplify the problem first (e.g., solve it for the case where the input integer is positive only), before solving the original problem.  During the practical exams, this strategy could help you get partial marks.</p> </li> <li> <p>Test your programs thoroughly.  We might not give you all the test cases in the programming questions.  So seeing a <code>passed</code> message (meaning your code passed all the given test cases) does not necessarily mean your code is correct.  You should separately run and test each of your programs with additional test cases.</p> </li> <li> <p>Follow the problem specification exactly.  Read the problem statement carefully and make sure your code meets the requirements given.  For instance, if the question asks for a function named <code>compute_area</code>, then your code MUST contain a function named <code>compute_area</code>.  Any other names (<code>calculate_area</code>, <code>ComputeArea</code>) are not acceptable.  If the output requires a single integer to be printed, printing extra text (e.g., <code>The answer is 5</code>) is not acceptable.</p> </li> <li> <p>You are encouraged to discuss the programming questions with your friends and learn from each other.  This process is an important part of the learning experience in CS1010.  Sharing and learning about how to solve a problem (at the algorithm level) from each other is not plagiarism.  Copy-pasting of code from others, or writing the code together line-by-line, however, is plagiarism.</p> </li> </ul> <p>See also How NOT to Go About a Programming Assignment, by Agustin Cernuda del Rio. </p> <p>Computer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again).._</p>"},{"location":"guides/exercises.html#retrieving-and-submitting-programming-questions","title":"Retrieving and Submitting Programming Questions","text":"<p>All instructions below are meant to be run on the PE hosts.</p> <p>Every programming exercise has a unique ID, prefixed with <code>ex</code>, and is followed by a two-digit sequence number. </p> <p>We use GitHub Classroom for managing the submission (including submissions history) and grading.  You will have one code repository for each exercise.</p> <p>The steps for completing a programming assignment/exercise are as follows:</p> <ol> <li> <p>Accept: Upon release, log into your GitHub account registered with CS1010 and click on the given Web link to accept the assignment/exercise.  This step would cause a repository to be created for you on GitHub Classroom, and a copy of the skeleton code and test data to be cloned inside that repository.  The name of the repository is of the form <code>&lt;id&gt;-&lt;username&gt;</code>.  For instance, <code>ex00-ooiwt</code>.</p> </li> <li> <p>Get: On one of the PE hosts, run: <pre><code>~cs1010/get &lt;id&gt;\n</code></pre></p> <p>For example, to get the first exercise, run <code>~cs1010/get ex00</code>.  This step would cause a copy of your repository to be cloned into the current directory on the PE hosts.  You now have a copy of the code and test data on the PE hosts.</p> </li> <li> <p>Solve: Read the questions posted online and solve each question.  More details, along with some best practices for solving the programming questions, are given below.  Note that while there are ways for you to work on the GitHub environment (using GitHub CodeSpace or VS Code) directly without logging into PE nodes, doing so is not recommended.  During the practical exams, you are required to solve the programming questions in a sandboxed environment.  The PE hosts emulate the practical exam condition closely.  So it is important for you to become comfortable using the Unix CLI and Vim of the PE hosts.</p> </li> <li> <p>Submit: When you want to take a snapshot of your code or submit the final version for grading, run: <pre><code>~cs1010/submit &lt;id&gt;\n</code></pre></p> <p>This process uploads your C code for each question onto GitHub.  Note that any additional files in the directory will not be uploaded.</p> <p>For example, <code>~cs1010/submit ex01</code>.  You should see a message like this: <pre><code>You have submitted your code.  Please verify your submission online at:\n  https://github.com/nus-cs1010-2324-s1/ex00-ooiwt\nto make sure that everything is in order.\n</code></pre></p> <p>After submission, it is a good practice to double-check that your submission is done properly by going to the GitHub site.</p> <p>You are not allowed to interact with your CS1010 GitHub repositories using <code>git</code> commands or edit your files directly on GitHub's website.  Doing so would interfere with the automation that we use for grading.</p> </li> </ol>"},{"location":"guides/exercises.html#code-skeleton","title":"Code Skeleton","text":"<p>After running <code>~cs1010/get &lt;id&gt;</code>, you should see the folder <code>&lt;id&gt;-&lt;username&gt;</code> in your current directory with skeleton code inside.</p> <p>Inside that directory, you should see the following files:</p> <ul> <li>Files that end with <code>.c</code>, one for each problem/question.  The naming convention is <code>&lt;problem&gt;.c</code>.  These are the skeleton C code that you should edit to solve the programming question and the only files that you should change.</li> <li><code>inputs</code> and <code>outputs</code> are subdirectories that contain test inputs and test outputs. We use the convention <code>&lt;problem&gt;.&lt;id&gt;.in</code> for input test data, and <code>&lt;problem&gt;.&lt;id&gt;.out</code> for output test data.  For example, you will see files such as <code>echo.1.in</code>, <code>divide.1.out</code>, etc.  The expected output for <code>echo.1.in</code> is in <code>echo.1.out</code>.  You can look at the content of these files if you wish.  You can also edit these files to change the test input and output to modify the test cases.</li> <li><code>Makefile</code>: The configuration for the tool <code>make</code> that we use to automate the compilation and testing of the programs.  </li> <li><code>test.sh</code>: A bash script for testing your code.</li> <li><code>compiler_flags.txt</code> and <code>.clang-tidy</code> are two files used to configure <code>clang</code> and <code>clang-tidy</code> respectively.  You do not need to edit this.</li> <li><code>.gitignore</code> contains a list of filenames to be ignored by the submission script.</li> </ul>"},{"location":"guides/exercises.html#automating-the-edit-compile-run-cycle","title":"Automating the Edit-Compile-Run Cycle","text":"<p><code>make</code> is a programmer's utility to automate the workflow of the edit-compile-run cycle.  We use <code>make</code> for all your exercises, assignments, and practical exams.</p> <p>A <code>Makefile</code> is provided for each of your assignments, exercises, and practical exams.  You don't have to know how to write a <code>Makefile</code>, but interested students can contact the teaching team for learning resources.</p> <p>For most situations, you only need to run: <pre><code>make\n</code></pre></p> <p>Our <code>Makefile</code> is configured so that <code>make</code> performs the following three tasks, in order:</p> <ol> <li> <p>Compile.  For each <code>&lt;problem.c&gt;</code>, <code>make</code> invokes the compiler <code>clang</code> with the proper arguments to compile the code into binary executable <code>&lt;problem&gt;</code>.  This step is executed only if <code>&lt;problem&gt;.c</code> has been modified since the last compilation.  If there is a compilation error, <code>make</code> will not continue with the rest of the process.</p> </li> <li> <p>Test.  If the compilation is successful or not needed, <code>make</code> would invoke <code>test.sh &lt;problem&gt;</code> to test your program against each of the given test cases.  If your program passed all the given test cases, it would print: <pre><code>&lt;problem&gt;: passed\n</code></pre> Otherwise, a list of failed test cases is printed.</p> </li> <li> <p>Lint. If the compilation is successful or not needed, and regardless of whether your code passed all the test cases or not, <code>make</code> would invoke <code>clang-tidy</code> to check your code against bad programming practices.  This step generates warnings for each instance of bad practices or bug-prone code found.  You should heed the warnings and fix your code, even if your code passed all the test cases.</p> </li> </ol> <p>If you only want to run <code>clang-tidy</code> on all the C files, you can run <pre><code>make tidy\n</code></pre></p> <p>If you only want to test all the programs, you can run <pre><code>make test\n</code></pre></p> <p>To compile an individual program, type <pre><code>make &lt;program&gt;\n</code></pre></p> <p>For instance, the command <pre><code>make echo\n</code></pre></p> <p>compiles <code>echo.c</code> into <code>echo</code> without testing or running <code>clang-tidy</code> on it.</p> <p>Sometimes it is useful to test-run a particular program only.  For example, if you want to test only the program <code>echo</code>, then <pre><code>./test.sh echo\n</code></pre></p> <p>Finally, you can also run <pre><code>make clean\n</code></pre> to remove all the generated executable files.</p>"},{"location":"guides/exercises.html#testing","title":"Testing","text":"<p>If your code prints the wrong output for some of the test inputs, familiarity with Unix CLI would be helpful.  Suppose that your code for problem <code>echo</code> fails on test case 3.  To see the input of this test case, run: <pre><code>cat inputs/echo.3.in\n</code></pre></p> <p>To see the expected output: <pre><code>cat outputs/echo.3.out\n</code></pre></p> <p>To see what output your program gives, <pre><code>./echo &lt; inputs/echo.3.in\n</code></pre></p> <p>Sometimes it is useful to store the output of your program in a file: <pre><code>./echo &lt; inputs/echo.3.in &gt; myoutput\n</code></pre></p> <p>You can then run <code>vim -d</code> to compare the expected output and your output to figure out what exactly differs between the two outputs: <pre><code>vim -d outputs/echo.3.out myoutput\n</code></pre></p> <p>For each question, we will provide you with a limited set of test data.  During grading, we may grade your program with additional test data.</p>"},{"location":"guides/exercises.html#ignoring-changes-in-spaces-and-blank-lines","title":"Ignoring Changes in Spaces and Blank Lines","text":"<p>Note that internally, in <code>test.sh</code>, we use <code>diff -bB</code> to compare if your output matches the expected output.  This means that we ignore blank lines and changes in white spaces.</p> <p>We require an exact match in the outputs only in programming questions where white spaces matter.</p>"},{"location":"guides/exercises.html#correctness-of-test-data","title":"Correctness of Test Data","text":"<p>You may assume that all input data are correct unless otherwise stated. Hence you do NOT need to do input data validation. This is to allow you to focus on getting the program right, instead of worrying about making your program fool-proof which involves a lot more work. </p>"},{"location":"guides/exercises.html#identifying-yourself","title":"Identifying Yourself","text":"<p>In every C file that you submit to CS1010, it is a good practice to identify yourself by writing your name and lab group.  We may deduct marks if you fail to do so.  You need to edit the line:</p> <pre><code>@author XXXX (Group YYYY)\n</code></pre> <p>and change it to something like:</p> <pre><code>@author Elsa of Arendelle (Group B10)\n</code></pre> <p>This helps us to easily identify the authors when needed.  Furthermore, signing off your work is a sign that you take pride in the work that you have produced!</p>"},{"location":"guides/exercises.html#submitting-and-receiving-feedback","title":"Submitting and Receiving Feedback","text":""},{"location":"guides/exercises.html#method-of-submission","title":"Method of Submission","text":"<p>Students must use the <code>submit</code> command provided on the PE hosts to submit the assignments (more details below).  Programs submitted through other means, such as emails, will NOT be accepted.</p>"},{"location":"guides/exercises.html#feedback","title":"Feedback","text":"<p>Only the latest submission of each question will be reviewed by the tutors after the deadline.</p> <p>The dimension for review includes correctness, design, style, efficiency, and documentation.  Each submission will be categorized as one of the following four categories:</p> <ul> <li>Excellent</li> <li>Good</li> <li>Need improvement</li> <li>Insufficient effort </li> </ul> <p>A program that cannot compile (i.e., there is a compilation error) will be considered as \"insufficient effort\".</p> <p>Feedback is done by both a bot and a human (i.e., a lab tutor) and is posted as comments in your GitHub repository. A summary of \"Feedback.md\" will be made available in your GitHub repository when the review is completed.</p> <p>Note that, during the practical exam, a program that cannot compile (i.e., there is a compilation error) will receive 0 marks. In addition, there is an additional -1 mark for each warning that your program received.  Always make sure that your program compiles cleanly without any warning when solving the exercises.</p>"},{"location":"guides/exercises.html#disallowed-syntax","title":"Disallowed Syntax","text":"<p>Some programming assignments may explicitly disallow the use of certain syntax.  Generally, using syntax or statements which are not yet covered either in class or the exercise question is strongly discouraged.  We also discourage or ban the use of certain syntax for this module, (e.g., <code>++</code>) you should not use them.  The exercises are designed such that you should not need to do so (even though doing so may result in your program being shorter or more efficient). </p> <p>During the practical exam, if the objective of the assessment question is undermined, the penalty for using such forbidden syntax will be heavy. If in doubt, please ask for clarification.</p> <p>You can find the list of banned and discouraged C features in the article \"C in CS1010.\"</p>"},{"location":"guides/exercises.html#reminders-about-course-policies","title":"Reminders About Course Policies","text":"<p>Please review the following policies related to programming exercises</p> <ul> <li>Asking questions and getting help</li> <li>Use of AI tools</li> <li>Discussion and plagiarism</li> <li>Late/miss submission policy</li> </ul> <p>This guideline is expanded from Aaron Tan's CS1010 guideline.</p>"},{"location":"guides/github.html","title":"Linking Your PE Accounts to Your GitHub Accounts","text":""},{"location":"guides/github.html#prerequisites","title":"Prerequisites","text":"<ol> <li>You should already have your SoC Unix account, cluster access, and SoC VPN set up, and be able to <code>ssh</code> into one of the CS1010 PE nodes.  If you are not able to do this, please look at the guide on CS1010 programming environments</li> <li>You should feel comfortable running basic UNIX commands.  If you have not gone through the UNIX guide and get your hands dirty, please look at the guide and play with the various basic Unix commands.</li> <li>You should already have a GitHub account and can log into GitHub.com.</li> </ol>"},{"location":"guides/github.html#purpose","title":"Purpose","text":"<p>Your will be using <code>git</code> (indirectly) for retrieving skeleton code and submitting completed assignments.  We will set up your accounts on PE hosts below so that <code>git</code> will be associated with your GitHub account.  This is a one-time setup.  You don't have to do this for every assignment.</p>"},{"location":"guides/github.html#1-setting-up-gitconfig","title":"1. Setting up <code>.gitconfig</code>","text":"<p>Create and edit a file called <code>.gitconfig</code> in your home directory on the PE host, with the following content:</p> <pre><code>[user]\n  name = Your Name\n  email = Your Email\n[github]  \n  user = Your GitHub ID\n</code></pre> <p>Your email should be whatever you used to sign up on GitHub (which may not be your SoC or NUS email).</p> <p>For example, a sample <code>.gitconfig</code> looks like this:</p> <pre><code>[user]\n  name = Elsa\n  email = queen@arendelle.gov\n[github]  \n  user = elsasnow16\n</code></pre> <p>After saving this file, run:</p> <pre><code>git config --get github.user\n</code></pre> <p>It should return your GitHub username.</p> <p>It should print your GitHub username as already set.  If there is a typo, you need to edit <code>.gitconfig</code> again and reload it by repeating the command above.</p>"},{"location":"guides/github.html#2-setting-up-password-less-login","title":"2. Setting up Password-less Login","text":""},{"location":"guides/github.html#basic-of-ssh-keys","title":"Basic of SSH Keys","text":"<p>SSH uses public-key cryptography for authentication.  The keys come in pairs: a public key and a private key.  The private key must be kept safe and known only to you.  You should keep the private key in your PE account, and not share it with others.</p> <p>To authenticate yourself to another host or service, you configure the host/service with your public key.  When it is time for you to log in, your private key is \"matched\"<sup>1</sup> with your public key.  Since only you know your private key, the service or the host can be sure that you are you and not someone else.</p> <p>Suppose you want to log in from host X to host Y without a password.  You generate a pair of keys on X, then keep the private keys on X and store the public keys on Y.  If you want to set up SSH Keys so that you can log into CS1010 PE nodes from your computer without a password, for example, you generate the pair of keys on your computer (X) and then copy the public key to CS1010 PE nodes.</p> <p>Our goal now is to authenticate ourselves to GitHub from the CS1010 PE nodes.  So, X is the PE nodes, and Y is GitHub.</p>"},{"location":"guides/github.html#generating-ssh-keys","title":"Generating SSH keys","text":"<p>The steps are explained in detail on GitHub Docs.  Here is a summary of the steps that you should follow for CS1010:</p> <p>On any of the PE nodes, run <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> where <code>your_email@example.com</code> is the email your associate with you, when you signed up for your GitHub account (i.e., the same one you entered in <code>.gitconfig</code>).</p> <p>The command will prompt you where to save the key.  Just press Enter to save into the default location, which is <code>$HOME/.ssh/id_ed25519</code>.</p> <p>You will then be prompted for a passphrase.  Since our goal is to automate assignment submission without needing to type anything, you should enter an empty passphrase.  This increases the security risk, but then, we are working with CS1010 assignments here, not a top-secret project.  So empty passphrase will do.</p> <p>You should see something like this: <pre><code>ooiwt@pe119:~$ ssh-keygen -t ed25519 -C \"ooiwt@comp.nus.edu.sg\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/o/ooiwt/.ssh/id_ed25519):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/o/ooiwt/.ssh/id_ed25519.\nYour public key has been saved in /home/o/ooiwt/.ssh/id_ed25519.pub.\nThe key fingerprint is:\nSHA256:Br3wg7mplVuPyuDz8yZVDSh8Mn5ls5+yPZhTvGzmAkk ooiwt@comp.nus.edu.sg\nThe key's randomart image is:\n+--[ED25519 256]--+\n|   .   .         |\n|    = o.=        |\n|   . =oo.=.      |\n|   .E=.=o...     |\n|  ..Bo=ooS. .    |\n| . =o+.++ o      |\n|  + +o = +       |\n|   oo = O        |\n|    .=oB..       |\n+----[SHA256]-----+\n</code></pre></p>"},{"location":"guides/github.html#adding-your-cs1010-public-key-to-your-github-account","title":"Adding Your CS1010 Public Key to Your GitHub Account","text":"<p>The next step involves logging into GitHub.com: click on your avatar in the top right corner, and choose \"Settings\".  Then choose \"SSH and GPG keys\" on the sidebar.</p> <p>Then, click either \"New SSH key\" or \"Add SSH key\".  Enter an appropriate title for the key (e.g., \"CS1010 PE Hosts\").</p> <p>Next, you need to paste your public key into the text box.  Go back to your terminal and run </p> <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <p>Remember that <code>cat</code> just dumps the content of the file to the standard output.  Now, you need to copy the content of the file displayed on the terminal, which is your public key, and paste it into the text box in the browser.  Your key should start with <code>ssh-ed22519</code> and ends with your email address.  For instance, this is the exact text that I copy-pasted: <pre><code>ssh-ed25519 AAAZC3NzaC1lZDI1NTE8AAAAIDdmwMpRrhRB95u7CTahehtBEeOdhSxDQdlpCxBK3KCP ooiwt@comp.nus.edu.sg\n</code></pre></p> <p>I showed the above as an example, don't use my public key for your GitHub.  Otherwise, I will have access to your account :)</p> <p>After entering the title and key above, click the green \"Add SSH key\" button to add the key you entered.  If prompted, confirm your GitHub password.</p> <p>These steps are explained in detail on GitHub Docs.</p>"},{"location":"guides/github.html#3-checking-your-authentication-settings","title":"3. Checking Your Authentication Settings","text":"<p>To check if you can connect to <code>git@github.com</code> using SSH keys, run: <pre><code>ssh -T git@github.com\n</code></pre></p> <p>If everything is set up correctly, you will see the message <pre><code>Hi ooiwt! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre></p> <p>Otherwise, you should see <pre><code>git@github.com: Permission denied (publickey).\n</code></pre></p> <p>or other error messages.</p> <p>Note that you need to connect with the username <code>git</code>.  Do not use your GitHub username (e.g., do not use <code>ssh -T ooiwt@github.com</code>)</p> <ol> <li> <p>I skipped many cool details here.  This topic is part of CS2105 and CS2107.  Interested students can google up various articles and videos online about how public-key cryptography is used for authentication.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/library.html","title":"The CS1010 I/O Library","text":"<p>To help students get started with C programming without worrying too much about the details and pitfalls of using <code>printf</code> and <code>scanf</code>, we provide a simple-to-use library to read and write integers, floating point numbers, and strings.  </p> <p>The libraries are pre-installed in CS1010 programming environments, with <code>cs1010.h</code> located under <code>~cs1010/include</code> and <code>libcs1010.a</code> located under <code>~cs1010/lib</code>.  During practical exams, a copy will be provided under your exam home directory (under <code>~/include</code> and <code>~/lib</code>).</p>"},{"location":"guides/library.html#using-the-library","title":"Using the Library","text":""},{"location":"guides/library.html#header","title":"Header","text":"<p>To use the CS1010 I/O library, you should <code>#include</code> the file <code>cs1010.h</code>, like this:</p> <pre><code>#include \"cs1010.h\"\n</code></pre> <p>at the top of your C program.</p>"},{"location":"guides/library.html#linking","title":"Linking","text":"<p>The CS1010 I/O library is provided as the file <code>libcs1010.a</code>.  The <code>Makefile</code> provided by CS1010 is already configured to link to this library.  When you run <code>make</code> to compile your code, this library is linked by default.</p> <p>If you wish to manually compile your code, you need to link to the library, by supplying the argument <code>-lcs1010</code> to <code>clang</code>.  Usually, you also need to specify where you can find <code>cs1010.h</code> with the <code>-I</code> flag, and <code>libcs1010.a</code> with the <code>-L</code> flag.  For instance, in the CS1010 programming environment, you would need to compile using the command line: <pre><code>clang -I ~cs1010/include -L ~cs1010/lib hello.c -lcs1010\n</code></pre></p>"},{"location":"guides/library.html#reading-of-a-single-value","title":"Reading of a Single Value","text":"<p>The CS1010 library supports reading of a single numeric value of type <code>long</code>, <code>double</code>, and <code>size_t</code>, as well as reading of strings (both space-separated words and newline-separated lines) from the standard input. </p>"},{"location":"guides/library.html#long-cs1010_read_long","title":"<code>long cs1010_read_long()</code>","text":"<p>Returns a <code>long</code> value from the standard input.  An error message will be printed (to <code>stderr</code>) if the input sequence is not a valid <code>long</code> value -- in which case the value <code>LONG_MAX</code> will be returned.  Example: <pre><code>long year = cs1010_read_long();\n</code></pre></p>"},{"location":"guides/library.html#double-cs1010_read_double","title":"<code>double cs1010_read_double()</code>","text":"<p>Returns a <code>double</code> value from the standard input.  An error message will be printed (to <code>stderr</code>) if the input sequence is not a valid <code>double</code> value -- in which case the value <code>DBL_MAX</code> will be returned. Example: <pre><code>double cap = cs1010_read_double();\n</code></pre></p>"},{"location":"guides/library.html#size_t-cs1010_read_size_t","title":"<code>size_t cs1010_read_size_t()</code>","text":"<p>Returns a <code>size_t</code> value from the standard input.  An error message will be printed (to <code>stderr</code>) if the input sequence is not a valid <code>size_t</code> value -- in which case the value <code>0</code> will be returned.  Example: <pre><code>size_t size = cs1010_read_size_t();\n</code></pre></p>"},{"location":"guides/library.html#char-cs1010_read_word","title":"<code>char* cs1010_read_word()</code>","text":"<p>Returns a <code>char *</code> pointing to the next white-space-separated string from the standard input.  A white-space character is defined based on the standard C function <code>isspace()</code> and includes the space <code></code>, tab <code>\\t</code>, and newline <code>\\n</code> character.  Returns <code>NULL</code> if there is an error.  If the returned value is non-<code>NULL</code>, the caller is responsible for freeing the memory allocated by calling <code>free</code>.</p> Usage example of cs1010_read_word()<pre><code>char* word = cs1010_read_word();\nif (word == NULL) {\n  // Deal with error\n} else {\n  // Do something with word\n  :\n  :\n  free(word);\n}\n</code></pre> <p>Suppose the input is: <pre><code>hello world\n1234567\n</code></pre></p> <p>Calling <code>cs1010_read_word()</code> would return the string <code>\"hello\"</code>.</p>"},{"location":"guides/library.html#char-cs1010_read_line","title":"<code>char* cs1010_read_line()</code>","text":"<p>Returns a <code>char *</code> pointing to the next new-line-separated string from the standard input.  The string returns from <code>cs1010_read_line()</code> includes the newline character (if one is found). Returns <code>NULL</code> if there is an error.  If the returned value is non-<code>NULL</code>, the caller is responsible for freeing the memory allocated by calling <code>free</code>.</p> Usage example of cs1010_read_line()<pre><code>char* line = cs1010_read_line();\nif (line == NULL) {\n  // Deal with error\n} else {\n  // Done something with line\n  :\n  :\n  free(line);\n}\n</code></pre> <p>Suppose the input is: <pre><code>hello world\n1234567\n</code></pre></p> <p>Calling <code>cs1010_read_line()</code> would return the string <code>\"hello world\\n\"</code>.</p>"},{"location":"guides/library.html#reading-of-multiple-values","title":"Reading of Multiple Values","text":"<p>The CS1010 library also supports the reading of multiple values and returning the values in an array.</p>"},{"location":"guides/library.html#long-cs1010_read_long_arraysize_t-k","title":"<code>long* cs1010_read_long_array(size_t k)</code>","text":"<p>Returns <code>k</code> numbers of <code>long</code> values read from the standard input stored in an array.  An error message will be printed (to <code>stderr</code>) for each input that is not a valid <code>long</code> value -- in which case the value <code>LONG_MAX</code> will be populated in the corresponding array element.  Returns <code>NULL</code> if there is a memory allocation error.  If the returned value is non-<code>NULL</code>, the caller is responsible for freeing the memory allocated by calling <code>free</code>. <pre><code>size_t k = cs1010_read_size_t();\nlong* values = cs1010_read_long_array(k);\nif (values != NULL) {\n  // Do something with array values\n   :\n   :\n  free(values);\n}\n</code></pre></p>"},{"location":"guides/library.html#double-cs1010_read_double_arraysize_t-k","title":"<code>double* cs1010_read_double_array(size_t k)</code>","text":"<p>Returns <code>k</code> numbers of <code>double</code> values read from the standard input stored in an array.  An error message will be printed (to <code>stderr</code>) for each input that is not a valid <code>double</code> value -- in which case the value <code>DBL_MAX</code> will be populated in the corresponding array element. Returns <code>NULL</code> if there is a memory allocation error.  If the returned value is non-<code>NULL</code>, the caller is responsible for freeing the memory allocated by calling <code>free</code>. <pre><code>size_t k = cs1010_read_size_t();\ndouble* values = cs1010_read_double_array(k);\nif (values != NULL) {\n  // Do something with array values\n   :\n   :\n  free(values);\n}\n</code></pre></p>"},{"location":"guides/library.html#char-cs1010_read_word_arraysize_t-k","title":"<code>char** cs1010_read_word_array(size_t k)</code>","text":"<p>Returns <code>k</code> white-space-separated words read from the standard input stored in an array.  The notion of \"word\" is the same as <code>cs1010_read_word()</code>. Returns <code>NULL</code> if there is a memory allocation error.  If the returned value is non-<code>NULL</code>, the caller is responsible for freeing the memory allocated for each word and the whole array by calling <code>free</code>.</p> Usage example for cs1010_read_word_array<pre><code>size_t k = cs1010_read_size_t();\nchar** words = cs1010_read_word_array(k);\nif (words == NULL) {\n  // Deal with error\n} else {\n  // Do something with the array words\n   :\n   :\n  for (size_t i = 0; i &lt; k; i += 1) {\n    free(words[i]);\n  }\n  free(words);\n}\n</code></pre> <p>Suppose the input is: <pre><code>hello world\n1234567\n</code></pre></p> <p>Calling <code>cs1010_read_word_array(2)</code> would return the array <code>{\"hello\", \"world\"}</code>.</p>"},{"location":"guides/library.html#char-cs1010_read_line_arraysize_t-k","title":"<code>char** cs1010_read_line_array(size_t k)</code>","text":"<p>Returns <code>k</code> new-line-separated words read from the standard input stored in an array.  The notion of a line is the same as <code>cs1010_read_line()</code>. Returns <code>NULL</code> if there is a memory allocation error.  If the returned value is non-<code>NULL</code>, the caller is responsible for freeing the memory allocated for each line and the whole array by calling <code>free</code>.</p> Usage example for cs1010_read_line_array<pre><code>size_t k = cs1010_read_size_t();\nchar** lines = cs1010_read_line_array(k);\nif (lines == NULL) {\n  // Deal with error\n} else {\n  // Do something with the array lines\n    :\n    :\n  for (size_t i = 0; i &lt; k; i += 1) {\n    free(lines[i]);\n  }\n  free(lines);\n}\n</code></pre> <p>Suppose the input is: <pre><code>hello world\n1234567\n</code></pre></p> <p>Calling <code>cs1010_read_line_array(2)</code> would return the array <code>{\"hello world\\n\", \"1234567\\n\"}</code>.</p>"},{"location":"guides/library.html#printing-of-a-single-value","title":"Printing of a Single Value","text":"<p>The CS1010 library provides a few convenient functions to format and print <code>long</code> and <code>double</code> values to the standard output.</p>"},{"location":"guides/library.html#void-cs1010_print_longlong-value-and-void-cs1010_println_longlong-value","title":"<code>void cs1010_print_long(long value)</code> and <code>void cs1010_println_long(long value)</code>","text":"<p>Print <code>value</code> to the standard output (with <code>printf</code> format <code>%ld</code>). The <code>cs1010_println_long</code> version prints a newline after the value. <pre><code>  long x;\n    :\n  cs1010_print_long(x);\n</code></pre></p>"},{"location":"guides/library.html#void-cs1010_print_doubledouble-value-and-void-cs1010_println_doubledouble-value","title":"<code>void cs1010_print_double(double value)</code> and <code>void cs1010_println_double(double value)</code>","text":"<p>Print <code>value</code> to the standard output (with <code>printf</code> format <code>%.4f</code>). The <code>cs1010_println_double</code> version prints a newline after the value. <pre><code>  double x;\n    :\n  cs1010_println_double(x);\n</code></pre></p>"},{"location":"guides/library.html#void-cs1010_print_size_tsize_t-value-and-void-cs1010_println_size_tsize_t-value","title":"<code>void cs1010_print_size_t(size_t value)</code> and <code>void cs1010_println_size_t(size_t value)</code>","text":"<p>Print <code>value</code> to the standard output (with <code>printf</code> format <code>%zu</code>). The <code>cs1010_println_size_t</code> version prints a newline after the value. <pre><code>  size_t x;\n    :\n  cs1010_println_size_t(x);\n</code></pre></p>"},{"location":"guides/library.html#void-cs1010_print_stringchar-str-and-void-cs1010_println_stringchar-str","title":"<code>void cs1010_print_string(char *str)</code> and <code>void cs1010_println_string(char *str)</code>","text":"<p>Print a given string <code>str</code> to the standard output.  These functions are provided for completeness and is a simple wrapper around <code>printf(str)</code> and <code>printf(\"%s\\n\", str)</code> repsectively. <pre><code>  cs1010_println_string(\"hello world!\");\n</code></pre></p> <p>Printing single character</p> <p>There is no <code>cs1010_print_char</code> method.  You can use <code>putchar</code> from the C standard library for this purpose.</p>"},{"location":"guides/library.html#void-cs1010_print_pointervoid-ptr-and-void-cs1010_println_pointervoid-ptr","title":"<code>void cs1010_print_pointer(void *ptr)</code> and <code>void cs1010_println_pointer(void *ptr)</code>","text":"<p>Print a given pointer <code>ptr</code> to the standard output in decimal format. <pre><code>  long *x;\n  cs1010_println_pointer(&amp;x);\n</code></pre></p>"},{"location":"guides/library.html#void-cs1010_print_boolbool-x-and-void-cs1010_println_boolbool-x","title":"<code>void cs1010_print_bool(bool x)</code> and <code>void cs1010_println_bool(bool x)</code>","text":"<p>Print a given boolean value <code>x</code> to the standard output as either <code>true</code> or <code>false</code>. <pre><code>  bool x = true;\n  cs1010_println_bool(x);\n</code></pre></p>"},{"location":"guides/library.html#clearing-screen","title":"Clearing screen","text":"<p>The CS1010 library provides a function to clear your screen.  <pre><code>  cs1010_clear_screen();\n</code></pre></p>"},{"location":"guides/library.html#optional-installing-the-library","title":"Optional: Installing the Library","text":"<p>If you want to install the libraries on your computer for purposes other than CS1010, you can do the following:</p> <ol> <li>To get an updated copy of the library, clone it from its git repo on GitHub with the command:</li> </ol> <pre><code>git clone https://github.com/nus-cs1010/libcs1010.git\n</code></pre> <p>It is recommended you do this in your home directory.</p> <p>You should see an output similar to: <pre><code>Cloning into 'libcs1010'...\nremote: Counting objects: 6, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 6 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (6/6), done.\n</code></pre></p> <p>After that, you should see a subdirectory <code>libcs1010</code> created in your current directory.  Inside, there should be a file called <code>Makefile</code>, and two subdirectories called <code>include</code> and <code>src</code>.  </p> <ol> <li>To compile the library, run</li> </ol> <pre><code>make\n</code></pre> <p>This should compile the file <code>src/cs1010.c</code> and create a static C library named <code>libcs1010.a</code> under the <code>lib</code> directory.</p>"},{"location":"guides/messages.html","title":"Common <code>clang</code> Errors and Warnings","text":"<p>Here is the list of common <code>clang</code> errors and warnings that you may encounter.  We will expand this list over the semester.</p>"},{"location":"guides/messages.html#how-to-read-the-messages","title":"How to Read the Messages","text":"<p><code>clang</code> messages always start with the name of the file, the line number, and the character position. For instance,</p> <pre><code>error.c:3:5: error: use of undeclared identifier 'x'\n</code></pre> <p>shows the error in the file <code>error.c</code>, line 3, position 5.  </p> <p>In <code>vim</code>, you can use <code>:&lt;line number&gt;</code> to jump directly to the line containing this error.</p>"},{"location":"guides/messages.html#variables","title":"Variables","text":""},{"location":"guides/messages.html#error-use-of-undeclared-identifier","title":"Error: Use of undeclared identifier","text":"<p>C is a static type language, and thus every variable used must be declared with its type. E.g.,</p> <pre><code>int main()\n{\n    x = 0;\n}\n</code></pre> <p>would lead to the error <pre><code>x.c:3:5: error: use of undeclared identifier 'x'\n    x = 0;\n    ^\n</code></pre></p> <p>In the example above, <code>x</code> is used by not declared.  To fix, declare <code>x</code> with its type. E.g., <pre><code>int main()\n{\n    long x = 0;\n}\n</code></pre></p>"},{"location":"guides/messages.html#error-redefinition-of-a-variable","title":"Error: Redefinition of a variable","text":"<p>Each variable should be declared exactly once within its scope (scoped by <code>{</code> and <code>}</code>).</p> <p>E.g.,</p> <pre><code>int main()\n{\n    long x = 0;\n    long x = 1;\n}\n</code></pre> <p>Would give the error <pre><code>x.c:4:10: error: redefinition of 'x'\n    long x = 1;\n         ^\nx.c:3:10: note: previous definition is here\n    long x = 0;\n         ^\n</code></pre></p> <p>To fix, check whether you intend the second declaration to be the same variable (in which case, remove the declaration) or a new one (in which case, give it a different name).</p>"},{"location":"guides/messages.html#warning-unused-variable","title":"Warning: Unused Variable","text":"<p>Declaring variables that are not used clutters the code.  It is a good programming practice to only declare the variables that you need.  CS1010 insists on this.  If you declare variables that you end up not using, you will be penalized.</p> <p><pre><code>int main()\n{\n    long x = 1;\n}\n</code></pre> Would result in <pre><code>x.c:4:10: warning: unused variable 'x' [-Wunused-variable]\n    long x = 1;\n         ^\n</code></pre></p> <p>To fix, go through all such warnings and remove any variables that you declared/initialized but never used.</p>"},{"location":"guides/messages.html#warning-variable-may-be-uninitialized","title":"Warning: Variable May Be Uninitialized","text":"<p>A variable is uninitialized if it is declared but not assigned any value.  This might lead to bugs in your code.</p> <p><pre><code>int main()\n{\n    long y;\n    return y;\n}\n</code></pre> Would result in <pre><code>x.c:4:10: warning: variable 'y' is uninitialized when used here [-Wuninitialized]\n  return y;\n         ^\nx.c:3:9: note: initialize the variable 'y' to silence this warning\n  long y;\n        ^\n         = 0\n</code></pre></p> <p>To fix, initialize the variable to the appropriate value.</p>"},{"location":"guides/messages.html#warning-declarations-shadows-a-local-variable","title":"Warning: Declarations shadows a local variable.","text":"<p>Avoid naming a variable the same name as another variable in the outer scope. Doing so makes your code confusing to read. E.g.,</p> <p><pre><code>int main() {\n  long x = 0;\n  if (x &lt; 0) {\n    long x = 1;\n  }\n}\n</code></pre> causes the following warning: <pre><code>x.c:4:10: warning: declaration shadows a local variable [-Wshadow]\n    long x = 1;\n         ^\nx.c:2:8: note: previous declaration is here\n  long x = 0;\n       ^\n</code></pre></p>"},{"location":"guides/messages.html#warning-no-previous-extern-declaration-for-non-static-variable","title":"Warning: No previous extern declaration for non-static variable","text":"<p>A global variable is detected.  The use of global variables is bug-prone and should be avoided. For instance,</p> <p><pre><code>int x;\nint main() {\n  x = 1;\n}\n</code></pre> would lead to <pre><code>x.c:1:6: warning: no previous extern declaration for non-static variable 'x'\n      [-Wmissing-variable-declarations]\nlong x;\n     ^\nx.c:1:1: note: declare 'static' if the variable is not intended to be used outside of this translation\n      unit\nlong x;\n^\n</code></pre></p> <p>To fix, make the variable local and pass it around from function to function.</p>"},{"location":"guides/messages.html#functions","title":"Functions","text":""},{"location":"guides/messages.html#warning-type-specifier-missing","title":"Warning: Type specifier missing","text":"<p>Functions must have a return type declared.  C, by default, treats all functions as returning <code>int</code> if the return type is not declared.  It is, however, a good programming practice to always declare the return type explicitly, even if it is returning <code>int</code>.  CS1010 insists on this, and you will be penalized if you do not declare the return type.</p> <p>E.g.,</p> <p><pre><code>main() \n{\n}\n</code></pre> would give the warning <pre><code>x.c:1:1: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]\nmain()\n^\n</code></pre></p>"},{"location":"guides/messages.html#warning-implicit-declaration-of-function","title":"Warning: Implicit declaration of function","text":"<p>All functions in C must be declared before they are used.  If the function is defined elsewhere, the header file containing the function declaration should be included.  Without the function declaration, the compiler will guess the type of the arguments and their return type.  An incorrect guess would lead to buggy code and thus should be avoided. E.g.,</p> <p><pre><code>main() \n{\n    sqrt(4);\n}\n</code></pre> would give the warning <pre><code>x.c:3:4: warning: implicitly declaring library function 'sqrt' with type 'double (double)'\n      [-Wimplicit-function-declaration]\n   sqrt(4);\n   ^\n</code></pre></p> <p>To fix, include the appropriate header file.</p>"},{"location":"guides/messages.html#error-undefined-reference-to-a-function","title":"Error: Undefined reference to a function","text":"<p>This error is usually accompanied by an \"implicit declaration of function\" warning.  During linking, <code>clang</code> tries to locate the definition of a function.  Calling a function that is not defined would lead to the error above. E.g.,</p> <p><pre><code>int main() {\n    foo();\n}\n</code></pre> would give the error: <pre><code>/tmp/x-edd854.o: In function `main':\nx.c:(.text+0xb): undefined reference to `foo'\nclang: error: linker command failed with exit code 1 (use -v to see invocation)u\n</code></pre></p>"},{"location":"guides/messages.html#error-too-manyfew-arguments-to-a-function-call","title":"Error: Too many/few arguments to a function call","text":"<p>Each function should be called with exactly the number of arguments defined.</p> <p>E.g., <pre><code>#include &lt;math.h&gt;\nint main() \n{\n    sqrt();\n}\n</code></pre> would lead to: <pre><code>x.c:4:10: error: too few arguments to function call, single argument '__x' was not specified\n    sqrt();\n    ~~~~ ^\n</code></pre></p> <p>To fix, check the documentation or the <code>man</code> page of the function you are calling to understand the number of arguments needed.</p>"},{"location":"guides/messages.html#warning-control-reaches-the-end-of-non-void-function","title":"Warning: Control reaches the end of non-void function","text":"<p>Every non-void function, except <code>main</code>, must return a value.  If you define a non-void function but did not include a <code>return</code> statement, the compiler would warn you.  Failing the return the intended value means the caller would not receive the correct value back, leading to a buggy code.</p> <p>E.g.,</p> <p><pre><code>int foo() \n{\n}\n</code></pre> would lead to the warning: <pre><code>x.c:3:1: warning: control reaches end of non-void function [-Wreturn-type]\n}\n</code></pre></p> <p>To fix this, double-check if the function needs to return anything.  If not, change the return type to <code>void</code>.  Otherwise, return the appropriate value.</p>"},{"location":"guides/messages.html#warning-parameter-is-not-declared-defaulting-to-type-int","title":"Warning: Parameter is not declared, defaulting to type <code>int</code>","text":"<p>The type of each parameter to a function must be declared explicitly.  Not doing so would lead to code that is cognitively harder to understand and bug-prone than necessary.</p> <p>For example,</p> <p><pre><code>int foo(x) {\n  return x;\n}\n</code></pre> would give <pre><code>x.c:1:9: warning: parameter 'x' was not declared, defaulting to type 'int' [-Wpedantic]\nint foo(x) {\n        ^\n</code></pre></p> <p>To fix, declare an appropriate type for each parameter.</p>"},{"location":"guides/messages.html#warning-unused-parameter","title":"Warning: Unused Parameter","text":"<p>Every parameter that you pass into a function must serve a purpose and so should be used.</p> <p>For instance,</p> <p><pre><code>int foo(long x) {\n    return 0;\n}\n</code></pre> leads to the warning: <pre><code>x.c:1:14: warning: unused parameter 'x' [-Wunused-parameter]\nint foo(long x) {\n             ^\n</code></pre> To fix, either remove the parameter <code>x</code> if you do not need it or check that you do not unintentionally leave <code>x</code> unused.</p>"},{"location":"guides/messages.html#logic","title":"Logic","text":""},{"location":"guides/messages.html#warning-expression-result-unused","title":"Warning: Expression result unused","text":"<p>The result of your expression should be used.  Otherwise, the computation is wasted. For instance:</p> <p><pre><code>int main() {\n  long x = 0;\n  x + 2;\n}\n</code></pre> causes the warning: <pre><code>x.c:3:5: warning: expression result unused [-Wunused-value]\n  x + 2;\n  ~ ^ ~\n</code></pre></p> <p>To fix, check if the expression is necessary.  If so, use it as intended. Otherwise, remove it.</p>"},{"location":"guides/messages.html#warning-codereturnbreak-will-never-be-executed","title":"Warning: Code/return/break will never be executed","text":"<p>The execution flow of your code is incorrect.  Part of the code will never be executed and is redundant.</p> <p><pre><code>int main() {\n  long x;\n  return 0;\n  x = 1;\n}\n</code></pre> causes the warning: <pre><code>x.c:4:7: warning: code will never be executed [-Wunreachable-code]\n  x = 1;\n      ^\n</code></pre></p> <p>To fix, check the logic of your code and remove redundant code.</p>"},{"location":"guides/messages.html#warning-comparing-floating-point-with-or-is-unsafe","title":"Warning: Comparing floating point with == or != is unsafe","text":"<p>Floating numbers should never be compared with <code>==</code> operator since the representation is not precise.</p> <p><pre><code>void foo(double x) {\n  if (x == 0.03) {\n  }\n}\n</code></pre> causes the warning <pre><code>x.c:2:9: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]\n  if (x == 0.03) {\n      ~ ^  ~~~~\n</code></pre></p> <p>To fix this, use <code>&gt;</code> and <code>&lt;</code> comparison with a small error.  For instance, <pre><code>if (x &gt; 0.003 - EPSILON &amp;&amp; x &lt; 0.003 + EPSILON) {\n}\n</code></pre> where EPSILON is a very small number.</p>"},{"location":"guides/style.html","title":"CS1010 C Style","text":"<p>In CS1010, you should following the following style guide when you write your code for your graded homework and practical exams.  We may deduct marks for coding style if your code egregiously violates the style.</p> <p>This guide is modified from past CS1010 style guide by Aaron Tan.</p>"},{"location":"guides/style.html#why-coding-style-is-important","title":"Why Coding Style is Important","text":"<p>Quote</p> <p>\"It is not merely a matter of aesthetics that programs should be written in a particular style. Rather there is a psychological basis for writing programs in a conventional manner: programmers have strong expectations that other programmers will follow these discourse rules. If the rules are violated, then the utility afforded by the expectations that programmers have built up over time is effectively nullified. The results from the experiments with novice and advanced student programmers and with professional programmers described in this paper provide clear support for these claims.\"</p> <p>Elliot Soloway and Kate Ehrlich. \"Empirical studies of programming knowledge.\" IEEE Transactions on Software Engineering 5 (1984): 595-609.</p>"},{"location":"guides/style.html#1-variable-declaration","title":"1. Variable Declaration","text":"<p>Each variable should be declared in its own line.</p> <pre><code>double weight;  // The weight of the baby\ndouble height;  // The height of the baby\n</code></pre> <p>Avoid</p> <pre><code>double weight, height;   // Weight and height of the baby\n</code></pre>"},{"location":"guides/style.html#2-give-variables-descriptive-names","title":"2. Give Variables Descriptive Names","text":"<p>This is the most important rule to follow.  The name of a type, variable, function, constant should inform us of its purpose clearly without the readers having to guess or look up its meaning.</p> <p>For example, <code>long number_of_coins;</code> is an appropriate variable but not <code>long c;</code>. Avoid using a single character for variable names.</p> <p>There are some exceptions, however, as shown below:</p> <ul> <li>If the variable is the problem size and it is given in the task statement. For example, a problem dealing with n values, hence the variable may be called <code>n</code> (preferably with a comment to explain).</li> <li>If the variable is a transient/temporary variable whose purpose is clear.</li> <li>If the variable is a loop variable whose purpose is clear.</li> </ul>"},{"location":"guides/style.html#3-shorten-variable-names-with-naming-conventions","title":"3. Shorten Variable Names with Naming Conventions","text":"<p>Despite the recommendation for descriptive names, identifiers can be short yet descriptive by using abbreviations and/or common naming conventions. For example, <code>MAX_LEN</code>, <code>num_of_elems</code>, <code>pcurr</code>, <code>table_num</code>.</p> <p>However, do not invent your own abbreviation. For instance, names like <code>nm_elemnts</code> should be avoided.</p>"},{"location":"guides/style.html#4-avoid-negated-variable-or-function-names","title":"4. Avoid Negated Variable or Function Names","text":"<p>Negated variables often result in hard-to-read double-negatives in an expression like <code>!is_not_err</code>.</p> <p>So, avoid <code>is_not_error</code>, <code>is_not_found</code>, <code>is_not_valid</code>, <code>cannot_open_file</code>.  Instead, we prefer <code>is_error</code>, <code>is_found</code>, <code>is_valid</code>, <code>can_open_file</code> etc.</p>"},{"location":"guides/style.html#5-use-define-to-define-constants-for-magic-numbers","title":"5. Use <code>#define</code> to Define Constants for Magic Numbers","text":"<p>Avoid direct use of magic numbers. Constant literals which have special meanings should be named and its named identifier should be used in its place. For example:</p> <p>Avoid: <pre><code>for (i = 0; i &lt; 100; i += 1) {\n    :\n}\n</code></pre></p> <p>Prefer: <pre><code>#define MAX_LEN 100\n :\nfor (i = 0; i &lt; MAX_LEN; i += 1) {\n    :\n}\n</code></pre></p>"},{"location":"guides/style.html#6-naming-conventions","title":"6. Naming Conventions","text":""},{"location":"guides/style.html#constants","title":"Constants","text":"<p>All constant identifiers must be written in all caps and separated by an underscore <code>_</code>.  For instance <code>MAX_ITERATIONS</code>, <code>MAX_LEN</code>, <code>GOLDEN_RATIO</code>, <code>COLOR_DEFAULT</code>, <code>PI</code>.</p>"},{"location":"guides/style.html#variables-and-functions","title":"Variables and Functions","text":"<p>Use lower case letters for variable names and function names, with multiple words separated by underscore <code>_</code>.  Example, <code>cs1010_read_long</code>, <code>is_prime</code>.  This convention is known as the snake case.</p>"},{"location":"guides/style.html#7-use-consistent-indentation-to-emphasize-block-structure","title":"7. Use Consistent Indentation to Emphasize Block Structure","text":"<p>The code should be properly and neatly indented to emphasize the nested logical structure of the program. An indentation of 2 or 4 spaces is recommended (8 is too wide).</p> <p>Every block that follows a <code>for</code>, <code>while</code>, <code>if-else</code>, <code>do-while</code> statement must be indented from its enclosing block.</p> <p>Comments within a block should follow the indentation level of its enclosing block. For example,</p> <pre><code>for (i = 0; i &lt; 3; i += 1) {   \n    // Comments should be indented too\n    while (j != i) {\n        // More indented comments\n        cs1010_println_string(\"Hello\");\n    }\n}\n</code></pre> <p>The following are the wrong ways to indent the comments.</p> <pre><code>for (i = 0; i &lt; 3; i += 1) {\n// This comment should be indented and aligned with the while statement.\n    while (j != i) {\n    // This comment should be aligned with the printf statement.\n        cs1010_println_string(\"Hello\");\n    }\n}\n</code></pre>"},{"location":"guides/style.html#8-dont-mix-tabs-and-spaces","title":"8. Don't Mix Tabs and Spaces","text":"<p>You must use only spaces in your code.  Do not use tabs.</p> <p>You can add the configuration <code>set expandtab</code> in <code>vim</code> to automatically expand any tab that you enter into spaces.</p>"},{"location":"guides/style.html#9-spaces-in-if-else-for-while-do-while-statements","title":"9. Spaces in <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>do</code>-<code>while</code> Statements","text":"<p>Add a single space between the keywords <code>if</code>,<code>else</code>, <code>for</code>, <code>while</code> and the following parentheses and between the parentheses and next curly bracket.  For instance:</p> <pre><code>for( ... ) { // not good\nfor( ... ){ // not good\nfor ( ... ) { // good\n</code></pre>"},{"location":"guides/style.html#10-spaces-in-assignments","title":"10. Spaces in Assignments","text":"<p>Add a single space before and after <code>=</code>.</p> <pre><code>a=b; // no\na= b; // no\na =b; // no\na = b; // OK!\n</code></pre>"},{"location":"guides/style.html#11-positions-of-open-and-close-braces","title":"11. Positions of Open and Close Braces","text":"<p>There are two camps on the position of open braces. The following shows the \"trailing open braces\":</p> <pre><code>for (i = 0; i &lt; 3; i += 1) {\n    while (j != i) {\n        printf(\"Hello\\n\");\n    }\n}\n</code></pre> <p>The following shows the \"leading open braces\". The leading open brace must be aligned with the block of the construct it is in:</p> <pre><code>for (i = 0; i &lt; 3; i += 1) \n{\n    while (j != i) \n    {\n        printf(\"Hello\\n\");\n    }\n}\n</code></pre> <p>Both styles are acceptable, but you should be consistent and should not mix both styles in a single program.</p> <p>For close braces, they should be leading close braces aligned with the block of the construct. Close braces should NOT be trailing as that would make it hard to spot them.</p>"},{"location":"guides/style.html#12-avoid-else-after-return","title":"12. Avoid Else After Return","text":"<p>Adding an <code>else</code> after a <code>return</code> statement in the <code>if</code> block is unnecessary and increases the indentation level.  If the last statement of the <code>if</code> block is a <code>return</code> statement, we should skip the <code>else</code> statement. </p> <pre><code>if (x == 1) {\n    return 10;\n} else {\n    if (y == 2) {\n        return 13;\n    } else {\n        return 89;\n    }\n} \n</code></pre> <p>can be written as the following equivalent code: <pre><code>if (x == 1) {\n    return 10;\n} \nif (y == 2) {\n    return 13;\n} \nreturn 89;\n</code></pre></p>"},{"location":"guides/style.html#13-comment-major-code-segments-adequately","title":"13. Comment Major Code Segments Adequately","text":"<p>Major segments of code should have explanatory comments. A major segment may be a loop block or a function block.</p> <p>You should comment on complicated logic, expressions, or algorithms, explaining what you are doing in the code, including why and how.</p> <p>An \"if\" block with a complex condition or an expression that is hard to understand should have explanatory comments.  For example,</p> <pre><code>// Check and reject out-of-bounds indices\nif (k &lt; 0 || k &gt;= MAX_LEN) {\n    return -1;\n}\n</code></pre>"},{"location":"guides/style.html#14-avoid-superfluous-comments","title":"14. Avoid Superfluous Comments","text":"<p>A comment such as:</p> <pre><code>i += 1; // add one to i\n</code></pre> <p>serves no purpose, adds clutter to a program and does more harm than good.</p>"},{"location":"guides/style.html#15-blank-lines","title":"15. Blank Lines","text":"<p>It is good to add a blank line between two functions, or two long segments of code for readability.</p> <pre><code>// This function ...\nint f(int x) {\n    // body\n}\n\n// This function ...\nint g(double y) {\n    // body\n}\n</code></pre> <pre><code>// Statements 1 to 10 belong to a sub-task\nstatement1;\nstatement2;\n   :\nstatement10;\n\n// Leave a blank line for readability\nstatement11;\nstatement12;\n   :\n</code></pre> <p>However, guard against the use of excessive blank lines. Double blank lines and triply blank lines, or more, should not be present.</p>"},{"location":"guides/style.html#16-long-lines","title":"16. Long Lines","text":"<p>If a line (be it a statement or a comment) is too long (more than 80 characters), do not let it run through the screen and wrap around. Instead, split it into a few lines.</p> <p><pre><code>if ((has_cs2010 || has_cs2020 || has_cs2040 || has_cs2040C) &amp;&amp; (has_st1232 || has_st2131 || has_st2132 || has_st2334) &amp;&amp; (has_ma1102R || has_ma1505 || (has_ma1511 &amp;&amp; has_ma1512) || has_ma1521) &amp;&amp; (has_ma1101R || has_ma1311 || has_ma1506 || has_ma1508E)) \n</code></pre> is bad.</p> <p><pre><code>if ((has_cs2010 || has_cs2020 || has_cs2040 || has_cs2040c) &amp;&amp; \n   (has_st1232 || has_st2131 ||  has_st2132 || has_st2334) &amp;&amp; \n   (has_ma1102r || has_ma1505 || (has_ma1511 &amp;&amp; has_ma1512) || has_ma1521) &amp;&amp;    \n   (has_ma1101r || has_ma1311 || has_ma1506 || has_ma1508e)) \n</code></pre> is better.</p>"},{"location":"guides/tmate.html","title":"<code>tmate</code>","text":"<p><code>tmate</code> is a tool that allows us to share our terminal with others.  It is an essential tool for peer learning during the lab sessions.</p> <p>To run <code>tmate</code>, type</p> <pre><code>$ tmate\n</code></pre> <p>on the command prompt on any of the PE nodes.</p> <p>This command clears the screen and displays a bar at the bottom with the word <code>[tmux]</code> as well as the following message:</p> <pre><code>Tip: if you wish to use tmate only for remote access, run: tmate -F                                                                                                                                                               [0/0]\nTo see the following messages again, run in a tmate session: tmate show-messages\nPress &lt;q&gt; or &lt;ctrl-c&gt; to continue\n---------------------------------------------------------------------\nConnecting to tmate.comp.nus.edu.sg...\nNote: clear your terminal before sharing readonly access\nssh session read only: ssh -p2200 ro-XmKETJTna9Rapc3hmqP2BLt9N@tmate.comp.nus.edu.sg\nssh session: ssh -p2200 eLdTHTzshFhduQMj7JJbfBt5x@tmate.comp.nus.edu.sg\n</code></pre> <p>Follow the instructions given.</p>"},{"location":"guides/tmate.html#sharing-your-terminal-with-someone","title":"Sharing Your Terminal With Someone","text":"<p>The most important lines in the message above are the last two lines.  </p> <ul> <li>If you want to show your terminal to someone else, but do not want to give them the control to type into your terminal, you can share the information about the read-only sessions on the second last line.   This is useful, for instance, if your tutor wants to share your screen with the class.</li> <li>If you want to let someone else type into your terminal, share the last line with them.  Doing so with your tutors might be helpful during the lab session for debugging or demonstration purposes.</li> </ul> <p>Keep your tmate sessions private</p> <p>Do not at any time, make these links public -- only share them with people you trust.</p>"},{"location":"guides/tmate.html#quitting-tmate","title":"Quitting <code>tmate</code>","text":"<p>To exit from <code>tmate</code>, you just need to hit Ctrl+D on your <code>tmate</code> command prompt.  This should bring you back to your usual command prompt (the bar labeling <code>[tmux]</code> should disappear).</p>"},{"location":"guides/unix-advanced.html","title":"Unix CLI: Advanced","text":"<p>This article is adapted from the notes of the Unix@Home Workshop  held in August 2020.  </p> <p>After reading this article, students should</p> <ul> <li>appreciate the philosophy of Unix where small utility programs can be composed together to perform a complex task using the pipe <code>|</code> operator</li> <li>be aware of basic Unix utilities: <code>echo</code>, <code>sort</code>, <code>uniq</code>, <code>grep</code>, <code>head</code>, and <code>tail</code>.</li> <li>be able to use basic pattern matching <code>*</code> <code>?</code> <code>[]</code> and <code>{}</code> in <code>bash</code></li> <li>know how to use Tab, Ctrl+P, and Ctrl+N to work more efficiently in <code>bash</code></li> <li>know how to save time and effort by automating long complex commands using <code>bash</code> scripts</li> </ul>"},{"location":"guides/unix-advanced.html#composing-programs-with","title":"Composing Programs with <code>|</code>","text":"<p>Another key innovation of Unix that led to its success is the invention of the <code>|</code> operator.  </p> <p>Before Unix, operating systems tend to provide complex, monolithic, programs.  The philosophy of Unix, however, is to provide many small, simple, utility programs, that can be composed to complete a more complex task.  These small programs each do one thing only (and do it well) and so are easier to write and less prone to bugs.</p> <p>The composition of these utility programs relies on two things.  First, plain text is often used as input and output of the programs.  These allow the programs to understand each other easily.  Second, they use <code>|</code> to communicate with each other.  The <code>|</code> operator takes the standard output from one program and redirects it as the standard input of another program.</p> <p>For instance, <pre><code>$ cat test.txt | wc\n       1      11      64\n</code></pre> compose <code>cat</code> and <code>wc</code> together.  Recall that <code>cat</code> reads the content of the file and prints it to standard output.  Here, we pipe the standard output from <code>cat</code> to <code>wc</code>.  So now, these printed texts are redirected as the standard input to <code>wc</code>.</p> <p>But this is just the same as <pre><code>$ wc &lt; test.txt\n</code></pre> that we have seen before.  What's the power in <code>|</code>?  </p> <p>Now, recall that we have made copies of <code>test.txt</code> earlier, into <code>foo.txt</code> and <code>bar.txt</code>.  If you have not done so or have removed them, you can quickly reproduce the files with: <pre><code>$ cp test.txt foo.txt\n$ cp test.txt bar.txt\n</code></pre></p> <p>Let's suppose now I want to count the total number of words for all three files.  Instead of calling <code>wc</code> on each file one by one, and sum them up myself.  I can just run:</p> <pre><code>$ cat test.txt foo.txt bar.txt | wc\n       3      33     192\n</code></pre> <p>Here, <code>cat</code> reads the three files, concatenates their content, and passes the output to <code>wc</code> for counting.</p>"},{"location":"guides/unix-advanced.html#useful-utilities","title":"Useful Utilities","text":"<p>Before we see more interesting examples of using <code>|</code>, let's move beyond <code>cat</code> and <code>wc</code>, and see what other simple tools are there in Unix.</p>"},{"location":"guides/unix-advanced.html#head-and-tail","title":"<code>head</code> and <code>tail</code>","text":"<p><code>head</code> and <code>tail</code> print out the first \\(k\\) lines and last \\(k\\) lines from a file (or standard input if the file name is not given).  By default, \\(k\\) is 10, but you can pass in an argument to specify \\(k\\).</p> <pre><code>$ cat test.txt foo.txt bar.txt\nThis is a test file for learning Unix file management commands.\nThis is a test file for learning Unix file management commands.\nThis is a test file for learning Unix file management commands.\n$ cat test.txt foo.txt bar.txt | tail -1\nThis is a test file for learning Unix file management commands.\n</code></pre>"},{"location":"guides/unix-advanced.html#echo","title":"<code>echo</code>","text":"<p><code>echo</code> simply prints out the command-line argument to the standard output.</p> <pre><code>$ echo \"hello world!\"\nhello world!\n</code></pre>"},{"location":"guides/unix-advanced.html#sort","title":"<code>sort</code>","text":"<p><code>sort</code> rearrange the input lines in alphabetical order. <pre><code>$ sort\njohn\njane\npeter\nmary^D\njane\njohn\nmary\npeter\n</code></pre></p> <p>In the example above, I entered <code>john</code>, <code>jane</code>, <code>peter</code>, <code>mary</code> followed by Ctrl+D to signify the end of input.  <code>sort</code> prints out <code>jane</code>, <code>john</code>, <code>mary</code>, <code>peter</code>, in that order.</p>"},{"location":"guides/unix-advanced.html#uniq","title":"<code>uniq</code>","text":"<p><code>uniq</code> remove any two consecutive lines that are the same.</p> <pre><code>$ uniq\n1\n2\n2\n2\n1\n1^D\n1\n2\n1\n</code></pre> <p>For instance, in the above, there are three consecutive lines of <code>2</code>, so only one remained.  There are also two consecutive lines of <code>1</code>, so only one remained.`</p>"},{"location":"guides/unix-advanced.html#grep","title":"<code>grep</code>","text":"<p><code>grep</code> returns the lines of text from the given file (or the standard input) that matches the given string.  For instance, run</p> <pre><code>$ grep abc\n</code></pre> <p>and start typing in some lines of text, some containing <code>abc</code>, some do not.  <code>grep</code> will spew out into the standard output all the lines that contain the text <code>abc</code> somewhere.  As usual, hit Ctrl+D when you are done.</p>"},{"location":"guides/unix-advanced.html#pipe-example","title":"Pipe Example","text":"<p>To give you an example of how useful <code>|</code> is, here is a real example.  When processing the registration of the workshop, I have quite a few registrations that are duplicates -- students registered more than once.  I need a quick way to count how many unique registrants are there. So I keep the student ID of all registrants in a file called <code>ID</code>.  For instance, the file <code>ID</code> contains (not real data, of course)</p> <pre><code>A1234567X,CS\nA1234559A,CEG\nA1239999J,CEG\nA1234580K,CEG\nA1233210O,CS\nA1234567X,CS\nA1234581Q,ISC\nA1233216T,ISC\nA1239999J,CEG\n</code></pre> <p>Now, to count how many unique registrants, I just need to run:</p> <pre><code>$ cat ID | sort | uniq | wc -l\n    7\n</code></pre> <p>To count how many uniq registrants are <code>CEG</code> students, I just change it to: <pre><code>$ cat ID | sort | uniq | grep CEG | wc -l\n    3\n</code></pre></p>"},{"location":"guides/unix-advanced.html#pattern-matching-in-bash","title":"Pattern Matching in <code>bash</code>","text":"<p>We now show you another productivity shortcut.  In an example earlier, you have seen how we passed in more than one file name into <code>cat</code>.  Recall that we can use Tab to auto-complete the file names, so we can hit fewer keys on the keyboards. Now, we show you there is an even faster way.</p> <p>Instead of <pre><code>$ cat test.txt foo.txt bar.txt | wc\n</code></pre></p> <p>We could just run <pre><code>$ cat *.txt | wc\n</code></pre></p> <p>The <code>*</code> is a special character in <code>bash</code> that represents 0 or more characters.  So, this command essentially says, <code>cat</code> any files that contain 0 or more characters, followed by <code>.txt</code>.</p> <p>The table below summarizes the useful patterns:</p> Pattern Matches <code>*</code> 0 or more characters <code>?</code> one character <code>[..]</code> one character, coming from the given set between <code>[</code> and <code>]</code>, <code>-</code> to indicate a range. <code>{.., ..}</code> Either one of the names, separated by <code>,</code>."},{"location":"guides/unix-advanced.html#example-1","title":"Example 1:","text":"<pre><code>$ ls ???.txt\nbar.txt foo.txt\n</code></pre> <p>Since we use three <code>?</code>, it matches any file name with three characters followed by <code>.txt</code>.</p>"},{"location":"guides/unix-advanced.html#example-2","title":"Example 2:","text":"<pre><code>$ ls [f-t]*t\nfoo.txt test.txt\n</code></pre> <p>The expression <code>[f-t]*t</code> matches all file names that start with the alphabet <code>f</code>, <code>g</code>, etc., until <code>t</code>, followed by zero or more characters, followed by <code>t</code>.</p>"},{"location":"guides/unix-advanced.html#example-3","title":"Example 3:","text":"<pre><code>$ ls *.txt\nbar.txt foo.txt test.txt\n$ ls {fo,ba}??txt   \nbar.txt foo.txt\n</code></pre> <p>The expression <code>{fo,ba}??txt</code> matches any file names the start with either <code>fo</code> or <code>ba</code>, followed by two characters, followed by <code>txt</code>.</p>"},{"location":"guides/unix-advanced.html#leveling-up-your-productivity-with-cli","title":"Leveling Up Your Productivity with CLI","text":""},{"location":"guides/unix-advanced.html#minimizing-hand-movements","title":"Minimizing Hand Movements","text":"<p>You have seen how you can manage files and navigate around the directory structure, all by interacting with the command-line interface.  No windows. No mouse.  Just you, the keyboard, and the terminal.  You do not even need to use any arrow keys or function keys.  </p> <p>Why is this a big deal?  Let's look at the image of the keyboard below:</p> <p></p> <p>We only need to use the keys colored in pink.  And since these keys are concentrated in a small region on the keyboard, for most of us, we can reach the keys if we just position our hands over the keyboard<sup>1</sup>, we only need to move our fingers to type.  </p> <p></p>"},{"location":"guides/unix-advanced.html#minimizing-typing","title":"Minimizing Typing","text":"<p>We can even minimize the movement of our fingers in several ways by typing less.  We have seen several ways where we have achieved these:</p> <ul> <li>Unix commands are named economically -- they are often only a few characters long.</li> <li>We can use Tab to auto-complete a command or a file name.</li> <li>We can use Ctrl+P or Ctrl+N to repeat a previous command.</li> </ul> <p>There are many more <code>bash</code> shortcuts for productivity, if you are keen, take a look at this cheat sheet.</p> <p>You have also seen that Unix has many small, simple, utilities that we can compose to solve a task.  But composing them requires much typing:</p> <pre><code>$ cat ID | sort | uniq | grep CEG | wc -l\n</code></pre> <p>If we need to run this over and over again or share this command with someone, we can simply put these commands in a file, and then run it by invoking its name.  Such a file containing commands for the shell is called a shell script.</p> <p>For example, let's create a file named <code>hello.sh</code> containing the line <code>echo hello!</code> by: <pre><code>$ cat &gt; hello.sh\necho hello!^D\n</code></pre></p> <p>The extension <code>.sh</code> is not necessary, but it is just something I use so that I can tell that this file contains a shell script.  In the example above, <code>cat</code> will wait for me to enter something on the keyboard.  So I entered <code>echo hello!</code> followed by Ctrl+D to indicate the end of the input.</p> <p>Now, to execute this file, we run: <pre><code>$ bash hello.sh\nhello!\n</code></pre> or <pre><code>$ bash &lt; hello.sh\nhello!\n</code></pre></p> <p>Recall that we said Unix shells do not necessarily interact with the users.  This is an example.  We pass the file <code>hello.sh</code> to a new instance of <code>bash</code>, asking it to interpret the lines inside this file as commands to execute.  </p> <p>Remember that we want to minimize typing.  What if we can just pass the filename directly to <code>bash</code> to execute?</p> <pre><code>$ ./hello.sh\nbash: ./hello.sh: Permission denied\n</code></pre> <p>Here, we specify the relative path of the script <code>hello.sh</code>, including the prefix <code>./</code> (for reasons that we will explain later).  But we should get an error telling us <code>Permission defined</code>.  Recall from the <code>File Permissions</code> section that a file needs to have the executable <code>x</code> permission to be executed.  So we need to add this permission for ourselves: <pre><code>$ chmod u+x hello.sh\n$ ./hello.sh\nhello!\n</code></pre></p> <ol> <li> <p>The recommended placement of hands over the keyboard is so that the thumbs are over the Space bar, the left fingers are over A S D F, and the right fingers are over J K L ;.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/unix-background.html","title":"Unix CLI: Background","text":"<p>This article is a replication of the notes from the Unix@Home Workshop held in August 2020.  </p> <p>After reading this article, students should </p> <ul> <li>understand the basic terms: CLI, terminal, shell, command prompt</li> <li>appreciate why CLI is more efficient</li> <li>aware of the commonly used terminal control sequences </li> </ul>"},{"location":"guides/unix-background.html#what-is-command-line-interfaces","title":"What is Command-Line Interfaces?","text":"<p>The command-line interface, or just CLI for short, is an important interface that we, as computing professionals, interact with the computer for most of our day-to-day tasks.</p> <p>In contrast to graphical user interfaces where users use a mouse to click/drag on menus and windows to interact with a computer, the command-line interface uses a keyboard and text.  The users would type a command to instruct the computer to do something, and the computer would respond by displaying the reply to the user.</p> <p>CLI evolves from teletypes machines where users would interact with the computer through a typewriter-like machine (see Figure 2.2. of this article for an example).  Users would type a command on the keyboard, and the typewriter would print out, line-by-line, the output on a piece of paper.  This is the era before monitors and mice.  Again, driven by constraints and necessity, CLI interfaces are designed to be simple and economical.  The commands are short and fast to type; the responses are succinct.</p> <p> Figure: A teletype device (Model 33 ASR) to interact with a computer. </p>"},{"location":"guides/unix-background.html#why-cli-over-gui","title":"Why CLI over GUI?","text":"<p>Since CLI is designed to be economical, CLI is much more efficient and productive to use, in particular when we are interacting with a remote computer over the network -- sending text back and forth is much more efficient than sending graphical elements over the network.  Each character takes up to two bytes, but each pixel alone takes up 3 bytes of data.</p> <p>Another reason why using CLI is faster and more productive is that user can keep their hands on the keyboard at all times and does not need to switch frequently between keyboard and mouse._  While research has shown that GUI and mouse are great for casual users, for software developers that need to type on the keyboard most of the time, having to switch between keyboard and mouse is a productivity-killer.</p> <p>Further, CLI commands typically provide a host of options that is accessible directly (in contrast to clicking through preference dialogues) from the command line, making these commands flexible and customizable.</p> <p>Finally, since these commands are just text, we can put together a sequence of commands easily as a script, to automate highly repetitive tasks.</p>"},{"location":"guides/unix-background.html#what-is-a-terminal","title":"What is a Terminal?","text":"<p>With the advances in Cathode-ray tube (CRT), the teletype machine is replaced with computer terminals in the late 1970s.  Instead of printing the output on paper, the output from CLI is now printed on a monitor supporting 24x80 characters on screen in black and white (or green).</p> <p> Figure: The VT100 Computer Terminal. </p> <p>In modern days, operating systems still use similar underlying functionalities to read in keyboard inputs and print the output as text to show to the users, but instead of these clunky special purpose devices, the functionality of a terminal is replaced by programs called terminal emulator or virtual terminal.  Examples include <code>Terminal</code> and <code>iTerm2</code> on macOS; <code>Windows Terminal</code> on Microsoft; <code>xterm</code> and <code>konsole</code> on Ubuntu, etc.  Many legacy control commands on these teletype machines remain in today's computing environment, such as the terminal control sequence.</p>"},{"location":"guides/unix-background.html#what-is-a-shell","title":"What is a Shell?","text":"<p>The term CLI refers to a type of user interface.  To realize this interface, Unix computing environments rely on another type of program called shell.  </p> <p>A shell usually works closely with a terminal to get inputs from the users, interpret the meaning of the inputs, execute the tasks (perhaps through the invocation of other programs), and returned the output to the user through the terminal.</p> <p>Note that a shell can run on its own without a terminal (it can read input from a file, and write the output to a file, for instance).</p> <p>There are many shells available, each with different bells and whistles to help improve our productivity.  </p> <p>The most popular shell that comes as default on many Unix systems is <code>bash</code> or Bourne Again Shell.  This is the shell that we will use in this workshop and as default in the SoC Unix computing environment.</p> <p>Other popular shells are <code>fish</code> and Oh-my-zsh (<code>zsh</code>).</p>"},{"location":"guides/unix-background.html#command-prompt","title":"Command Prompt","text":"<p>A shell has a command prompt. It typically looks something like this, but will be different depending on the default configuration on your machine: <pre><code>ooiwt@pe111:~$\n</code></pre></p> <p>The prompt is where you type in a command for the shell to interpret and execute.  </p> <p>In <code>bash</code>, the command prompt can be customized to include information such as the username, hostname, time, current working directory, etc.  It is customary to use the <code>$</code> sign as the final character of the prompt.  In our examples, we will just show <code>$</code> to indicate the command prompt.</p> <p>Depending on the habit, sometimes you are asked to type in a command \"into the terminal\", \"into the shell\", or \"into bash\".  They all mean the same thing: type in the command at the command prompt of the shell.</p>"},{"location":"guides/unix-background.html#terminal-control-sequence","title":"Terminal Control Sequence","text":"<p>On the old teletype machines, a user can send special commands to the teletype machines to control their operation.  Many of these special commands still exist today, and can be triggered by hitting a combination of Ctrl and another key (i.e., a control sequence). </p> <p>The following lists some of the most useful control sequences to know:</p> <p>Ctrl+D :   signal the end of input to a program.  This is also used to exit from a shell (by telling the shell that you have no more input to send, and you are done with it).</p> <p>Ctrl+Z :   suspend the current running program.  This pauses the execution of the program (but not terminates it).  In the <code>bash</code> shell, the most recently suspended program can resume executing in the background with the command <code>bg</code> or be brought back to execution in the foreground again with the command <code>fg</code>.   </p> <p>Ctrl+C :   terminate the current running program.</p> <p>Ctrl+S :   freeze the terminal.  This is a legacy control command that pauses the output printing of a teletype machine.  You shouldn't need to use this control sequence.</p> <p>Ctrl+Q :   resume the terminal.  This is a legacy control command that resumes the printing of a teletype machine.  You shouldn't need to use this control sequence unless you accidentally hit Ctrl+S</p> <p>Ctrl+Z vs. Ctrl+C</p> <p>A common mistake for new students is to hit Ctrl+Z frequently if something goes wrong with their program -- this behavior could lead to multiple suspended programs (which still occupy resources such as memory on the computer).  The right sequence to use is Ctrl+C -- which terminates the program (and frees up the resources).</p> <p>Ctrl+S accidents</p> <p>Since Ctrl+S is used as the \"save\" shortcut in non-Unix environment, many students accidentally hit this control sequence, causing their terminal to freeze.  Don't panic if this happens.  Just hit Ctrl+Q and things will be back to normal.</p>"},{"location":"guides/unix-background.html#references","title":"References","text":"<ul> <li>The Art of Unix Usability: Command Line Interfaces, by Eric Steven Raymond</li> </ul>"},{"location":"guides/unix-essentials.html","title":"Unix CLI: The Essentials","text":"<p>This article is adapted from the notes of the Unix@Home Workshop held in August 2020.  It contains the essential knowledge that a CS2030S students need to survive using the PE nodes to do the labs (and to use a Unix CLI in general).</p> <p>After following this article, students should be able to:</p> <ul> <li>navigate comfortably in a Unix file system using shell commands <code>cd</code>, <code>pwd</code>, and <code>ls</code></li> <li>use <code>.</code>, <code>..</code>, <code>~</code> or <code>/</code> to form a relative or absolute path name to a file</li> <li>organize files in a Unix file system using shell commands <code>mkdir</code>, <code>rmdir</code>, <code>mv</code>, <code>rm</code>, and <code>cp</code></li> <li>view the content of the file using <code>cat</code>, <code>more</code> or <code>less</code></li> <li>manage the permission of a file using <code>chmod</code></li> <li>perform standard input/output redirection with <code>&lt;</code> and <code>&gt;</code></li> </ul>"},{"location":"guides/unix-essentials.html#unix-directory","title":"Unix Directory","text":"<p>Unix organizes files according to a directory structure.  The following shows an example.</p> <p></p> <p>This structure is also known as a directory tree.</p> <p>There are two important directories that you need to know.</p>"},{"location":"guides/unix-essentials.html#root-directory","title":"Root Directory","text":"<p>The root directory is the directory at the top of the directory tree<sup>1</sup>. It is simply referred to as <code>/</code>, without any name.  Under the root directory are many other system directory, which a casual user does not normally need to (and have no permission to) modify.</p>"},{"location":"guides/unix-essentials.html#home-directory","title":"Home Directory","text":"<p>Each user has his/her own home directory.  The above figure shows where the home directory of the user <code>ooiwt</code> resides in the directory tree. The user <code>ooiwt</code> may create files or directories in his/her home directory, but not elsewhere unless permission is given.</p> <p>The home directory is referred to with the symbol <code>~</code> in <code>bash</code>.  Sometimes we add the username behind <code>~</code> to indicate the home directory of the other user. E.g., <code>~bob</code> means the home directory of a user named <code>bob</code>.</p>"},{"location":"guides/unix-essentials.html#current-working-directory","title":"Current Working Directory","text":"<p>A user can navigate around the directory tree.  The current working directory is the directory that the user is currently in.  In contrast to the root and home directory, which are fixed<sup>2</sup>, the current working directory changes as the user moves around.  Knowing the current working directory is important since this is the default location in the directory tree a command executes.  As such, many systems by default display the current working directory as part of the <code>bash</code> command prompt.</p> <p>The current working directory is referred to with the symbol <code>.</code> in <code>bash</code>.</p>"},{"location":"guides/unix-essentials.html#parent-directory","title":"Parent Directory","text":"<p>The parent directory is directory one layer up from the current directory.</p> <p>The parent directory is referred to with the symbol <code>..</code> in <code>bash</code>.</p> <p>To summarize, here are the short form representations:</p> Symbol Meaning <code>/</code> the root directory <code>~</code> the home directory <code>.</code> the current working directory <code>..</code> the parent directory"},{"location":"guides/unix-essentials.html#specifying-a-path","title":"Specifying a Path","text":"<p>To specify a directory or a file in the Unix directory tree, we can use either the absolute path or the relative path.</p>"},{"location":"guides/unix-essentials.html#absolute-path","title":"Absolute path","text":"<p>The absolute path is constructed as follows, starting from the root of the directory structure, find a path (a sequence of directories) to the location that you want to specify, then concatenate the names of the directories together, separated by the forward-slash <code>/</code>.  This is a similar notation used for Website URLs, so you should already be familiar with it.  For instance, the path <code>/home/o/ooiwt</code> is the absolute path of the directory named <code>ooiwt</code> in the figure above.</p> <p>An absolute path is independent of the current working directory and always start with <code>/</code> or <code>~</code></p>"},{"location":"guides/unix-essentials.html#relative-path","title":"Relative path","text":"<p>The relative path is dependent on the current working directory.  To refer to another location, start from the current directory, and find a path (a sequence of directories) to the location that you refer to.  When we go up a tree, we use <code>..</code> to represent the directory.</p> <p>For example, referring to the figure above, if we are in the directory <code>/home/b</code>, and we wish to refer to <code>/home/o/ooiwt</code>, we can use the relative path <code>../o/ooiwt</code>.  If we wish to refer to <code>/home/b/bob</code>, we can use the relative path <code>bob</code>.</p> <p>A relative path never starts with <code>/</code>.</p>"},{"location":"guides/unix-essentials.html#directory-related-commands","title":"Directory-related Commands","text":"<p>Now, let's take a look at some basic commands available in <code>bash</code> that deals with navigation and directories.</p>"},{"location":"guides/unix-essentials.html#pwd-print-current-working-directory","title":"<code>pwd</code>: Print Current Working directory","text":"<p><code>pwd</code> shows you which directory you are currently in.  Type <code>pwd</code> into the command prompt, and it will print the absolute path to your current working directory. For instance, Suppose you are in <code>/home/o/ooiwt</code>, entering <pre><code>pwd\n</code></pre> will give the output <pre><code>/home/o/ooiwt\n</code></pre></p>"},{"location":"guides/unix-essentials.html#ls-list-content-of-a-directory","title":"<code>ls</code>: LiSt content of a directory","text":"<p>The <code>ls</code> list the content in the current working directory.</p> <p>Rule of Silence</p> <p>Unix follows the economical rule of silence: programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if <code>ls</code> has nothing to list, it will list nothing (as opposed to, say, printing \"This is an empty directory.\")</p> <p>In Unix, a file or directory with a name that starts with <code>.</code> is hidden from <code>ls</code>.  Common hidden files are <code>.vimrc</code>, the configuration file for <code>vim</code>, and <code>.ssh</code>, the directory to store your SSH keys and configuration.  To view all the files, including hidden files, run <code>ls</code> with the <code>-a</code> flag (<code>a</code> stands for all).  </p>"},{"location":"guides/unix-essentials.html#mkdir-make-a-subdirectory","title":"<code>mkdir</code>: MaKe a subDIRectory","text":"<p>The <code>mkdir</code> command creates a subdirectory with the given name in the current directory.</p> <p>In the example below, we assume that we start with an empty directory.  </p> <pre><code>$ ls\n$ mkdir workshop\n$ ls\nworkshop\n$ ls -F\nworkshop/\n</code></pre> <p>Here, we create a directory called <code>workshop</code>.  Now, when we <code>ls</code>, you can see the directory listed.  </p> <p>You may also use <code>ls -F</code> for more information (<code>-F</code> is one of the many options/flags available for the <code>ls</code> command. To see a complete list of the options, refer to the man pages, i.e., <code>man ls</code>.)</p> <p>The slash <code>/</code> beside the filename tells you that the file is a directory.  A normal file does not have a slash beside its name when \"ls -F\" is used.</p> <p>You may also use the <code>ls -l</code> command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.</p> <p>Use Up Arrow for Command History</p> <p><code>bash</code> maintains a history of your previously executed commands, and you may use the Ctrl+P (previous) and Ctrl+N (next) to go through it. Press the Ctrl+P until you find a previously executed command. You may then press Enter to execute it or edit the command before executing it. This is handy when you need to repeatedly execute a long <code>bash</code> command.</p>"},{"location":"guides/unix-essentials.html#cd-change-directory","title":"<code>cd</code>: Change Directory","text":"<p>To navigate in the directory tree, changing the current working directory from one to another, we use the <code>cd</code> command.</p> <pre><code>$ pwd\n/home/o/ooiwt\n$ cd workshop\n$ pwd\n/home/o/ooiwt/workshop\n</code></pre> <p>Suppose our starting working directory is <code>/home/o/ooiwt</code>, after we <code>cd</code> into <code>workshop</code>, the current working directory becomes <code>/home/o/ooiwt/workshop</code>.  Note that <code>cd</code> can take in either an absolute path or a relative path.  The example above takes in a relative path as the argument.</p> <p>As mentioned in \"Unix CLI: Background\", it is common to include the current working directory into the shell's prompt.  So, you may see your command prompt updated to include the new working directory.</p> <p>Entering <code>cd</code> alone (without argument) brings you back to your home directory.  </p>"},{"location":"guides/unix-essentials.html#rmdir-remove-a-subdirectory","title":"<code>rmdir</code>: ReMove a subDIRectory","text":"<p><code>rmdir</code> removes a subDIRectory in the current directory -- note that a directory must be empty before it can be removed.</p> <p>The command <pre><code>$ rmdir workshop\n</code></pre> will remove the directory that you just created.</p>"},{"location":"guides/unix-essentials.html#file-management","title":"File Management","text":"<p>This note assumes that you are familiar with navigation with the Unix directory structure.</p> <p>We will now learn some commands to help us deal with files.</p> <p>Let's recreate the <code>workshop</code> directory in case you have already deleted it with the <code>rmdir</code> at the end of the last unit.</p> <pre><code>$ mkdir -p workshop\n$ cd workshop\n$ ls\n</code></pre> <p>All the above commands should complete successfully and silently.  Let's populate the directory with a new file.  Cut-and-paste the command below into the command prompt:</p> <pre><code>wget https://raw.githubusercontent.com/nus-unix-workshop/2021-s1/master/test.txt\n</code></pre> <p>You should see a file being downloaded and saved with an output similar to below: <pre><code>--2020-07-27 15:26:49--  https://raw.githubusercontent.com/nus-unix-workshop/2021-s1/master/test.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 64 [text/plain]\nSaving to: \u2018test.txt\u2019\n\ntest.txt              100%[======================&gt;]      64  --.-KB/s    in 0s\n\n2020-07-27 15:26:50 (2.35 MB/s) - \u2018test.txt\u2019 saved [64/64]\n</code></pre></p> <p>Now run <code>ls</code>, and you should see that <code>ls</code> returns <code>test.txt</code> as the content of the current working directory.</p> <pre><code>$ ls\ntest.txt\n</code></pre>"},{"location":"guides/unix-essentials.html#cp-copy-files","title":"<code>cp</code>: CoPy files","text":"<p>Now let's try to copy this file to another name. <pre><code>$ cp test.txt foo.txt\n$ ls\ntest.txt foo.txt\n</code></pre> The command above copies the file <code>test.txt</code> into <code>foo.txt</code>.</p> <p>If you want to copy the whole directory, use <code>-r</code> flag, where <code>r</code> stands for copying recursively.</p> <p>Now let's create another directory called <code>copy</code>. <pre><code>$ cd ..\n$ mkdir copy\n$ cd copy\n$ ls\n</code></pre></p> <p>Run <code>pwd</code> to double-check that you are in the directory called <code>copy</code> that is at the same level as <code>workshop</code>.</p> <p>Now, we are going to use <code>cp</code> with the <code>-r</code> flag, to copy recursively the whole of <code>workshop</code> directory over.</p> <pre><code>$ cp -r ../workshop .\n</code></pre> <p>The command <code>cp</code> takes in two arguments, the first is the source, and the second is the destination.</p> <p>Note that we use <code>.</code> above to indicate that we wish to copy the whole subtree of <code>workshop</code> over the current directory.  The command should complete without any message.  Upon completion, you can run <code>ls</code> to double-check that the workshop directory exists under <code>workshop</code>.</p> <p>!!! warning <code>cp</code> Overwrites     If there is an existing file with the same name, <code>cp</code> will overwrite     the existing file without warning.</p>"},{"location":"guides/unix-essentials.html#mv-move-or-rename-files","title":"<code>mv</code>: MoVe or rename files","text":"<p>Now, let's change directory back to <code>workshop</code>. <pre><code>$ cd ../workshop\n</code></pre> and use the <code>mv</code> command to rename <code>foo.txt</code> into <code>bar.txt</code>.</p> <pre><code>$ ls\nfoo.txt test.txt\n$ mv foo.txt bar.txt\n$ ls\nbar.txt test.txt\n</code></pre> <p>As you can see above, just like <code>cp</code>, <code>mv</code> takes in two arguments, the first is the source and the second is the destination.</p> <p>If the destination of <code>mv</code> is a directory, however, instead of renaming, the <code>mv</code> commands move the source to the destination directory.</p> <pre><code>$ ls\nbar.txt test.txt\n$ mv ../copy/workshop/foo.txt .\n$ ls\nbar.txt foo.txt test.txt\n</code></pre> <p>Here, you can see that we have moved <code>foo.txt</code> over to the current directory.</p> <p>!!! warning <code>mv</code> Overwrites     If there is an existing file with the same name, <code>mv</code> will overwrite     the existing file without warning. <code>mv</code> comes with a <code>-i</code> flag that interactively asks you if you are sure if you want to overwrite a file.  It is a good idea to always run <code>mv -i</code>. Hit Y to continue overwriting the existing file.  You can look up on the Internet on how to make <code>-i</code> the default using <code>alias</code> command in <code>.bashrc</code>.</p> <p>Use Tab for Name Completion</p> <p>If you have a very long file name, you may use the <code>bash</code> auto-completion feature to reduce typing. For instance, you may type: <pre><code>$ mv t\n</code></pre> and press the Tab key, <code>bash</code> will complete the filename for you if there is only one filename with the prefix \"t\". Otherwise, it will fill up the filename to the point where you need to type in more characters for disambiguation. The Tab key can also complete the name of a command.</p>"},{"location":"guides/unix-essentials.html#rm-remove-files","title":"<code>rm</code>: ReMove files","text":"<p>We can use <code>rm</code> to remove files.  Be careful with this command -- files deleted cannot be restored.  There is no trash or recycled bin like in Mac or Windows.</p> <pre><code>$ ls\nbar.txt foo.txt test.txt\n$ rm foo.txt\n$ ls\nbar.txt test.txt\n</code></pre> <p>rm -rf</p> <p>While the Unix command line provides lots of flexibility and power, with great power comes great responsibility.  Some commands are extremely dangerous.  <code>rm -rf *</code> is the most famous one.  The notation <code>*</code> refers to all files, and the flag <code>-f</code> means forceful deletion (no question asked!), and <code>-r</code> means remove recursively everything under the current directory tree.  Accidentally running this command has ruined many lives.  Read more here</p> <p><code>rm</code> comes with a <code>-i</code> flag that interactively asks you if you are sure if you want to delete a file.  It is a good idea to always run <code>rm -i</code>.</p> <pre><code>$ rm -i bar.txt\nrm: remove regular file 'bar.txt'?\n</code></pre> <p>Type <code>y</code> or <code>n</code> to answer yes or no respectively.</p>"},{"location":"guides/unix-essentials.html#cat-catenate-file-content-to-screen","title":"<code>cat</code>: CATenate file content to screen","text":"<p>To quickly take a look at the content of the file, use the <code>cat</code> command.</p> <pre><code>$ cat test.txt\nThis is a test file for learning Unix file management commands.\n</code></pre> <p><code>less</code> is a variant of <code>cat</code> that includes features to read each page leisurely and is useful for long files. <pre><code>$ less test.txt\n</code></pre></p> <p>In <code>less</code>, use <code>&lt;space&gt;</code> to move down one page, <code>b</code> to move Back up one page, and <code>q</code> to Quit.</p>"},{"location":"guides/unix-essentials.html#man-online-manual","title":"<code>man</code>: Online MANual","text":"<p>An online help facility is available in Unix via the <code>man</code> command (<code>man</code> stands for MANual). To look for more information about any Unix command, for example, <code>ls</code>, type <code>man ls</code>. Type <code>man man</code> and refer to Man Pages to find out more about the facility. To exit <code>man</code>, press <code>q</code>.</p>"},{"location":"guides/unix-essentials.html#file-permission-management","title":"File Permission Management","text":"<p>File permissions determine who can do what to a file.  Typically, you do not need to fiddle with the file permission, but when you need to, it is usually for an important reason, and it is critical to do it right.</p>"},{"location":"guides/unix-essentials.html#the-what-of-file-permissions","title":"The What of File Permissions","text":"<p>Let's look at what you can do to a file first.  Unix file permissions allow control of three actions: <code>r</code> (read), <code>w</code> (write) and <code>x</code> (execute).  These permission settings allow the following different actions to be done for regular files and directories.</p> permission effect on file effect on directory <code>r</code> reading the content of a file read the names of the files in the directory <code>w</code> writing into a file create/delete/rename files in the directory <code>x</code> executing a file access contents and meta-info (size, creation time) of files in the directory <p>These three actions can be controlled independently.  </p> <p>The permissions on a file can be expressed in two ways:</p> <ul> <li> <p>using symbolic notation.  For instance,  <code>rwx</code>, <code>r-x</code>, <code>-wx</code>, where a <code>-</code> means that the corresponding permission is not given (in the order of <code>r</code>, <code>w</code>, <code>x</code>).</p> </li> <li> <p>using a numerical notation. This notation uses a digit between 0 and 7, which is computed as a sum of the individual digit representing the permissions: <code>r</code> is represented with 4, <code>w</code> is represented with 2, and <code>x</code> is represented with 1. For instance, <code>r-x</code> has a numerical representation of 5, and <code>-wx</code> has a numerical representation of 3.</p> </li> </ul>"},{"location":"guides/unix-essentials.html#the-who-of-file-permissions","title":"The Who of File Permissions","text":"<p>Unix divides the users into three classes: <code>u</code> is the user who owns the file; <code>g</code> refers to the users in the same group as the user; and <code>o</code> are all the other users.</p> <p>The permissions can be controlled separately for these classes of users.  The permission notation simply concatenates the file permissions of each class of users together, in the order of <code>u</code>, <code>g</code>, and <code>o</code>.</p> <p>For instance, the permission of 644, or <code>rw-r--r--</code>, on a file means that:</p> <ul> <li>the owner can read and write</li> <li>the group users can only read</li> <li>all the other users can only read</li> </ul>"},{"location":"guides/unix-essentials.html#checking-file-permission","title":"Checking file permission","text":"<p>You can view the permission of a file by using the <code>ls -l</code> command (<code>l</code> for long format):</p> <pre><code>$ ls -l test.txt\n-rw-r--r--@ 1 ooiwt  staff  64 Jul 28 09:52 test.txt\n</code></pre> <p>Ignoring the first <code>-</code> and the last <code>@</code>, you can see that the permission of <code>test.txt</code> is 644.</p>"},{"location":"guides/unix-essentials.html#the-chmod-command","title":"The <code>chmod</code> command","text":"<p>You can use <code>chmod</code> command to change the permissions of a file or a directory.</p> <p>For instance, <pre><code>$ chmod 666 test.txt\n$ ls -l test.txt\n-rw-rw-rw-@ 1 ooiwt  staff  64 Jul 28 09:52 test.txt\n</code></pre> would change add the permission <code>w</code> to both group and other users<sup>1</sup>.</p> <p>An alternative way is to just specify the changes.  To remove the permission to write from others, you can run: <pre><code>$ chmod o-w test.txt\n$ ls -l test.txt\n-rw-rw-r--@ 1 ooiwt  staff  64 Jul 28 09:52 test.txt\n</code></pre></p>"},{"location":"guides/unix-essentials.html#common-scenarios-for-chmod","title":"Common Scenarios for <code>chmod</code>","text":"<p>Here are some scenarios where you might need to use the <code>chmod</code> command:</p> <ul> <li> <p>If you use the SoC Unix server to do your homework, you should prevent the directory that stores your homework from being accessible by other users.  Make sure that your homework directory as the permission of <code>700</code>.</p> </li> <li> <p>If you download a file from the Internet and you do not have the permission to read it, you should do a <code>u+r</code> to give yourself the read permission.</p> </li> <li> <p>A program should have execution permission to run.  If you have a script or an executable file that you can't run, give yourself the execution permission <code>u+x</code>.</p> </li> </ul>"},{"location":"guides/unix-essentials.html#standard-inputoutput","title":"Standard Input/Output","text":""},{"location":"guides/unix-essentials.html#history","title":"History","text":"<p>Two of the design decisions of Unix that lead to its simplicity are the decisions to (i) decouple the physical input/output devices from the programs, allowing programs written for Unix to read from abstract input and output devices; and (ii) make all programs read and write from these abstract input and output devices by default.  Before Unix, the older operating systems often require programmers to painstakingly set up connections to the teletype machines and other devices for reading inputs and printing outputs.   With Unix, programmers can now focus on solving the tasks at hand and let Unix takes care of the input and output.</p> <p>The two abstract devices that Unix provides are called standard input and standard output.  By default, the standard input refers to the keyboard and the standard output is the terminal.</p>"},{"location":"guides/unix-essentials.html#examples-using-cat-and-wc","title":"Examples using <code>cat</code> and <code>wc</code>","text":"<p>Let's look at these concepts closer, by examining some examples.</p> <p>Remember <code>cat</code>?  The <code>cat</code> command takes in a filename and it prints the content of the file to the standard output.</p> <pre><code>$ cat test.txt\nThis is a test file for learning Unix file management commands.\n</code></pre> <p>If no filename is given, <code>cat</code> by default try to read from the standard input.  Try running:</p> <pre><code>$ cat\n</code></pre> <p>You will see that the command is waiting for you to type in something.  Type in anything, as soon as you press Enter, <code>cat</code> is going to read in the text from the standard input, as if it is the content of a file, and then prints the content to the standard output.  You can keep typing, supplying text to <code>cat</code>, or you can type Ctrl+D to send the end-of-input command to <code>cat</code>.</p> <p>Let's look at another command, <code>wc</code>.  <code>wc</code> is a utility that counts the number of lines, words, characters.  If we call <code>wc</code> and supply it a file name, it will count the number of lines, words, and characters in that given file.</p> <pre><code>$ wc test.txt\n       1      11      64 test.txt\n</code></pre> <p>The output means that there is 1 line, 11 words, and 64 characters in the file <code>test.txt</code>.</p> <p>But if you do not pass in any file name, <code>wc</code> is going to read in the text from the standard input, as if it is the content of a file, and prints the three counters to the standard output.  Go ahead and try:</p> <pre><code>$ wc\n</code></pre> <p>You will see that the <code>wc</code> command is waiting for you to type in something.  Type in a few sentences, you can hit Enter for a new line.  When you are done, type Ctrl+D.  <code>wc</code> will count the number of lines, words, and characters for the text that you just entered.</p>"},{"location":"guides/unix-essentials.html#output-redirection","title":"Output Redirection","text":"<p>By defining two abstract input and output devices (or channels), Unix frees the programmers from worrying about where to read the input from and write the output to.  Most of the time, we can write the output of the program to the standard output.  In instances where we need to write the output to another location, we can just redirect the output.</p> <p>The operators <code>&gt;</code> and <code>&gt;&gt;</code> are used to redirect the standard output to a file.  The difference is that <code>&gt;</code> will overwrite the given file, while <code>&gt;&gt;</code> will concatenate into the given file.</p> <p>For example: <pre><code>$ wc test.txt &gt; test.count\n$ cat test.count\n       1      11      64 test.txt\n</code></pre></p> <p>The first command redirects the output from <code>wc</code> to a file named <code>test.count</code>, so you do not see anything printed to the output anymore.  We can check by running <code>cat</code> on the new file <code>test.count</code> -- indeed the original output from <code>wc</code> is now stored in the file <code>test.count</code>.</p> <p>If we repeat the command <code>wc test.txt &gt; test.count</code> again, you can see that the file has been overwritten with the output from <code>wc</code> again.  But if we replace <code>&gt;</code> with <code>&gt;&gt;</code>, a new line is concatenated into <code>test.count</code>.   So the file now has two lines.</p> <pre><code>$ wc test.txt &gt; test.count\n$ cat test.count\n       1      11      64 test.txt\n$ wc test.txt &gt;&gt; test.count\n$ cat test.count\n       1      11      64 test.txt\n       1      11      64 test.txt\n</code></pre>"},{"location":"guides/unix-essentials.html#input-redirection","title":"Input Redirection","text":"<p>The operator <code>&lt;</code> is used to redirect a file into the standard input. So, instead of reading from the keyboard, we can now read from a file.  Commands such as <code>cat</code> and <code>wc</code> already support from a file directly, so there is no difference in terms of functionality to run the commands by passing in the file name, or by using the <code>&lt;</code> operator.</p> <pre><code>$ wc test.txt\n       1      11      64 test.txt\n$ wc &lt; test.txt\n       1      11      64\n$ cat test.txt\nThis is a test file for learning Unix file management commands.\n$ cat &lt; test.txt\nThis is a test file for learning Unix file management commands.\n</code></pre> <p>Note the slight difference in the output format of the second <code>wc</code> above -- it no longer prints the file name since from <code>wc</code> points of view, it is read from the standard input and not from a file, so it is not aware of the file named <code>test.txt</code></p> <p>In most CS programming assignments, however, to keep things simple, you will be asked to read from the standard input only, so the <code>&lt;</code> is a great time-saver -- you do not have to repeatedly type in the same input data over and over from the keyboard.  You can just save the input data in a file, then redirect it to standard input with the <code>&lt;</code> operator.</p>"},{"location":"guides/unix-essentials.html#other-useful-online-tools","title":"Other Useful Online Tools","text":"<ul> <li>explainshell explain each shell command for you</li> </ul> <ol> <li> <p>Giving write permission to other users is a security risk.  You should not do this unless you know what you are doing.\u00a0\u21a9\u21a9</p> </li> <li> <p>Not exactly true -- since Unix is designed to be flexible, even the root and the home directory can be changed!  But let's not worry about that for now since there is no good reason to do that as a beginner.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/vim-philosophy.html","title":"The Philosophy of <code>vim</code>","text":"<p>This article is adapted from the notes of the Unix@Home Workshop  held in August 2020.</p> <p>After reading this article, students should</p> <ul> <li>appreciate the usefulness of learning <code>vim</code> and using it as the main source code editor.</li> <li>appreciate the efficiency and philosophy of using <code>vim</code>.</li> <li>have experience navigating around a text buffer and manipulating text in <code>vim</code></li> <li>be aware of how to learn more about using <code>vim</code>.</li> </ul> <p>To edit our code, we need a proper editor.  Remember that, ideally, we want to keep our hands on the keyboard and keep ourselves \"in the zone\" with only the terminal, the keyboard, and ourselves, so we will use a terminal-based editor: no windows, no mouse, no arrow keys, no function keys.</p> <p>There are only two respectable, widely available text editors in Unix -- <code>vim</code> and <code>emacs</code>.  Which one is better has been an ongoing religious war, but for us in SoC, we use <code>vim</code>.</p>"},{"location":"guides/vim-philosophy.html#minimizing-hand-movements","title":"Minimizing Hand Movements","text":"<p><code>vim</code>, like the shell, aims to minimize hand movements.  Frequently used commands are positioned in convenient places on the keyboard.  Let me give you a few examples.</p> <ul> <li> <p>To exit vim, type Shift+Z+Z.  Notice that this is located in the bottom left corner of your keyboard.  For normal typing, your left hand is supposed to be placed over the keys A S D F, so you just need to move slightly your left pinky to Shift and left ring finger to Z and hit them.</p> </li> <li> <p>To move the cursor, instead of using the arrow keys, <code>vim</code> uses H to move left, L to move right, J to move down, and K to move up.  For normal typing, your right hand is supposed to be placed on J K L ;, so these arrow keys alternatives are located very near to where your right hand should be!</p> </li> </ul> <p>I have a few more things to say about using H J K L to replace the arrow keys:</p> <ul> <li> <p>It is not uncommon for applications to re-map other keys for movement.  Many first-person shooting games use W A S D for movement, for the same reason as <code>vim</code> -- it is close to the resting position of the left hand on the keyboard.</p> </li> <li> <p>The use of H J K L for movement is more ubiquitous than you think.  In the Web-version of Gmail, Facebook, and Reddit, for instance, you could use J and K to move up and down across posts.</p> </li> </ul>"},{"location":"guides/vim-philosophy.html#multi-modal-editor","title":"Multi-modal Editor","text":"<p><code>vim</code> is a multi-modal editor.  While most other editors make no distinction between reading and editing, <code>vim</code> makes an explicit distinction between the two.  <code>vim</code> has two basic modes:</p> <ul> <li><code>NORMAL</code> mode: where you read, navigate and manipulate the text.</li> <li><code>INSERT</code> mode: where you insert the text</li> </ul> <p>As a programmer, having a separate <code>NORMAL</code> mode makes sense since we spend much time reading and navigating around source code.  Thus, allowing the editing commands to be optimized.</p> <p>In the <code>NORMAL</code> mode, you can use any of these keys I S A O (with or without Shift) to switch to <code>INSERT</code> mode.  To go back to <code>NORMAL</code> mode, press Esc.  The keys I S A O have different meanings, which you will learn later.</p> <p>Note that most of the time you will be in <code>NORMAL</code> mode.  So a habitual <code>vim</code> user would insert some text and immediately switch back to normal mode by hitting Esc.</p>"},{"location":"guides/vim-philosophy.html#tell-vim-what-you-want-to-do-dont-do-it-yourself","title":"Tell <code>vim</code> What You Want To Do; Don't Do It Yourself","text":"<p>In <code>NORMAL</code> mode, you can manipulate text in <code>vim</code> by issuing commands to <code>vim</code>.  These commands are like a programming language.  It is also not unlike the Unix commands, in that each command does a small thing but can be composed together to perform complex text manipulation.</p> <p>Let me give an example here.  Suppose you have a sentence:</p> <pre><code>Wherever there is light, there is also a shadow.\n</code></pre> <p>You want to remove <code>also a</code> from the sentence.</p> <p>What would you do in a typical text editor?  You can use move your hand away from the keyboard, find your mouse, move your mouse cursor to highlight the text, and then hit Del.  Or you could move the cursor (by mouse or by repeatedly hitting the keyboard) to place the cursor after <code>a</code>, and then press Del six times.</p> <p>In addition to being tedious, this is error-prone.  You might highlight one additional or one less space, or hit Del one too many times.</p> <p>What we are used to doing is performing the action of deleting the words ourselves.  For <code>vim</code>, we do it differently.  We need to look for the word <code>also</code> and delete two words.  This translates to the command / A L S O Enter D 2 W.</p> <ul> <li>/ triggers a search.  This is an almost universal command -- try / on Facebook (web) or on this page.</li> <li>A L S O Enter tells <code>vim</code> what you want to search. After pressing Enter, your cursor should be placed at the beginning of <code>also</code>.</li> <li>D 2 W tell <code>vim</code> to \"delete two words\".</li> </ul> <p>Instead of worrying about the actual actions to perform the deletion, we issue higher-level commands to describe what we want to do.  This is powerful since this is how our brain thinks -- \"I need to insert this here, change this word to that, remove two lines, etc.\"  All these maps into commands in <code>vim</code>.  As a result, once you master <code>vim</code> basics, you can type as fast as you think<sup>1</sup>!</p> <p>A common pattern for <code>vim</code> command consists of three parts: (i) place the cursor; (ii) perform an action; (iii) move to the new placement of the cursor.  In the example above, / A L S O Enter places the cursor, D is the action (delete), and 2 W is the movement (move the cursor forward by two words).</p> <p>Another common command that students used is G G = Shift+G.  This command is used to indent the source code in the current file.  G G is the command to place the cursor at the top of the file.  = is the action (indent), and Shift+G is the command to place the cursor on the last line of the file.</p>"},{"location":"guides/vim-philosophy.html#be-a-good-unix-citizen","title":"Be A Good Unix Citizen","text":"<p>Not only do the basic commands <code>vim</code> adhere to the Unix principles of composability, <code>vim</code> plays well with Unix shells, which adds additional power to <code>vim</code>.  For instance, if you want to have the standard output from a command paste into the file you are editing, you can run:</p> <p><pre><code>:r! &lt;command&gt;\n</code></pre> : triggers the <code>vim</code> command line.  R ask <code>vim</code> to read something and paste it into the current cursor location.  At this point, you can pass in, for instance, another file name.  But here, we enter !, which tells <code>vim</code> to run a shell.  We then pass the <code>command</code> to the shell.  Whatever the command writes to the standard output, will be read and inserted into <code>vim</code>.</p> <p>Want to insert today's date? <pre><code>:r! date\n</code></pre></p> <p>Want to insert a mini calendar? <pre><code>:r! cal\n</code></pre></p> <p>Want to insert the list of all JPG pictures? <pre><code>:r! ls *jpg\n</code></pre></p> <p>You can even pass a chunk of text from <code>vim</code> to the standard input of another program, and replace it with what is printed to the standard output by that program.</p>"},{"location":"guides/vim-philosophy.html#other-reasons-to-learn-vim","title":"Other Reasons To Learn <code>vim</code>","text":"<p>Besides enabling you to type as fast as you think with as few hand movements as possible, there are other reasons to use <code>vim</code>:</p> <ul> <li> <p><code>vim</code> is installed by default in almost any Unix environment.  Imagine if you get called to a client-side to debug a Linux server, and you need to edit something -- you can rest assured that <code>vim</code> is there.</p> </li> <li> <p><code>vim</code> is the only source code editor you need to learn and master.  It works for almost any programming language.  If you use IDE, you have to learn IntelliJ for Java, IDLE for Python, Visual Studio C++ for C++, etc.  This reason is also why VS Code has gained significant popularity in recent years.</p> </li> <li> <p><code>vim</code> is extensible and programmable.  It has been around for almost 30 years, and tons of plugins have been written.  Whatever feature you need, there is likely a native <code>vim</code> command or a <code>vim</code> plugin for that.</p> </li> </ul> <p>The only downside to using <code>vim</code> is that it is terminal-based (some consider it ugly) and it has a steep learning curve.  But, in our experience, students will build up their muscle memory and are comfortable with <code>vim</code> after 2-3 weeks of usage.</p> <p>For CS1010, there is another practical reason to learn and gain familiarity with <code>vim</code>.  The practical exams are conducted in a sandboxed environment, which you can only access through <code>ssh</code> via a terminal.  You only have a few choices (<code>emacs</code>, <code>nano</code>, <code>vim</code>) and <code>vim</code> is the only reasonable choice. </p> <ol> <li> <p>The book Practical Vim by Drew Neil has the subtitle \"Edit text at the speed of thought\".\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/vim-plugins.html","title":"Vim Extensions on PE Hosts","text":"<p>CS1010 provides a minimal set of vim extensions (i.e., plugins and color schemes) officially.  At the beginning of the semester, students can install the same set of extensions following the vim setup procedure. The same set of official extensions will be made available during the practical exams.</p> <p>Students are free to install any additional color schemes or plugins if they wish.  These additional extensions, however, are not allowed and will not be available during the practical exams.</p> <p>The following are the officially supported vim extensions in CS1010.</p>"},{"location":"guides/vim-plugins.html#color-schemes","title":"Color Schemes","text":"<p>We installed three color schemes <code>~cs1010/.vim/colors</code>.  You may copy them over to your own home directory, by running</p> <pre><code>mkdir -p ~/.vim\ncp -r ~cs1010/.vim/colors ~/.vim\n</code></pre> <p>The three color schemes are:</p> <ul> <li>gruvbox</li> <li>molokai</li> <li>onedark</li> </ul> <p>You can change your vim color scheme using the <code>:color</code> command.  For instance,</p> <pre><code>:color gruvbox\n</code></pre> <p>You can add the line <code>color gruvbox</code> (without <code>:</code>) to your <code>~/.vimrc</code> so that the color scheme is loaded at the start of every vim session.</p> <p>Some color schemes display differently depending on whether the background is set to <code>dark</code> or <code>light</code></p> <p>Some examples, with <code>set background=dark</code> in <code>~/.vimrc</code>:</p> <p>The Vim default color scheme:</p> <p></p> <p>The molokai (CS1010's default) color scheme:</p> <p></p> <p>The gruvbox color scheme </p> <p></p>"},{"location":"guides/vim-plugins.html#plugins","title":"Plugins","text":"<p><code>vim</code> plugins are installed under <code>~/.vim/pack/plugins/start</code>.</p> <p>CS1010 supports only one plugin: syntastic, which automatically checks for syntax and style errors every time a file is saved (when you run <code>:w</code>).</p> <p>The syntastic configuration in the CS1010 <code>~/.vimrc</code> has been made to work with the exercise/assignment setups. As such, it might not work as intended if you edit a C file outside the CS1010 setup.</p>"},{"location":"guides/vim-quick-lessons.html","title":"Quick <code>vim</code> Lessons","text":"<p>Here is a quick walkthrough to get a taste of <code>vim.</code></p>"},{"location":"guides/vim-quick-lessons.html#lesson-1-navigation","title":"Lesson 1: Navigation","text":"<p>Download the following file for practice using <code>vim</code> in this session. <pre><code>$ wget https://raw.githubusercontent.com/nus-unix-workshop/2021-s1/master/jfk.txt\n</code></pre></p> <p>The file named <code>jfk.txt</code> should be downloaded.  Now let's start your first <code>vim</code> session.</p> <pre><code>$ vim jfk.txt\n</code></pre> <p>When you start, you will be in <code>NORMAL</code> mode.  For now, just move around the cursor with H J K L.  Get comfortable using the keys.</p> <p>Next, try ( and ) to move forward and backward, sentence-by-sentence.</p> <p>Next, try { and } to move forward and backward, paragraph-by-paragraph.</p> <p>Now, try Ctrl+F and Ctrl+B to move forward and backward, page-by-page.</p> <p>Use 0 to jump to the beginning of the line, and Shift+4 ($) to jump to the end of the line.</p> <p>Use G+G to jump to the beginning of the file, and Shift+G (<code>G</code>) to jump to the last line of the file.</p> <p>Now try /, type in any word (or prefix of a word) and Enter.  This should move the cursor to the beginning of the word.  You can use N and Shift+N to move to the next match and the previous match.</p> <p>When you are comfortable moving around, you can Shift+Z+Z to exit.</p> <p>Congratulations, you have just completed your first session in <code>vim</code>!</p>"},{"location":"guides/vim-quick-lessons.html#lesson-2-manipulating-text","title":"Lesson 2: Manipulating Text","text":"<p>Now, we are going to open up the same file again and try to manipulate the text.  We are going to stay in the <code>NORMAL</code> mode still.</p> <pre><code>$ vim jfk.txt\n</code></pre>"},{"location":"guides/vim-quick-lessons.html#deletion","title":"Deletion","text":"<p>Try 0 D 3 W to move the cursor to the beginning of the line and delete three words.</p> <p>Press U to undo.  This is another lifesaver that you should remember.</p> <p>In <code>vim</code>, repeating the same command twice usually means applying it to the whole line.  So D D deletes the current line.  Try that.</p> <p>Pairing a command with Shift (or the capital letter version) usually means applying the action until the end of the line.  So Shift+D deletes from the current cursor until the end of the line.</p>"},{"location":"guides/vim-quick-lessons.html#copy-pasting","title":"Copy-Pasting","text":"<p>Hit P to paste back what you just deleted.  Try moving the cursor to somewhere else and paste.</p> <p>To copy (or yank) the current line, hit Y Y.</p> <p>Remember that all these commands can be composed using the movement-action-movement pattern.  For instance, Shift+9 Y Shift+0, which corresponds to: move to the beginning of the sentence, yank, and until the end of the sentence, basically copy the current sentence.</p> <p>As you have seen in the D 2 W example, you can precede an action with a number to repeat an action multiple times.</p> <p>Try Y Y 9 P.  You should be able to understand what just happened!</p>"},{"location":"guides/vim-quick-lessons.html#deleting-a-character","title":"Deleting a Character","text":"<p>The X command deletes the current character.</p> <p>Try this exercise: At the end of the file <code>jfk.txt</code>, there are some typos: <pre><code>libertyi. liberty.\n</code></pre> Change <code>libertyi. liberty.</code> to <code>libtery.</code> by positioning the cursor on the second <code>i</code> and deleting it.  Then use Shift+D to delete the extra <code>liberty.</code> at the end of the sentence.</p>"},{"location":"guides/vim-quick-lessons.html#visual-mode","title":"Visual Mode","text":"<p>In addition to the <code>INSERT</code> and <code>NORMAL</code> modes, <code>vim</code> has the third mode, the <code>VISUAL</code> mode.  You can enter the <code>VISUAL</code> mode by hitting V.  Once in visual mode, you can move your cursor to select the text and perform some actions on it (e.g., D or X to delete, Y to yank).</p> <p>Hitting Shift+V will allow you to select line-by-line.</p> <p>The <code>VISUAL</code> mode allows us to pipe the selected text to another Unix command, and replace it with the result of that command.</p> <p>Go ahead and try to select a paragraph in <code>jfk.txt</code>, and hit :.  You will see that <pre><code>:'&lt;,'&gt;\n</code></pre></p> <p>appears in the last line of the terminal.  At this point, you can type in actions that you want to perform on the selected text.  For instance, <pre><code>:'&lt;,'&gt;w john.txt\n</code></pre></p> <p>will write it to a file named <code>john.txt</code>.</p> <p>But, let's try the following: <pre><code>:'&lt;,'&gt;!fmt\n</code></pre></p> <p><code>!fmt</code> tells <code>vim</code> to invoke the shell and run <code>fmt</code>.  <code>fmt</code> is another simple small Unix utility that takes in a text (from standard input) and spews out formatted text in the standard output.  You will see that the width of the text has changed to the default of 65.</p> <p>You can try something that we have seen before.  Select the text again, and hit <pre><code>:'&lt;,'&gt;!wc\n</code></pre></p> <p>The selected text will be replaced with the output from <code>wc</code>.</p>"},{"location":"guides/vim-quick-lessons.html#the-command","title":"The <code>:</code> command","text":"<p>You have seen examples of <code>:</code> commands for writing to a file or piping selected text to an external command.</p> <p>The <code>:</code> command also enables many actions that you can do in <code>vim</code>.  Here are a few essential yet simple commands.</p> <ul> <li>To jump to a line, hit : followed by the line number.</li> <li>To open another file, hit : and then type in <code>e &lt;filename&gt;</code></li> <li>To find help on a topic, hit : and then type in <code>help &lt;keyword&gt;</code></li> </ul> <p>Other advanced features such as search-and-replace, changing preferences, splitting windows, and opening new tabs, are also accessible from the <code>:</code> command.</p> <p>The <code>:</code> command prompt supports Ctrl+P and Ctrl+N for navigating back and forth your command history, just like <code>bash</code>.  It also supports Tab for auto-completion.</p>"},{"location":"guides/vim-quick-lessons.html#lesson-3-insert-mode","title":"Lesson 3: Insert mode!","text":"<p>Finally, we are going to try inserting some text.  Remember, to use <code>INSERT</code> mode, we always start with a command I A O or S (may pair with Shift) followed by the text that you want to insert, followed by Esc.</p> <p>Let's try I (insert).  Place your cursor anywhere, hit I, and start typing, when you are done.  Hit Esc.</p> <p>You just added some text to the file.</p> <p>Place your cursor anywhere, hit A (append), and start typing, when you are done.  Hit Esc.  A appends the text to the end of the current line.</p> <p>Hit O (open) and start typing, when you are done.  Hit Esc.  O opens up a new line for your text.</p> <p>Hit S (substitute) and start typing, when you are done.  Hit Esc.  S substitute the current character with your text.</p> <p>Now try it with Shift and see the difference in behavior.</p>"},{"location":"guides/vim-quick-lessons.html#learning-more","title":"Learning More","text":"<p>You can run <code>vimtutor</code> to learn more about <code>vim</code>.  Check out the tips that we have collected for CS1010, or watch the various tutorials online.  Here are some interesting ones are:</p> <ul> <li>Vim Genius: A game that goes together with <code>vimtutor</code></li> <li>Learn vim Progressively.</li> <li>Vim: Precision Editing at the Speed of Thought: A talk by Drew Neil</li> <li>Vim Adventure: An adventure game for learning <code>vim</code></li> <li>Vim Casts: Videos and articles for teaching <code>vim</code></li> <li>Vim Video Tutorials by Derek Wyatt</li> <li>Vim Awesome: Directory of plugins.</li> </ul> <p>You can search the Web for \"best vim tutorials\" to find many other resources to get you started with the editor.</p>"},{"location":"guides/vim-setup.html","title":"Setting Up <code>vim</code> on PE Hosts","text":""},{"location":"guides/vim-setup.html#vim-configuration","title":"Vim Configuration","text":"<p>Like many other Unix programs, you can configure your preferences by creating an <code>rc</code> (run commands) file in your home directory.  These <code>rc</code> files will be read by the corresponding programs and executed line-by-line as if the text is entered into the program through a keyboard.  You can view an <code>rc</code> file as a script that will be executed automatically whenever a program starts.</p> <p>For <code>vim</code>, the <code>rc</code> file is called <code>.vimrc</code>.  The <code>.</code> in the front of the file name carries a special meaning in Unix.  It means that this file is hidden -- you won't see it when you <code>ls</code>.  Hiding the run command files prevent your home directory from being cluttered.  To tell <code>ls</code> to show the hidden files, use the <code>-a</code> flag <pre><code>$ ls -a\n</code></pre></p> <p>We have created a <code>.vimrc</code> file, with CS1010 defaults, for your use.  This is the basis upon which you can build your own configuration. </p> <p>To copy this file to your home directory on the PE nodes, <pre><code>$ cp ~cs1010/.vimrc ~\n</code></pre></p> <p>You can ask <code>vim</code> to automatically back up the files that you edit.  This has been a lifesaver for me on multiple occasions.</p> <p>The default <code>.vimrc</code> contains the following two lines:</p> <pre><code>set backup\nset backupdir=~/.backup\n</code></pre> <p>This causes <code>vim</code> to save the previous version of every file you edited in a backup directory at location <code>~/.backup</code>.  You need to create this directory, however, by</p> <pre><code>$ mkdir -p ~/.backup\n</code></pre> <p>Now, if you made changes to a file that you regretted, or if you accidentally deleted a file, you can check under <code>~/.backup</code> to see if the backup can save you.</p>"},{"location":"guides/vim-setup.html#vim-plugins","title":"Vim Plugins","text":"<p>CS1010 provides a minimal set of vim extensions by default for your labs and practical exams.  See the article on vim plugins for details.  </p> <p>Additional vim extensions are installed under <code>~/.vim</code>.  To install these \"official\" CS1010 vim extensions, you can copy the <code>.vim</code> from cs1010's home directory to your home directory.  On the PE host, run:</p> <pre><code>mkdir -p ~/.vim\ncp -r ~cs1010/.vim/* ~/.vim\n</code></pre> <p>You can test out the different color schemes according to the instructions to check if you have set up the plugins correctly.  The default CS1010 <code>.vimrc</code> uses the <code>molokai</code> color schemes.</p>"},{"location":"guides/vim-tips.html","title":"Vim Tips for CS1010","text":"<p>I collected some tips on <code>vim</code> that I find helpful for CS1010/CS2030 students. </p> <p>Prerequisite: You have gone through the basic quick lessons and have set up your vim in your PE account.</p>"},{"location":"guides/vim-tips.html#1-useful-configuration","title":"1. Useful Configuration","text":""},{"location":"guides/vim-tips.html#showing-line-numbers","title":"Showing Line Numbers","text":"<p>If you prefer to show the line number on every line in <code>vim</code>, add <pre><code>set number\n</code></pre></p> <p>to your <code>~/.vimrc</code>.</p>"},{"location":"guides/vim-tips.html#enabling-true-colors","title":"Enabling True Colors","text":"<p>Not all terminal emulators support true colors.  Some limits themselves to 16 colors or 256 colors only.  To enable true colors, add <pre><code>set termguicolors\n</code></pre></p> <p>to your <code>~/.vimrc</code>.</p>"},{"location":"guides/vim-tips.html#2-navigation","title":"2. Navigation","text":""},{"location":"guides/vim-tips.html#faster-navigation","title":"Faster Navigation","text":"<p>If you find yourselves typing too many HJKL to navigate around your code, check out the following shortcuts to navigate around:</p> <p>To move word-by-word:</p> <ul> <li>W jump to the beginning of the next word</li> <li>B ump to the beginning of the previous word (reverse of <code>w</code>)</li> <li>E jump to the end of the word (or next word when pressed again)</li> </ul> <p>To search:</p> <ul> <li>F char: search forward in the line and sit on the next matching char</li> <li>T char:  search forward in the line and sit on one space before the matching char</li> </ul> <p>0 would move you to the beginning of the line, but when coding, it is sometimes useful to jump to the first non-blank character instead.  To do so, use Shift+6 (^).</p> <p>In coding, we have many pairs of <code>[]</code>, <code>{}</code>, <code>()</code> and <code>&lt;&gt;</code>.  You can use Shift+5 (%) jump between matching parentheses.</p>"},{"location":"guides/vim-tips.html#jump-to-a-line","title":"Jump to a Line","text":"<p>If the compiler tells you there is an error on Line \\(x\\), you can issue <code>:&lt;x&gt;</code> to jump to Line \\(x\\).  For instance, <code>:40</code> will go to Line 40.</p>"},{"location":"guides/vim-tips.html#3-editing-operations","title":"3. Editing Operations","text":""},{"location":"guides/vim-tips.html#undo-and-redo","title":"Undo and Redo","text":"<p>Since we are on the topic of correcting mistakes, U in command mode undo your changes.  Prefix it with a number \\(n\\) to undo \\(n\\) times.  If you want to undo your undo, Ctrl+R will redo.</p>"},{"location":"guides/vim-tips.html#navigation-editing","title":"Navigation + Editing","text":"<p><code>vim</code> is powerful because you can combine operations with navigation.  For instance C to change, D to delete, Y to yank (copy).  Since W is the navigation command to move over the current word, combining them we get:</p> <ul> <li>CW change the current word (delete the current word and enter insert mode)</li> <li>DW delete the current word</li> <li>YW yank the current word (copy word into buffer)</li> </ul> <p>Can you guess what each of these does:</p> <ul> <li>DFShift+0 </li> <li>DFShift+0 </li> <li>CShift+4</li> <li>Y0</li> </ul> <p>If you repeat the operation C, D, and Y, it applies to the whole line, so:</p> <ul> <li>CC change the whole line</li> <li>DD delete the whole line</li> <li>YY yank the whole line</li> </ul> <p>You can add a number before an operation to specify how many times you want to repeat an operation.  So 5DD  deletes 5 lines, 5DW deletes 5 words, etc.</p> <p>See the article Operator, the True Power of <code>Vim</code> for more details.</p>"},{"location":"guides/vim-tips.html#swapping-lines","title":"Swapping Lines","text":"<p>Sometimes you want to swap the order of two lines of code, in command mode, DDP will do the trick.  DD deletes the current line, P paste it after the current line, in effect swapping the order of the two lines.</p>"},{"location":"guides/vim-tips.html#commenting-blocks-of-code","title":"Commenting blocks of code","text":"<p>Sometimes we need to comment out a whole block of code in C for testing purposes. There are several ways to do it in <code>vim</code>:</p> <ul> <li>Place the cursor on the first line of the block of code you want to comment on.</li> <li>0 to jump to the beginning of the line</li> <li>Shift+V enter visual mode</li> <li>Use the arrow key to select the block of code you want to comment on.</li> <li>Shift+I to insert at the beginning of the line (here, since we already selected the block, we will insert at the beginning of every selected)</li> <li>// to insert the C comment character (you will see it inserted in the current line, but don't worry)</li> <li>Esc to escape from the visual code.</li> </ul> <p>To uncomment,</p> <ul> <li>Place the cursor on the first line of the block of code you want to comment.</li> <li>0 to jump to the beginning of the line</li> <li>Ctrl+V enter block visual mode</li> <li>Use the arrow key to select the columns of text containing <code>//</code></li> <li>X to delete them</li> </ul>"},{"location":"guides/vim-tips.html#4-other-useful-commands","title":"4. Other Useful Commands","text":""},{"location":"guides/vim-tips.html#search-and-replace-in-vim","title":"Search and Replace in <code>vim</code>","text":"<pre><code>:%s/oldWord/newWord/gc\n</code></pre> <p><code>:</code> enters the command mode.  <code>%</code> means apply to the whole document, <code>s</code> means substitute, <code>g</code> means global (otherwise, only the first occurrence of each line is replaced). <code>c</code> is optional -- adding it cause <code>vim</code> to confirm with you before each replacement  </p>"},{"location":"guides/vim-tips.html#shell-command","title":"Shell Command","text":"<p>If you need to issue a shell command quickly, you don't have to exit <code>vim</code>, run the command, and launch <code>vim</code> again.  You can use <code>!</code>,</p> <pre><code>:!&lt;command&gt;\n</code></pre> <p>will issue the command to shell.  E.g.,</p> <pre><code>:!ls\n</code></pre> <p>You can use this to compile your current file, without exiting <code>vim</code>.</p> <pre><code>:!make\n</code></pre> <p><code>make</code> is a builtin command for <code>vim</code>, so you can also simply run</p> <pre><code>:make\n</code></pre>"},{"location":"guides/vim-tips.html#terminal","title":"Terminal","text":"<p>You can open an interactive shell from within <code>vim</code> with: <pre><code>:terminal\n</code></pre></p> <p>This command splits the window and add a terminal, within which you can compile or run your code.  </p>"},{"location":"guides/vim-tips.html#abbreviation","title":"Abbreviation","text":"<p>You can use the command <code>ab</code> to abbreviate frequently typed commands.  E.g., in your <code>~/.vimrc</code>,</p> <pre><code>ab pl cs1010_print_long(\n</code></pre> <p>Now, when you type <code>pl</code>, it will be expanded into <code>cs1010_print_long(</code></p>"},{"location":"guides/vim-tips.html#auto-completion","title":"Auto-Completion","text":"<p>You can use Ctrl+P or Ctrl+N to auto-complete.  By default, the autocomplete dictionary is based on the text in your current editing buffers.  This is a very useful keystroke saver for long function names and variable names.</p>"},{"location":"guides/vim-tips.html#auto-indent-the-whole-file","title":"Auto-Indent the Whole File","text":"<p>You can GG=Shift+G in command mode (i.e., type out <code>gg=G</code>) to auto-indent the whole file.  GG is the command to go to the beginning of the file.  = is the command to indent.  Shift+G is the command to go to the end of the file.</p>"},{"location":"guides/vim-tips.html#split-vims-viewport","title":"Split <code>vim</code>'s Viewport","text":"<ul> <li><code>:sp file.c</code> splits the <code>vim</code> window horizontally</li> <li><code>:vsp file.c</code> splits the <code>vim</code> window vertically</li> <li>Ctrl+WCtrl+W moves between the different <code>vim</code> viewports</li> </ul> <p>Alternatively, run <code>vim -O file1 file2</code> to immediately open both files in two different viewpoints.</p>"},{"location":"guides/vim-tips.html#compare-two-files","title":"Compare two files","text":"<p>You can compare two files with <code>vim</code>, using the <code>-d</code> flag.  For instance,</p> <p><code>vim -d file1 file2</code></p> <p>would open up two files for line-by-line comparison.  This is most useful if you want to compare the output of your program with the expected output.</p>"},{"location":"guides/vim-tips.html#5-recovery-files","title":"5. Recovery Files","text":"<p>Vim automatically saves the files you are editing into temporary swap files, with the extension <code>.swp</code>.  These files are hidden, so you don't normally see them when you run <code>ls</code>.  (You need to run <code>ls -a</code> to view the hidden files)</p> <p>The swap files are useful if your editing session is disrupted before you save (e.g., the network is disconnected, you accidentally close the terminal, your OS crashes, etc.).</p> <p>When you launch <code>vim</code> to edit a file, say, <code>foo.c</code>.  <code>vim</code> will check if a swap file <code>.foo.c.swp</code> exist.  If it does, <code>vim</code> with display the following</p> <pre><code>Found a swap file by the name \".foo.c.swp\"\n          owned by: elsa   dated: Sat Aug 21 15:01:04 2021\n         file name: ~elsa/foo.c\n          modified: no\n         user name: elsa   host name: pe116\n        process ID: 7863 (STILL RUNNING)\nWhile opening file \"foo.c\"\n             dated: Mon Jul 12 18:38:37 2021\n\n(1) Another program may be editing the same file.  If this is the case,\n    be careful not to end up with two different instances of the same\n    file when making changes.  Quit, or continue with caution.\n(2) An edit session for this file crashed.\n    If this is the case, use \":recover\" or \"vim -r a.c\"\n    to recover the changes (see \":help recovery\").\n    If you did this already, delete the swap file \".a.c.swp\"\n    to avoid this message.\n\nSwap file \".a.c.swp\" already exists!\n[O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort:\n</code></pre> <p>The messages above are self-explanatory.  Read it carefully.  Most of the time, you want to choose \"R\" to recover your edits, so that you can continue editing.  Remember to remove the file <code>.foo.c.swp</code> after you have recovered.  Otherwise, <code>vim</code> will prompt you the above messages every time you edit <code>foo.c</code>.</p> <p>Warning: if <code>foo.c</code> is newer than the state saved in <code>.foo.c.swp</code>, and you recover from <code>.foo.c.swp</code>, you will revert to the state of the file as saved in the swap file.  This can happen if (i) you edit the file without recovery, or (ii) you recover the file, continue editing, but did not remove the <code>.foo.c.swp</code> file after.</p>"},{"location":"notes/01-program.html","title":"Unit 1: What is a Program?","text":""},{"location":"notes/01-program.html#learning-outcomes","title":"Learning Outcomes","text":"<p>After this unit, students should:</p> <ul> <li>have an idea of what is a program and how a program is executed by a computer</li> <li>understand the basic terminologies: machine code, assembly language, and higher-level programming languages</li> </ul>"},{"location":"notes/01-program.html#what-is-a-computer-program","title":"What is a (computer) program?","text":"<p>Despite all the wonderful and amazing things that we can do with our computers, computers are not very intelligent.  Computers can't act or think by themselves.  All they can do is execute instructions written by humans.  These step-by-step instructions given to computers by humans is called a program. </p>"},{"location":"notes/01-program.html#what-is-programming","title":"What is programming?","text":"<p>Programming is the act of giving step-by-step instructions to a computer to perform a certain task.  Doing so requires human programmers to communicate with a computer.  Such communication is achieved using code written in a programming language, following a set of grammatical rules and meanings, that both the computer and human programmer understands.  </p> <p>Coding vs. Programming</p> <p>People often confuse the two terms: coding and programming.  The act of translating step-by-step instructions to a program using a chosen programming language is called coding.  But programming is more than coding.  It involves among other things, coming up with the correct step-by-step instructions to give to computers for execution to achieve a given task.</p>"},{"location":"notes/01-program.html#program-execution","title":"Program Execution","text":"<p>How does a computer execute a program?  Every computing student should have at least a basic understanding of this process.  You will learn in detail how this is done in later modules CS2100/CS2106 or EE2028/CG2271, but for CS1010, we will take a very simplistic and high-level view of this process.</p> <p>The two important components of a computer we will discuss for CS1010 are (i) the CPU, or central processing unit, which contains the electronic circuitry needed to execute the instructions, and (ii) the memory, which is a generalized term for where we store the data to be processed or manipulated by the CPU, as well as the instructions.  </p> <p>The instructions to the CPU come in the form of machine code, a sequence of bits (1s and 0s) that is interpreted and then followed by the CPU to do certain things.  These machine codes could instruct the CPU, for instance, to compare if a particular number at a certain memory location is more than 0, to add one number to another, or to execute another instruction at another memory location.  The data stored in the memory is also stored as a sequence of 1s and 0s.</p> <p></p>"},{"location":"notes/01-program.html#from-machine-code-to-high-level-programming-language","title":"From Machine Code to High-level Programming Language","text":"<p>While human programmers can write programs in machine code directly, doing so is a challenging endeavor and few actually do.  The challenges stem from a few reasons:  First, different CPUs understand different sets of machine code. Second, it is tedious to figure out where each piece of data is located in the memory (this location is determined by the operating system). Finally, the resulting code, even when it is correct and easy to read and understand by the machine, is often hard to decipher for a human. Simple operations such as comparing two numbers to see which one is bigger might require several instructions to perform.</p> <p>To get around the readability problem, programmers can code in assembly language -- a human-readable form of machine code, where each instruction, instead of represented by 0s and 1s, is represented by a mnemonic (such as <code>decr</code>, <code>incr</code>, <code>store</code>, <code>add</code>, etc.).   You will learn how to write programs in assembly languages in CS2100 and EE2028.</p> <p>Writing code in assembly languages, however, does not fully address the issues of machine-dependent code and the tediousness of programming.  Early programmers in the fifties thus designed high-level programming languages, where programmers can describe the operations that they wish to do in a language closer to their intention, in a machine-independent manner.  These high-level programming languages come with an associated software tool called the compiler.  The compiler compiles a program written in one of these programming languages into machine code for a specific CPU for execution using a compiler.</p> <p></p> <p>The first commercially available language is FORTRAN from IBM in the 1950s.  Among many early programming languages, C (birth year 1972) is the only one that is still popular and widely used today,  For many reasons, C is the language of choice for CS1010.  </p>"},{"location":"notes/01-program.html#the-goals-of-cs1010","title":"The Goals of CS1010","text":"<p>With the background above, we can now elaborate on the goals of CS1010.</p> <p>First, you will learn the most important syntax elements of the C programming language and how to express the tasks that you want your computer to perform by writing a C program. C is a relatively simple language but some aspects of C are confusing to beginners.  As such, we will not cover every aspect of C.  Furthermore, we will ban some syntax of C from being used in CS1010.    </p> <p>Second, you will learn how a C program behaves, including how data are stored and manipulated in memory. This understanding is essential for writing a C program to run on resource-constraints devices as well as for understanding the security pitfalls.</p> <p>Third, you will learn how to write good programs.  A program not only needs to correctly express the tasks for a computer to execute, but it also needs to be read and understood by humans.  You will learn to follow a clean coding style, document your code, etc., to make your code readable and changeable by yourself or other programmers.</p> <p>The last and the most important and challenging goal of CS1010, however, is that you will learn how to write a program that solves a given problem.  If you know what you want your program to do, step-by-step, translating that sequence of steps into C is not that difficult.  Determining what you want your program to do is the hardest part!.  This learning outcome is also the least language-dependent -- once you know what steps your want your program to perform, you can translate these steps into a program written in other languages, not limited to C.</p>"},{"location":"notes/02-algo.html","title":"Unit 2: Computational Problems and Algorithms","text":""},{"location":"notes/02-algo.html#learning-outcomes","title":"Learning Outcomes:","text":"<p>After this unit, students should:</p> <ul> <li>be able to differentiate between a computational and a non-computational problem;</li> <li>understand the basic terminologies: computational problem-solving, algorithm, flowchart, debugging, testing, variables, value, assignment;</li> <li>be familiar with the algorithm to find the maximum among a list of numbers;</li> <li>be able to express an algorithm using a flowchart;</li> <li>be able to trace through flowcharts that involves branching, looping, and updates of variables;</li> <li>understand the notion of the \"correctness\" of an algorithm.</li> </ul>"},{"location":"notes/02-algo.html#computational-problems","title":"Computational Problems","text":"<p>We ended Unit 1 by saying that the most challenging part of CS1010 is how to write a program to solve a problem.  Not all problems can be solved by computers, however.  When programming, we are concerned mostly with solving computational problem.</p> <p>A computational problem is a problem that can be solved step-by-step with a computer.  These problems usually have a well-defined input, constraints, and conditions that the output must satisfy<sup>1</sup>. Here are some types of computational problems:</p> <ul> <li> <p>A decision problem is one where the answer is yes or no.  For instance, \"given a number \\(n\\), is \\(n\\) even?\" is a decision problem.  Some decision problems take more steps to solve than others.  For instance, \"given a number \\(n\\), is \\(n\\) prime?\" takes more steps than just checking the parity of a number.</p> </li> <li> <p>A search problem is one where the solution may consist of one or more answers that satisfy a given condition.  For instance, we may want to find a path from one geographical location to another on a map.</p> </li> <li> <p>A counting problem is one where the answer is the number of solutions to a search problem.</p> </li> <li> <p>An optimization problem is one where the solution is the \"best\" possible solution, where the \"best\" can be defined differently.  For instance, we may want to compute the fastest route from one location to another.</p> </li> </ul> <p>Questions such as \"what is the meaning of life?\" \"do I look good in this outfit?\"<sup>2</sup> are not computational problems, because they do not have well-defined input, constraints, and conditions that the output must satisfy.</p> <p>In CS1010 (followed by CS2040C and CS3230), you will learn how to solve computational problems computationally -- this means that you learn to come up with step-by-step instructions meant for computers that you can translate into computer programs, to solve a given problem. </p>"},{"location":"notes/02-algo.html#example-finding-the-maximum","title":"Example: Finding the maximum","text":"<p>Let's start with a simple problem.  Given a finite list \\(L\\) of \\(k\\) integers (\\(k\\) &gt; 0), find the maximum integer from the list.</p> <p>First, let's consider if this is a computational problem.  The input is well-defined: we know what an integer is; we are told we have at least one integer in \\(L\\), and we have a finite number of them<sup>3</sup>.</p> <p>Second, let's consider the output.  What conditions must the output satisfy?  First, it has to be equal or larger than every other integer in \\(L\\).  Second, it must be an integer in \\(L\\).  This is well-defined by the problem statement, so we can say that it is a computational problem.</p> <p>Here is an example.  Suppose the input consists of:</p> <p><code>4 1 -4 0 9 9 3 5 8</code></p> <p>The output should be <code>9</code>.</p> <p>Now, you should pause reading and think about how you would solve this problem step-by-step.  </p>"},{"location":"notes/02-algo.html#algorithm","title":"Algorithm","text":"<p>One way to solve this problem is to check through the integers in the list, one by one, and keep track of the maximum value so far.  When you reach the end of the list, your \"maximum value so far\" will also be the maximum for the whole list.  </p> <p>Let's look at an example:</p> Integers Scanned Maximum So Far <code>4</code> <code>4</code> <code>4 1</code> <code>4</code> <code>4 1 -4</code> <code>4</code> <code>4 1 -4 0</code> <code>4</code> <code>4 1 -4 0 9</code> <code>9</code> <code>4 1 -4 0 9 9</code> <code>9</code> <code>4 1 -4 0 9 9 3</code> <code>9</code> <code>4 1 -4 0 9 9 3 5</code> <code>9</code> <code>4 1 -4 0 9 9 3 5 8</code> <code>9</code> <p>The English description above, however, is not detailed enough for computers to understand.  What is the meaning of \"check one-by-one\"? \"keep track of maximum so far\"?  how to tell if we have reached \"the end of the list\"?</p> <p>Let's work out all the details.</p> <p>First, we need a concise way of representing the integers in the list.  Borrowing from mathematical notation, let's say that the list \\(L\\) contains the integers  \\(\\langle l_0, l_1, ..., l_{k-1} \\rangle\\). To \"check one-by-one,\" we introduce another notation \\(l_i\\), which is the integer currently being \"checked\".  We begin with \\(i = 0\\), then \\(i = 1\\), then \\(i = 2\\), etc., until \\(i = k-1\\).  At every step, we increase \\(i\\) by 1.</p> <p>Second, we need a concise way of keeping track of the maximum so far.  We introduce another notation, \\(m\\), to represent the maximum value so far.  When \\(i = 0\\), \\(m = l_0\\).  Since we only scan a single integer, it has to be the maximum.  When we check another integer \\(l_i (i &gt; 0)\\), only two things can happen:</p> <ul> <li>if this \\(l_i\\) is larger than \\(m\\), then \\(l_i\\) has to be the maximum so far, so we update \\(m\\) to be \\(l_i\\).</li> <li>if \\(l_i\\) is equal to or smaller than \\(m\\), then \\(m\\) is still the maximum value so far.</li> </ul> <p>We keep doing the above and increase \\(i\\), until we reach the end of the list when (after increasing \\(i\\)) we find that \\(i\\) is \\(k\\).</p> <p>Now, we have enough details to describe step-by-step, how to find the maximum value from a list of integers.  Such sequence of steps, which the computer can take to solve a computational problem, is called an algorithm.</p>"},{"location":"notes/02-algo.html#flowchart","title":"Flowchart","text":"<p>There are different ways one can describe an algorithm.  The easiest way I find is to use a diagram called a flowchart.  The flowchart for the algorithm above looks like this.</p> <p></p> <p>There are several components to a flowchart.  We will use the following convention in CS1010:</p> <ul> <li>An arrow indicates the direction of the flow, i.e., what is the next step of the algorithm.</li> <li>A rounded rectangle denotes either the starting (inputs) or ending point (output) of the algorithm.</li> <li>A diamond box represents a \"question\" that can be true or false (yes or no). It indicates a \"branch\" in the flow.  Which branch we follow is determined by the answer to the question in the box.</li> <li>A rectangle represents one or more \"operations\" (such as initialization or manipulation of data) </li> </ul> <p>To understand the flowchart above, let's trace it with the sample input.  We will maintain the following table as we trace through the flowchart. In the beginning, just before entering \"\\(i\\) equals \\(k\\)?\", we have the following:</p> Integers Scanned \\(i\\) \\(l_i\\) \\(k\\) Maximum So Far (\\(m\\)) <code>4</code> <code>1</code> <code>1</code> <code>9</code> <code>4</code> <p>Subsequently, we enter a \"loop\", and the values assigned to the symbols at the point after \"\\(i\\) equals \\(k\\)?\" can be traced as follows:</p> Integers Scanned \\(i\\) \\(l_i\\) \\(k\\) Maximum So Far (\\(m\\)) <code>4 1</code> <code>1</code> <code>1</code> <code>9</code> <code>4</code> <code>4 1 -4</code> <code>2</code> <code>-4</code> <code>9</code> <code>4</code> <code>4 1 -4 0</code> <code>3</code> <code>0</code> <code>9</code> <code>4</code> <code>4 1 -4 0 9</code> <code>4</code> <code>9</code> <code>9</code> <code>4</code> <code>4 1 -4 0 9 9</code> <code>5</code> <code>9</code> <code>9</code> <code>9</code> <code>4 1 -4 0 9 9 3</code> <code>6</code> <code>3</code> <code>9</code> <code>9</code> <code>4 1 -4 0 9 9 3 5</code> <code>7</code> <code>5</code> <code>9</code> <code>9</code> <code>4 1 -4 0 9 9 3 5 8</code> <code>8</code> <code>8</code> <code>9</code> <code>9</code> <code>4 1 -4 0 9 9 3 5 8</code> <code>9</code> `` <code>9</code> <code>9</code> <p>Please spend some time tracing through the flowchart above.</p>"},{"location":"notes/02-algo.html#variables","title":"Variables","text":"<p>There are a few important things to take note of here.  \\(m\\), \\(i\\), \\(k\\), and the list \\(L\\) are what we called states or variables.  While in the above, we can think of them as mathematical variables that we can assign values to, in a computer program, a variable is a location in the memory that holds a value.</p> <p>We can perform two very basic operations on the variables: reading and writing.  In other words, we can set their values, and we can retrieve their values. </p> <p>We can assign the value of one variable to a constant (e.g., set \\(i\\) to 1) or to the value of another variable (e.g., set \\(m\\) to \\(l_i\\)).  In the latter example, we first read the value of \\(l_i\\), from \\(l_i\\)'s memory location, and then we write that value to the memory location of \\(m\\).  Once written, the value of \\(m\\) will not change until the next time we update the value of \\(m\\).</p> <p>It is important to note that, when \\(i\\) changes, \\(m\\) does not change automatically to the new \\(l_i\\)  This behavior is different from that which you may be familiar with in spreadsheet software -- if you set the value of a cell, say <code>A1</code> to be <code>=B1</code>, when the value in cell <code>B1</code> changes, the value <code>A1</code> also changes automatically.</p> <p>We can also compare the values of two variables.  We see two examples above: \"\\(i\\) equals \\(k\\)?\"  \"\\(l_i &gt; m\\)?\"  When we compare, we read the values of the variables from their memory location and check their relations.</p> <p>We can perform arithmetic operations on the variables: addition, subtraction, etc.  We see one example above: \"increment \\(i\\)\" (by 1).  This operation is actually an assignment operation in disguise.  We can write it as \"set \\(i\\) to \\(i\\) + 1\".  Here, you see that \\(i\\) is referred to twice.  This operation reads the value from the memory location of \\(i\\), adds 1 to it, and then writes the resulting value back to the location of \\(i\\).</p>"},{"location":"notes/02-algo.html#bugs","title":"Bugs","text":"<p>If you follow the execution of the algorithm above, step-by-step, using the example input <code>4 1 -4 0 9 9 3 5</code> above, you will obtain the correct maximum value \\(m\\) of <code>9</code>.  But does that mean that the algorithm is correct?  The answer is NO.</p> <p>For an algorithm to correctly solve the given problem, it has to produce the correct result for all valid inputs to the problem.  If we can find one counterexample, one input where the algorithm does not produce the correct output, then the algorithm is incorrect.  Note that I say does not produce the correct output, which means that either the algorithm produces the wrong output or does not produce any output at all.</p> <p>In this case, we say that the algorithm or the program has a bug.  A bug is a defect that causes the algorithm to behave incorrectly.  As a software developer, you will spend some time finding bugs in your code, a process known as debugging.  A debugger is a tool that helps programmers find bugs in their code.</p> <p>Before we even start the process of debugging, we first have to know if our algorithm is correct.  Remember that an algorithm is correct only if it produces the correct output only all possible valid inputs.  So, one way to check if an algorithm is correct is to try it with all possible valid inputs.  For the problem we are solving above, however, even though the list is finite, there are infinitely many possible inputs, and so, it is impossible to try all possible valid inputs.  In practice, we craft a smaller set of test inputs to check if the algorithm behaves correctly for these test inputs, and hope that it is correct for all possible inputs.  With experience, you will choose the right set of test inputs to maximize the chances that you will find a bug in your code.  There are also systematic ways of deriving test cases so that the test cases cover different paths of execution of the algorithm, but we won't be covering it in CS1010<sup>3</sup>.</p> <p>Another way of checking if an algorithm is correct is to reason about the behavior of the algorithm.  We will do this rather informally in CS1010, starting in 1-2 lectures from now.  You get to rigorously prove that an algorithm is correct in a higher-level module (CS3230 Design and Analysis of Algorithms).</p> <p>Finally, even if an algorithm is correct, the corresponding program might not be.  Recall that an algorithm is a step-by-step process to solve a problem.  It is what you want your program to do.  You still have to write a program (in C, or other languages) to have the computer do what you want it to do (in other words, to implement the algorithm). This process of translating the algorithm to a computer program, called coding may introduce bugs as well.  But we will worry about this later when we learn to program.</p> <p>In the problem set at the end of this lecture, you will see slight variations of the algorithm above.  You should check through them to see whether they are correct or not.</p>"},{"location":"notes/02-algo.html#problem-set","title":"Problem Set","text":""},{"location":"notes/02-algo.html#problem-21","title":"Problem 2.1","text":"<p>The following algorithms are slight variations of the one in the notes above.  The differences are highlighted in red.  Do they correctly find the maximum integer from a finite list of \\(k\\) integers (\\(k &gt; 0\\))?  </p> <p>If an algorithm is buggy, give a counter-example where the output is incorrect.  In addition, give an example input where the algorithm still produces the correct output, where possible.  </p> <p>(a)  </p> <p>(b)  </p> <p>(c)  </p> <p>(d)  </p> <p>(e)  </p>"},{"location":"notes/02-algo.html#problem-22","title":"Problem 2.2","text":"<p>Change the algorithm above to find the minimum value instead of the maximum value from the given list \\(L = \\langle l_0, ..., l_{k-1}\\rangle\\). You can also assume that the list \\(L\\) is finite and \\(k &gt; 0\\) for this question.</p>"},{"location":"notes/02-algo.html#problem-23","title":"Problem 2.3","text":"<p>Draw the flowchart for an algorithm, that takes in a list of integers \\(L = \\langle l_0, ..., l_{k-1}\\rangle, k &gt; 0\\), and computes the sum of all the integers.  Think about what variable(s) do you need.</p> <ol> <li> <p>Note that the reverse is not true.  It is possible to have an intractable problem that has a well-defined input, constraints, and conditions that the output must satisfy, but yet cannot be solved by any computer, no matter how powerful the computer is.  E.g., the following problem is intractable: given a program \\(P\\) an input \\(i\\), will \\(P\\) produce an output when run with \\(i\\)?  Or will \\(P\\) run forever?  This problem is known as the halting problem.\u00a0\u21a9</p> </li> <li> <p>The answer is, by the way, always \"Yes.\"\u00a0\u21a9</p> </li> <li> <p>Software testing is a body of knowledge worthy of an advanced module by itself -- we offer one in CS4218.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"notes/03-func.html","title":"Unit 3: Functions","text":""},{"location":"notes/03-func.html#learning-outcomes","title":"Learning Outcomes:","text":"<p>After this unit, students should:</p> <ul> <li>understand the concept of a function: (i) function as a high-level abstraction of lower-level operations; (ii) function as a well-defined solution to a sub-problem with zero or more inputs and (possibly) a returned value.</li> <li>be able to see how a problem can be decomposed into sub-problems, each solvable by a function; the functions can then be composed together to solve the original problem;</li> <li>understand the concept of local variables that are internal within a function;</li> <li>be able to apply \"wishful thinking\" in decomposing a problem into sub-problems;</li> <li>apply wishful thinking in solving a problem recursively -- by making a function invokes itself to solve a simpler version of the same problem.</li> </ul>"},{"location":"notes/03-func.html#problem-finding-the-range","title":"Problem: Finding the Range","text":"<p>Let's start with another problem.</p> <p>The range of a finite list of at least one integer \\(L\\) is defined as the difference between the maximum and the minimum integers in \\(L\\).  For example, the range for <code>4 1 -4 0 9 9 3 5 8</code> is <code>13</code>.  How do we find the range of a given list?</p> <p>To find the range of a list, we can break the solution down into three subtasks: first, find the maximum, then, find the minimum, and finally, find the difference between the maximum and the minimum.</p> <p>From the previous lecture, you already know how to find the maximum and the minimum (from Problem 2.2). So, in expressing the algorithm to find the range, we can refer to a previous solution to a sub-problem, which we assume we already know how to solve.</p> <p>Let's call our solution to find the maximum value from a given list \\(L\\) as \\(max\\).  \\(max\\) takes as input (i) a list \\(L\\) and (ii) \\(k\\), the number of integers in \\(L\\).  It produces, or returns, the maximum value among the integers in \\(L\\).  Borrowing from mathematical notation, we use the notation \\(max(L, k)\\) to represent the maximum value of \\(L\\).  Note that, now, we no longer worry about \\(i\\) and \\(m\\) -- these two variables are now internal, or local, to \\(max(L,k)\\).</p> <p>Suppose that \\(min(L,k)\\) returns the minimum value among the integers in \\(L\\), then, the algorithm to find the range of \\(L\\) can be written in a single line:</p> \\[max(L, k) - min(L, k)\\]"},{"location":"notes/03-func.html#functions","title":"Functions","text":"<p>\\(max\\) and \\(min\\) are examples of a powerful and important concept with many names: function, procedure, subroutine, method, subprogram<sup>1</sup>.  In the context of CS1010, we will use the term function.  Functions allow us to solve a problem by thinking about the solution at a higher level.  We are no longer concerned with the implementation details. </p> <p>For instance, in the example above, we no longer have to think about checking through the items in the list one by one and maintaining the maximum so far or the minimum so far.  We just have to think about how to compute the range, assuming that we already know how to compute the maximum and the minimum value.</p> <p>Such an assumption, that we already know how to solve a subproblem, is known as wishful thinking.  Sometimes, it is useful to solve a problem assuming that you know how to solve the subproblem first and worry about solving the subproblem later.</p> <p>For instance, consider the following problem: Given a finite list of \\(k\\) integers (\\(k &gt; 0\\)), find the mean.</p> <p>The algorithm again can be written in one line:</p> \\[sum(L, k) / k\\] <p>if we assume that we have a function \\(sum\\) that can help us find the total of all \\(k\\) integers.  It turns out, in this case, that you should also know how to solve the subproblem \\(sum\\) from Problem 2.3.</p> <p>We can then make this into a function itself, \\(mean(L, k)\\), which we can now use to solve other more complex problems.</p> <p>Thinking in terms of functions also has another advantage: given a function, we only need to worry about what it does, but not how it is done.   In the \\(max(L,k)\\) example above, we do not care if it scans the list \\(L\\) from \\(l_0\\) to \\(l_{k-1}\\), or from \\(l_{k-1}\\) to \\(l_0\\).  We can treat a function as a black box with well-defined behavior -- given one or more inputs, it will produce a value satisfying certain conditions, i.e., it solves a computational problem.</p> <p>Many programming languages, including C which we will be using in CS1010, come with a rich set of predefined functions that we can use to help us solve computational problems.  In CS1010, we will also provide you with some functions to help you with your lab assignments.  You will also define your own functions when solving problems with C.  In fact, a C program is just a collection of functions calling each other.</p> <p>Note, however, that in C, a function is more general than the description above: a C function may not take in any input, and it may not return any value.</p> <p>Before we continue, let's simplify the functions we have written so far.  Let's suppose that we have another function \\(len(L)\\) that takes in a list as an input, and returns the number of items in the list.  With this function, we can remove \\(k\\) as one of the inputs to the function \\(max\\), \\(min\\), \\(sum\\) and \\(mean\\).   Instead of defining \\(mean(L, k)\\) to be \\(sum(L, k)/k\\), we can define the function to be \\(mean(L) = sum(L)/len(L)\\).  We can define \\(k\\) to be a local variable within \\(max\\), \\(min\\), and \\(sum\\).  We initialize \\(k\\) before we compute the respective answers.</p>"},{"location":"notes/03-func.html#problem-finding-standard-deviation","title":"Problem: Finding Standard Deviation","text":"<p>Let's look at another problem: Given \\(L\\), a finite list of \\(k\\) integers (\\(k \\ge 1\\)), find the standard deviation of the integers in \\(L\\).</p> <p>First, recall that the (population) standard deviation is given by</p> \\[\\sqrt{\\frac{\\sum_{i=0}^{k-1} (l_i - \\mu)^2}{k}}\\] <p>where \\(\\mu\\) is the mean of the integers in \\(L\\).</p> <p>To compute the standard deviation, we first need to compute \\(\\mu\\), the mean.   We already know how to do that: \\(mean(L)\\).  Then, we need to compute \\(\\sum_{i=0}^{k-1} (l_i - \\mu)^2\\).  We can break it down into two subproblems:</p> <ul> <li>Given a list \\(L\\) and a constant value \\(x\\), subtract \\(x\\) from every number in \\(L\\), giving us a new list.</li> <li>Given a list, square every number in the list, giving us a new list.</li> </ul> <p>For now, let's apply wishful thinking and assume that we know how to compute the above two steps with functions \\(subtract(L, x)\\) and \\(square(L)\\), then, the formula \\(\\sum_{i=0}^{k-1} (l_i - \\mu)^2\\) can be computed by the following steps:</p> <ul> <li>set \\(\\mu\\) to \\(mean(L)\\)</li> <li>set \\(L'\\) to \\(subtract(L, \\mu)\\)</li> <li>set \\(L''\\) to \\(square(L')\\)</li> <li>set \\(total\\) to \\(sum(L'')\\).</li> </ul> <p>We can also write it in one line:</p> <ul> <li>set \\(total\\) to \\(sum(square(subtract(L, mean(L))))\\)</li> </ul> <p>Now, to compute the standard deviation, we need to divide \\(total\\) by \\(len(L)\\) and find the square root.  But, finding \\(total\\) and dividing the result by \\(len(L)\\) is just \\(mean\\).  To compute the square root, we again apply wishful thinking and assume that there is a function \\(sqrt\\) to do so.</p> <p>We can now compute the standard deviation with one line:</p> \\[sqrt(mean(square(subtract(L, mean(L)))))\\] <p>Using functions, we can easily pass the output from one function as input to another, essentially chaining the functions together, like Lego blocks, to solve problems.  We also see an example of reuse here -- \\(mean\\) is used twice with different inputs.</p> <p></p> <p>Returning a list</p> <p>The above one-liner might seem to be an elegant solution.  When we implement this in C later, it will not be so simple and elegant.  Particularly, it is not trivial to return a list from a function in C.  But, let's worry about that later.</p> <p>Now that we have seen how to compute standard deviation by breaking it down the four subproblems, \\(sqrt\\), \\(mean\\), \\(square\\), and \\(subtract\\), we have to make sure that things we wish can be done can actually be done.  The C library, and many programming languages, provide a pre-defined method to compute \\(sqrt\\).  We already know how to compute \\(mean\\).  Computing \\(square\\) can be done as follows:</p> <p></p> <p>The implementation of \\(subtract\\) is similar.</p>"},{"location":"notes/03-func.html#writing-good-functions","title":"Writing Good Functions","text":"<p>To make the functions that you write reusable and composable, you should create your functions in such a way that it does one thing and one thing only.   For instance, consider a different design of the solution above, where we write a function called \\(substract_mean(L)\\), which both calculates the mean of the items in \\(L\\) and then subtracts it from every element in \\(L\\) (doing two things).  We could still compute the standard deviation with:</p> \\[sqrt(mean(square(subtract_mean(L))))\\] <p>However, we still need another function \\(mean\\) that duplicates part of what \\(subtract_mean\\) is doing.  Furthermore, suppose we want to subtract a value other than the mean of the elements in the list, then we would need to write another method \\(subtract_X\\), and we would duplicate part of what \\(subtract_mean\\) is doing as well.  Instead of having the same code that performs the same thing in two different functions, it is better to avoid repeating ourselves<sup>1</sup> and write simpler functions that perform only one task.</p> <p>A second guideline to writing good functions is that your function should take in all the necessary arguments and only the necessary ones.  Consider \\(mean(L)\\) as an example.  An earlier design of this function takes in the length \\(k\\) as well: \\(mean(L,k)\\).  But is \\(k\\) necessary?  </p> <p>Suppose in our usage of \\(mean\\), we may not want to compute the mean for all the elements in the list \\(L\\), but only the mean of the first \\(k\\) elements.  Then, having \\(k\\) as a input to \\(mean\\) makes our \\(mean\\) function more flexible.  On the other hand, suppose that we are very sure that \\(mean\\) will only be called to compute the mean of all the elements in \\(L\\), and we can derive \\(k\\) from \\(L\\), then \\(k\\) is no longer a necessary input.  We can simplify the inputs to \\(mean\\) from \\(mean(L,k)\\) to just \\(mean(L)\\). </p>"},{"location":"notes/03-func.html#another-two-solutions-for-finding-maximum","title":"Another Two Solutions for Finding Maximum","text":"<p>In the previous lecture, you have seen an algorithm to find the maximum value from a list of integers, which involves checking the elements one by one and keeping track of the maximum value so far.</p> <p>Now that we have seen what a function is, we can use the concept of wishful thinking to help us solve this problem differently and more elegantly.</p> <p>Let's suppose that we have a function \\(max'(L, i, j)\\), that finds the maximum integer among the elements \\(l_i, l_{i+1}, ... l_j\\).  The function \\(max(L, k)\\), which finds the maximum among all elements of \\(L\\), is, therefore, the same as \\(max'(L, 0, k-1)\\).</p> <p>Do we know how to solve \\(max'(L, i, j)\\) without checking the integers in \\(L\\) one by one?  Well, if \\(i\\) equals \\(j\\), i.e., there is only one element in the range of \\(l_i, ..., l_j\\), then yes, the function should simply return the value of \\(l_i\\).</p> <p>But, what if there are multiple elements in the range? (i.e., \\(i &lt; j\\))?  By wishful thinking, we assume that we already know how to solve smaller (as in a shorter list) problem -- \\(max'(L, i+1, j)\\), so the maximum value for the range of \\(l_i, ..., l_j\\) is the larger of the two: either \\(l_i\\) or \\(max'(L, i+1, j)\\).  We can express this algorithm as follows:</p> <p></p> <p>Let's trace through the algorithm above, using our previous example: <code>4 1 -4 0 9 9 3 5 8</code>.  Given this list, we compare the first element, <code>4</code>, with the maximum of the rest of the list <code>1 -4 0 9 9 3 5 8</code>, computed with \\(max'(L, 1,8)\\).  With wishful thinking, we know how to solve \\(max'\\) already -- we get \\(max'(L,1,8)\\) = <code>9</code> as the maximum value of <code>1 -4 0 9 9 3 5 8</code>.  Comparing <code>4</code> and <code>9</code>, <code>9</code> is larger. Thus, the maximum of the whole list is <code>9</code>.</p> <p>The solution above involves \\(max'\\) calling itself once to solve the problem.  It breaks the problem of finding the maximum in a list of \\(k\\) items into the problem of finding the maximum in a list of \\(k-1\\) items.</p> <p>Now, let's consider a second possibility.  What if we break the list into two lists of (roughly) equal length?   Let's consider the example <code>4 1 -4 0 9 9 3 5</code>.  We keep the list to eight items this time so that it is neater.  We can break the list into two smaller lists: <code>4 1 -4 0</code> and <code>9 9 3 5</code>.  By wishful thinking, we know how to find the maximum among <code>4 1 -4 0</code> (which is <code>4</code>) and <code>9 9 3 5</code> (which is <code>9</code>).  What remains is just to pick the larger of the two and we have the maximum of the two lists!</p> <p>Given \\(max'(L, i, j)\\), if we let \\(n = \\left\\lfloor(i+j)/2\\right\\rfloor\\), then we can solve \\(max'(L,i,j)\\) by solving two smaller, almost equally sized, sub-problems, \\(max'(L,i,n)\\) and \\(max'(L,n+1,j)\\).</p> <p>We can express this algorithm as follows:</p> <p></p> <p>This problem-solving technique is called divide-and-conquer.  You will see this technique again many times in CS1010, CS2040C, CS3230, and the rest of your computing career.  A nice property of this technique is that, if we have more than one processing unit, we can ask them to compute \\(max'(L,i,n)\\) and \\(max'(L,n+1,j)\\) in parallel, and thus getting the answer we are looking for, earlier!</p>"},{"location":"notes/03-func.html#example-finding-a-factorial","title":"Example: Finding a Factorial","text":"<p>Let us look at another example of a function before we move on to another topic.  Suppose we want to write a function \\(factorial(n)\\) for an integer \\(n\\) (\\(n \\ge 0\\)) that computes \\(n!\\). Recall that \\(n! = n \\times n - 1 \\times n - 2 \\times ... 2 \\times 1 = n \\times (n-1)!\\).  As a special case, \\(0!\\) is defined to be \\(1\\).</p> <p>The algorithm to do this can be expressed by the following diagram:</p> <p></p> <p>Let's look at an example.  Let's say we want to compute \\(factorial(4)\\).  We assume we know how to solve this for a smaller problem --  \\(factorial(3)\\), which is 6.  \\(factorial(4)\\) is thus 4 \\(\\times\\) 6, i.e., 24.</p>"},{"location":"notes/03-func.html#recursion-function-calling-itself","title":"Recursion: Function Calling Itself","text":"<p>\\(max'\\) and \\(factorial\\) are examples of functions that call themselves to solve a simpler version of the problem.  This is known as recursion.  We will revisit this concept in much greater detail in the later part of CS1010.</p>"},{"location":"notes/03-func.html#problem-set","title":"Problem Set","text":""},{"location":"notes/03-func.html#problem-31-getting-mad","title":"Problem 3.1: Getting MAD","text":"<p>The mean absolute deviation, or MAD, of a set of integers measures how spread out a set of data is.  The absolute deviation is the absolute difference between an element in the list with the mean of values of the list.  The mean absolute deviation is the mean of all the absolute differences.  In other words, given \\(L = \\{l_0, ... l_{k-1}\\}\\), the MAD of \\(L\\) is:</p> \\[\\frac{\\sum_{i=0}^{k-1} |l_i - \\mu|}{k}\\] <p>How do you find MAD by composing various functions we have seen?  Do you need a new function?</p>"},{"location":"notes/03-func.html#problem-32-ownself-calls-ownself","title":"Problem 3.2: Ownself calls ownself","text":"<p>(a) Give an algorithm for finding the sum of all the integers in the list \\(L\\) with \\(k\\) (\\(k &gt; 0\\)) integers that is recursive.</p> <p>(b) The function \\(pow(i, j)\\) computes \\(i^j\\).  Give an algorithm to compute \\(pow(i, j)\\) recursively.</p> <ol> <li> <p>In software engineering, there is a name for this principle: DRY, which stands for don't repeat yourself.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"notes/04-type.html","title":"Unit 4: Types","text":""},{"location":"notes/04-type.html#learning-outcomes","title":"Learning Outcomes:","text":"<p>After this unit, students should:</p> <ul> <li>understand the concept of type as a way to interpret the meaning of bits in the memory;</li> <li>be able to calculate the number of different possible values that can be represented by a given number of bits;</li> <li>understand that different types require a different number of bits for representation;</li> <li>be aware that real numbers may not be represented precisely in a computer, and so real numbers should never be used as a type of an integer value;</li> <li>be aware that C is a statically-typed language, in contrast to Python and Javascript, which are dynamically typed;</li> <li>be aware that the type for all C variables and functions must be declared;</li> <li>be aware that choosing the wrong type could lead to an incorrect implementation of an algorithm.</li> </ul>"},{"location":"notes/04-type.html#bits-and-bytes","title":"Bits and Bytes","text":"<p>Recall from Unit 1 that machine code and data manipulated by machine code are all stored as a sequence of binaries, 1s and 0s, in the memory.  Each unit of either 1 or 0 is known as a bit.  8 bits form a byte.</p> <p>Remember from Unit 2 that the value of a variable is stored in a memory location as a sequence of bits.  These bits have to be interpreted by the machine code to be given a meaning.  Does a sequence of 1s and 0s represent an integer?  A pixel of an image?  A sound sample in an audio clip?  A month?  As a programmer, we have to tag the variable with its type, so that the machine code knows how to interpret the sequence of bits.  In addition, the type also tells the machine code, how many bits \"belong\" to this variable.  The number of bits of a type is also known as the size of a type.</p> <p>For instance, consider the following binary sequence stored in memory: <code>10011111 01101100 00100111 10111000</code>.   If all 32 bits of this binary sequence are interpreted as an integer, it would give the value 111441400.  If all 32 bits of this sequence are interpreted as a floating point number, it would give the value 3.1416!  If only the first 8 bits of this binary sequence <code>10011111</code> are interpreted as an integer, it would give the value 159.  You will learn more about how different types are represented in binary in later modules.</p> <p>The size of a type also determines how many different values a variable of that type can hold.  For instance, a type of one bit can only hold two possible values (e.g., <code>0</code> or <code>1</code>, <code>true</code> or <code>false</code>, <code>black</code> or <code>white</code>).  A type of two bits can hold four values, represented as <code>00</code>, <code>01</code>, <code>10</code>, <code>11</code>.  In general, a type of \\(k\\) bits can hold \\(2^k\\) values.</p>"},{"location":"notes/04-type.html#integers","title":"Integers","text":"<p>To represent integers, a type of 8 bits can represent 256 different values.  If the type only represents non-negative integers (called <code>unsigned</code>), then it can hold any value between 0 to 255.  If it represents both positive and negative integers (called <code>signed</code>), it can hold any value between -128 to 127.  Depending on the needs (how much memory we have, how big is the number we need to represent), programmers have to decide on the size of the type used for a variable in their programs.  With 64 bits, a signed integer can store any value between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.  This might look big enough for you -- but we can't even fit the results from \\(factorial(21)\\) here!</p>"},{"location":"notes/04-type.html#characters","title":"Characters","text":"<p>To represent a character (i.e., a symbol representing a letter, number, punctuation, etc), we use 8 bits for English characters.  The ASCII standard maps 127 binary sequences to common characters you can type on your keyboard (including 0-9, A-Z, a-z, all sorts of punctuations: &lt;&gt;?:\"{}!@#$%^&amp;*()_+-=[]\\';/., and special characters like return and escape).  The Unicode standard uses up to 32 bits per character, allowing many non-English letter characters (e.g., Emoticons, Braille, Mahjong Tiles) to be represented.</p>"},{"location":"notes/04-type.html#real-numbers","title":"Real Numbers","text":"<p>For real numbers, because we need to represent a huge number of possible values, we normally use 32 bits or 64 bits.  In CS1231, you will learn that there are uncountably many possible real numbers.  But, no matter how many bits we use, we can only represent a finite number of possible values for real numbers.  Here, we run into a limit of digitizing information into 0s and 1s -- we can never represent all possible real numbers in a computer!  Because of this, programs that manipulate real numbers lead to weird answers (such as 1.1 + 2.2 becomes 3.3000000000000003) and so, we have to take special care when dealing with real numbers when writing programs (not just in C, but in many other languages as well).  Hence, if we only expect a variable to hold an integer, we should not choose a type that represents real numbers.</p> <p>You should have also noticed that in the discussion above, we talk about types that are 8, 16, 32, 64, and 128 bits -- all power of twos.  We do not have a type of size, say, 41 bits.  The reason for this has to do with how memory location is addressed.  This will again be explained in CS2100.</p>"},{"location":"notes/04-type.html#compound-types","title":"Compound Types","text":"<p>In programming, we can represent more complex concepts with compound types (also called composite types or aggregate types) that consist of primitive types such as integers, real numbers, and characters.  A sentence, for instance, can be represented as a sequence of characters (called a string).  A point, for instance, can be represented by a pair of real numbers \\((x,y)\\).  </p> <p>It is also possible for a compound type to be made up of different primitive types.  For instance, a type that represents a typical address in Singapore consists of a block number (a string), a floor (an integer), a unit number (an integer), and a street address (a string).</p>"},{"location":"notes/04-type.html#type-declaration","title":"Type Declaration","text":"<p>In C, which we will use in CS1010, we have to associate every variable with a type, and once a variable is declared with a type, the type cannot be changed.</p> <p>This behavior is known as static typing.  Some programming languages, such as Javascript and Python, are dynamically typed.  The type of a variable may change depending on the value the variable is assigned to.  </p> <p>When we write a function, we have to declare the types of each of the parameters and the return value as well.  </p> <p>Take the function \\(mean(L, k)\\) as an example.  We have said that \\(L\\) is a list<sup>1</sup> of integers.  So each element in \\(L\\) should have an integer type (how many bits to use will depend on the range of numbers we want the program to possibly handle and how frugal we are about memory usage).  What about \\(k\\)?  \\(k\\) refers to the number of elements in \\(L\\), so it has to be an integer.  As for the value returned by \\(mean(L, k)\\), even when the inputs are all integers (and thus, the sum is an integer), the mean value can be a real number.  So we should choose a type that represents a real number for the return value.  </p> <p>Importance of Type</p> <p>Choosing the wrong type to represent a variable can lead to buggy code.  Suppose we say that \\(mean(L, k)\\) returns an integer, then when we call \\(mean\\) on the input <code>1 2 3 4</code>, we will get <code>2</code> as the answer, instead of <code>2.5</code> as it should.</p> <ol> <li> <p>We have not talked about how to represent a list yet.  I will do that in a later unit.\u00a0\u21a9</p> </li> </ol>"},{"location":"notes/05-first-c.html","title":"Unit 5: First C Program","text":""},{"location":"notes/05-first-c.html#learning-objectives","title":"Learning Objectives:","text":"<p>After this unit, students should:</p> <ul> <li>be able to define functions in C, including the definition of:<ul> <li>the function name,</li> <li>the parameters of the function,</li> <li>return statement type,</li> <li>the body of the function, and</li> <li>the return statement;</li> </ul> </li> <li>understand the usage of the main function in C programs;</li> <li>be able to make function calls in C programs;</li> <li>understand how values are assigned to the parameters of functions;</li> <li>understand the concept of variable scope;</li> <li>be able to write statements in C programs, including:<ul> <li>variable declarations,</li> <li>assignment statements, and</li> <li>statements that include simple expressions (e.g., arithmetic expressions);</li> </ul> </li> <li>understand the need and the purpose of including header files;</li> <li>be aware of the different numeric types in C and their respective value ranges;</li> <li>be able to use man to lookup information about functions provided by other C libraries</li> <li>be aware that CS1010 bans the use of global variables and only allows <code>long</code> and <code>double</code> as numeric types.</li> </ul>"},{"location":"notes/05-first-c.html#your-first-c-function","title":"Your First C Function","text":"<p>In this unit, we will write and compile your first C program.  You have already learned, conceptually, what is a variable, what is a type, and what is a function.  Let's see how we apply these concepts to C.</p> <p>To start, let's look at a simple snippet of C code:</p> A trivial function to square an integer<pre><code>int square(int x)\n{\n  return x * x;\n}\n</code></pre> <p>The code above defines a function named <code>square</code>.  The word <code>int</code> appears before the name <code>square</code>.  <code>int</code> is used to signify an integer type.  Appearing before the name <code>square</code> tells the compiler that <code>square</code> is returning a value of type <code>int</code>.</p> <p>After the word <code>square</code>, we write the parameters to the function in parentheses <code>(</code> and <code>)</code>.  In between <code>(</code> and <code>)</code> is <code>int x</code>: <code>x</code> is the name of the parameter, <code>int</code> is the type of that parameter.  Here, <code>x</code> is a variable that stores the value that we wish to compute the square of.</p> <p>To summarize, in Line 1, <code>int square(int x)</code> defines a function named <code>square</code> that takes in an integer parameter <code>x</code> and is returning a value, which is also an integer.  This line is known as the header of the function.</p> <p>The next three lines are written in between curly brackets <code>{</code> and <code>}</code>.  You will see these used a lot in C and other programming languages with C-like syntaxes, such as JavaScript, C++, and Java.  These curly brackets group a block of statements together.  In this example, this block defines how the function <code>square</code> computes the square of <code>x</code>, and what it returns.  This is the body of the function.</p> <p>In this function body, there is only one statement <code>return x * x;</code> within the block.  A statement is a unit in a programming language that expresses either a command to be executed or declares a new variable or function.  The word <code>return</code> says that this function <code>square</code> should return the following value, computed as <code>x * x</code> (<code>x</code> multiply by <code>x</code>).  This statement is terminated by a semicolon <code>;</code>.</p> <p></p> <p>You also see that the line that starts with <code>return</code> is indented.  We use indentation extensively to indicate the body of a block.  Since we can have nested blocks, indentation makes our code easier to read and understand.</p> <p>The words <code>int</code> and <code>return</code> that appear above are keywords defined in the C programming language, and they are reserved for the special meaning that they represent (a type and a command to return a value from a function).  We cannot repurpose keywords in C.  For instance, we cannot introduce a variable called <code>int</code>.</p>"},{"location":"notes/05-first-c.html#your-first-c-program","title":"Your First C Program","text":"<p>We are now ready to write our first C program.  The first program computes the square of the hypotenuse of a right-angled triangle with a base of 4 and a height of 3.</p> Calculating the hypotenuse of a triangle with base 4 and height 3.<pre><code>int square(int x)\n{\n  return x * x;\n}\n\nint main()\n{\n  int hypotenuse_square;\n\n  hypotenuse_square = square(3) + square(4);\n  return 0;\n}\n</code></pre> <p>Remember that a C program consists of a bunch of functions, calling each other.  The most important function is called <code>main</code>, and it is the entry point to the program.  It is where the operating system will begin to execute the program.  Every program must define exactly one function called <code>main</code>.</p> <pre><code>int main()\n{\n  :\n}\n</code></pre> <p><code>main</code> returns an integer of type <code>int</code> to the operating system, to signal to the operating system whether the program exits successfully or not.  In this case, we always return <code>0</code> (success) assuming that nothing goes wrong for simplicity.  This is the second example where you see the keyword <code>return</code> in action.</p> <p>In modern C, the <code>main</code> function always returns 0 when it exits.  So, we will skip this statement <code>return 0;</code> from the <code>main</code> function from now on.</p>"},{"location":"notes/05-first-c.html#variable-declaration","title":"Variable Declaration","text":"<p>In the example above, you also see the lines</p> <pre><code>int hypotenuse_square;\n</code></pre> <p>This is a declaration statement (terminated with a semicolon, again).  Each statement declares a variable with its corresponding type (<code>int</code> here).  We gave each variable a name, here we call the variable <code>hypotenuse_square</code>.</p> <p>We have said in Unit 2 that a variable is a location in memory that holds a value.  There are two main approaches to access this value.  The first is through the address of the memory location.  We will examine this way of accessing a value in great details in Unit 15.  The second approach, which is much more direct and convenient, is to give this location a descriptive variable name, and access the value through its name.  The latter approach is what we will use most of the time.</p> <p>All variables must be declared with its corresponding type before used in C.  Indicating the type during declaration lets the computing device running the program knows how much memory should be reserved for the value of this variable, and subsequently, how to interpret the binary sequence stored associated with this variable. </p> <p>Each declaration is valid only within the scope of its declaration.  A variable is only visible within the innermost block that encloses the declaration, as specified by the <code>{</code> and <code>}</code>.</p> <p>In the example above, the variable <code>hypotenuse_square</code> is visible only in the body of <code>main</code>, but not in the body of <code>square</code>.</p> <p>We cannot re-declare the same variable (i.e., with the same name), with the same type or otherwise, within the same scope.  Two variables in different blocks, however, are allowed to have the same name.</p> Example of variable redeclaration.<pre><code>int main()\n{\n  int hypotenuse_square;\n\n  hypotenuse_square = square(3) + square(4);\n  int hypotenuse_square; // &lt;-- redeclaration\n  return 0;\n}\n</code></pre> <p>Compiling the code above would lead to an error on Line 7.</p> <p>Compilation Error vs. Run-Time Errorr</p> <p>Errors that occur during compiling is called \"compilation error\".  In constrast, errors that occured during execution  of a program is called a \"run-time error\".</p> <p>The C language allows the declaration of a variable outside any block.  In this case, the scope of the variable is the entire file -- which means that the variable can be accessed and modified from anywhere in the code.  Such a variable is called global variable.</p> Example of a global variable<pre><code>int square(int x)\n{\n  return x * x;\n}\n\nint hypotenuse_square; // &lt;- global variable\n\nint main()\n{\n  hypotenuse_square = square(3) + square(4);\n  return 0;\n}\n</code></pre> <p>While C allows global variables to be declared and used, the use of global variables is banned in CS1010.  CS1010 allows only a subset of C to be used.  Particularly, C features that are common pitfalls for beginners and bug-prone are banned.  This is so that we can focus this module on problem-solving techniques, rather than the idiosyncrasy of C.</p>"},{"location":"notes/05-first-c.html#function-declaration","title":"Function Declaration","text":"<p>In C, a function must be either defined or declared before used as well.  In the example above, we define <code>square</code> before <code>main</code>.  If we switch the order of the two, the compiler will complain,  unless we declare the function first.  Declaring a function means that we simply state the return type, the name, and the parameters, without the body.  Here is an example:</p> Declaring a function square before its use and its definition<pre><code>int square(int x); // declaring the function square\n\nint main()\n{\n  int hypotenuse_square;\n\n  hypotenuse_square = square(3) + square(4);\n  return 0;\n}\n\nint square(int x)  // defining the function square\n{\n  return x * x;\n}\n</code></pre>"},{"location":"notes/05-first-c.html#assignment-statement","title":"Assignment Statement","text":"<p>The next line of the code shows an example of an assignment statement.</p> <pre><code>  hypotenuse_square = square(3) + square(4);\n</code></pre> <p>An assignment operator takes the form of:</p> <pre><code>left_hand_side = right_hand_side;\n</code></pre> <p>The <code>left_hand_side</code> must be the name of a variable.  We first evaluate the <code>right_hand_side</code> of the assignment statement, find its value, then assign the value to the variable named on the <code>left_hand_side</code>.  Essentially, this step updates the bits in the memory location reserved for the variable <code>left_hand_side</code> to the given value.</p> <p>Here, on the right-hand side, we call the function <code>square</code>, which we defined earlier.  We call <code>square</code> with arguments <code>3</code> and <code>4</code> respectively.  When we call <code>square</code> with argument <code>3</code>, we are assigning the parameter <code>x</code> to a value <code>3</code> before we execute the body of <code>square</code>.</p> <p>We use the operator <code>+</code> to add the two results together.  The right-hand side should give the value 25, which we then assign to the variable <code>hypotenuse_square</code>.</p> <p>Note that we use <code>=</code> equal sign for assignment, NOT for checking equality.  The C notation for checking for equality is <code>==</code> (we will come back to this later).</p> <p>All variables must have an assigned value before it is evaluated.  Otherwise, the variable holds an indeterminate value.  Declaring a variable only reserves the slot in the memory.  The value of an uninitialized variable is therefore determined by whatever bit values that happen to occupy that memory slot at the time.</p>"},{"location":"notes/05-first-c.html#recap","title":"Recap","text":"<p>Before we move on, let's recap some concepts:</p> <ul> <li>A C program consists of functions, invoking each other.  The function called <code>main</code> is the entry point and is the first function invoked.</li> <li>Each function is defined by its returned type, followed by its name, its parameter(s) (within a pair of parenthesis), and its body (within a pair of curly brackets).  </li> <li>Each function must be defined or declared before it is used.  </li> <li>The function body consists of one or more statements.  We have seen assignment statements (using the <code>=</code> operator) and return statements, using <code>return</code> as the keyword.</li> <li>Each variable must be declared before it is used.  A declaration starts with its type followed by its name.  A variable is only visible within its scope.  A variable must be assigned a value before it is evaluated.</li> <li>Global variables are banned in CS1010.</li> </ul>"},{"location":"notes/05-first-c.html#example-2","title":"Example 2","text":"<p>Let's change the program slightly, so that instead of computing the square of the hypotenuse, we compute the hypotenuse itself.  Recall that we said C provides a bunch of predefined functions, include <code>sqrt</code>, which computes the square root of a given number.  Since a square root of a number is not necessarily an integer, we need to use a variable with a type that can store a real number.</p> <p>To represent real numbers, we commonly use the type <code>float</code> (which is short for a floating-point number -- named so due to how a real number is represented in bits).  A <code>float</code> type can store 32 bits.  To double the precision (64 bits), we can use the type <code>double</code>.  A <code>long double</code> type can store either 80-bits or 128-bits, depending on the implementation.</p> <p>But which one does <code>sqrt</code> returns?  To find out the exact specification of a pre-defined function, we can consult the manual (or <code>man</code> for short) pages for the function.</p> <p>If you type <code>man sqrt</code> on the command line (or place the cursor on <code>sqrt</code> in <code>vim</code> and type Shift+K in command mode), you will see that the <code>sqrt</code> method has the following specification:</p> <pre><code>double sqrt(double x);\n</code></pre> <p>The <code>sqrt</code> function returns a <code>double</code> precision real number.  We can now modify the program above to the following:</p> Declaring a function defined externally<pre><code>double sqrt(double x); // not recommended\n\nlong square(long x)\n{\n  return x * x;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  return sqrt(square(base) + square(height)); // with warning\n}\n\nint main()\n{\n  hypotenuse_of(3, 4);\n}\n</code></pre> <p>Note that the first line declares the function <code>sqrt</code> because we need to declare a function before it is used.  Since <code>sqrt</code> is pre-defined elsewhere, we do not have to supply the function body here.  Such practice of declaring a predefined function ourselves, however, is not recommended.  Different platforms, compilers, libraries, may provide a different specification for the same function.  As such, it is better to use the declaration from the library that provides the predefined function itself.  A library usually provides one or more header files, a set of files that contain function declarations, type definitions, and constant definitions.  In the case of <code>sqrt</code>, its declaration is contained in a header file called <code>math.h</code> (which we found out through consulting the <code>man</code> pages).  To include this file, you add the line <code>#include &lt;math.h&gt;</code> at the top of the program.</p> Including header files for declaration of external functions<pre><code>#include &lt;math.h&gt;\n\nlong square(long x)\n{\n  return x * x;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  return sqrt(square(base) + square(height)); // with warning\n}\n\nint main()\n{\n  hypotenuse_of(3, 4);\n}\n</code></pre> <p>File Extension</p> <p>The convention for file extension for a C program is <code>.c</code> and for a C header file is <code>.h</code>.  Even though you are allowed to name the files with any extension you like, you should stick to the convention so that it is clear to other tools/programmers what is the purpose of each file.</p>"},{"location":"notes/05-first-c.html#compilation-warning-and-implicit-type-conversion","title":"Compilation Warning and Implicit Type Conversion","text":"<p>The compiler gives a warning on the expression: <pre><code>  sqrt(square(base) + square(height))\n</code></pre></p> <p>The warning says <code>implicit conversion from 'long' to 'double' may lose precision [-Wimplicit-int-float-conversion]</code>.</p> <p>Recall that we cannot represent floating point numbers (<code>double</code>) exactly in a computer; but we can do that with integers (<code>long</code>). Since the expression <code>square(base) + square(height)</code> returns a <code>long</code> value, and we try to pass it into a function that accepts a <code>double</code>, the compiler warns us about loosing precision.</p> <p>A compiler warning does not stop a binary executable from being generated and executed later.  It is a good practice, however, to ensure that your code compiles without any warning.  In this context, the compiler will convert the integer number into floating point number for you.  This conversion from <code>long</code> to <code>double</code> is done implicitly.</p> <p>When writing code, it is always better to make the intention explicit.  Thus, to perform an explicit type conversion, we can do type casting in C.  We just need to put the type that we want to convert to in parentheses, like so: <pre><code>  long sum_of_square = square(base) + square(height);\n  sqrt((double)sum_of_square);\n</code></pre></p> <p>Since we now explicitly tell the compiler that we want to convert <code>long</code> to <code>double</code> (and so willing to accept the lost in precision), the warning goes away.</p> <p>Here is the final code: Explicitly casting from long to double<pre><code>#include &lt;math.h&gt;\n\nlong square(long x)\n{\n  return x * x;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  long sum_of_square = square(base) + square(height);\n  return sqrt((double)sum_of_square);\n}\n\nint main()\n{\n  hypotenuse_of(3, 4);\n}\n</code></pre></p>"},{"location":"notes/05-first-c.html#other-types-in-c","title":"Other Types in C","text":"<p>An <code>int</code> variable is usually 32-bits long.  If we only need 16 bits, we use the type <code>short int</code>, or just <code>short</code>.  If we only need 8-bits, we use the type <code>char</code> (short for character).</p> <p>Note that the above said an <code>int</code> is usually 32 bits.  Remember (from Unit 1) that a C program gets compiled into machine code for a specific CPU architecture.  The C language standard only guarantees that an <code>int</code> is at least 16 bits.  Although most C compilers compile <code>int</code> to 32 bits, there is no guarantee!</p> <p>If we need something more than an <code>int</code>, we can use <code>long int</code>, or just <code>long</code>.  The C standard guarantees that a <code>long</code> is at least 32 bits.  Depending on the implementation, it sometimes compiled to 32-bits, sometimes 64-bits.  To get even longer, we can use the type <code>long long int</code>, or just <code>long long</code>, which is guaranteed to be at least 64 bits<sup>1</sup>.</p>"},{"location":"notes/05-first-c.html#signed-vs-unsigned","title":"Signed vs. Unsigned","text":"<p>We have seen earlier that interpreting the same sequence of bits as signed or unsigned would result in a different value.  By default, all types in C refer to signed types<sup>2</sup>.  If you want a variable that holds only non-negative integers, you can add the keyword <code>unsigned</code> to the front of the type.  Doing so would mean that the range of non-negative values you can store in the variable is doubled, without adding more bits (since the bit used to present the + or - sign is no longer needed).</p> <p>For instance, since we know that <code>square</code> can only return a non-zero integer, we can declare it as:</p> Redefining square with unsigned return type<pre><code>unsigned long square(long x)\n{\n  return x * x;\n}\n</code></pre> <p>For most practical purposes in CS1010, a (signed) <code>long</code> suffices.  We introduce the notion of <code>signed</code> vs. <code>unsigned</code> for your information so that you know what they are when you come across them in other scenarios.  Mixing <code>signed</code> and <code>unsigned</code> can lead to subtle bugs in your code.  As such, we will avoid mixing them as much as we can, and we will use signed <code>long</code> by default for CS1010.  You may choose to use them appropriately in another context, especially for an embedded system or low-level programming.</p> <p>In CS1010, we will only use <code>long</code> and <code>double</code> to represent integers and floating-point numbers.  Again, this is to allow us to focus on problem-solving techniques rather than on issues related to precision.  The only place we should use other types is if the functions that we use requires it (e.g., <code>main</code> must return <code>int</code>, so we have no choice there).</p> <p>Unsigned Real Numbers?</p> <p>There are no <code>unsigned</code> versions of <code>float</code> and <code>double</code>.  To understand the reason, we have to go further into how floating points numbers are represented in bits.  That is a topic for another module.</p> <p>C Pro Tips For Beyond CS1010: <code>stdint.h</code></p> <p>Since the number of bits for <code>int</code>, <code>long</code>, and <code>long long</code> could differ, to write a C program that is portable (i.e., works on different platforms, architecture, operating systems), we have two options:</p> <ul> <li>Do not write a program that assumes a specific number of bits is used for a certain type, or</li> <li>Use the type defined in the header file <code>stdint.h</code>: <code>int8_t</code>, <code>uint8_t</code>, <code>int16_t</code>, <code>uint16_t</code>, <code>int32_t</code>, <code>uint32_t</code>, <code>int64_t</code>, <code>uint64_t</code>.  The suffix <code>_t</code> is a convention to indicate that this is a customized type (more on this in later units).  The prefix <code>u</code> indicates that the type is an unsigned type.  The numbers <code>8</code>, <code>16</code>, <code>32</code>, and <code>64</code> indicate the number of bits for each type.  Thus, <code>uint32_t</code> is guaranteed to be of size 32 bits, and can hold unsigned integer values from \\(0\\) to \\(2^{32}-1\\).</li> </ul>"},{"location":"notes/05-first-c.html#problem-set-5","title":"Problem Set 5","text":""},{"location":"notes/05-first-c.html#problem-51","title":"Problem 5.1","text":"<p>In the following valid in C?  Try to compile the program and see if you encounter any compilation error.  What can you infer about what is allowed or not allowed in C?  What could go wrong even if C allows?</p> <p>(a) <pre><code>#include &lt;math.h&gt;\nlong square(long x)\n{\n  return x * x;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  return sqrt(square(base) + square(height));\n}\n\nint main()\n{\n  hypotenuse_of(3.0, 4.0); // &lt;- use 3.0 and 4.0 instead of int.\n}\n</code></pre></p> <p>(b) <pre><code>#include &lt;math.h&gt;\nlong square(long x)\n{\n  return x * x;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  return sqrt(square(base) + square(height));\n}\n\nint main()\n{\n  long h = hypotenuse_of(3, 4); // &lt;-- assign to a long variable\n}\n</code></pre></p> <p>(c) <pre><code>#include &lt;math.h&gt;\nlong square(long x)\n{\n  return x * x;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  return sqrt(square(base) + square(height));\n}\n\nint main()\n{\n  Hypotenuse_Of(3, 4); // &lt;-- use a different case\n}\n</code></pre></p> <p>(d) <pre><code>#include &lt;math.h&gt;\nlong square(long x)\n{\n  return x * x;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  long base; // &lt;-- declare a new base\n  return sqrt(square(base) + square(height));\n}\n\nint main()\n{\n  hypotenuse_of(3, 4);\n}\n</code></pre></p> <p>(e) <pre><code>#include &lt;math.h&gt;\nlong square(long x)\n{\n  long sqr = x * x; // &lt;-- declare and assign in one go\n  return sqr;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  return sqrt(square(base) + square(height));\n}\n\nint main()\n{\n  hypotenuse_of(3, 4);\n}\n</code></pre></p> <p>(f) <pre><code>#include &lt;math.h&gt;\n\nlong sqr;  // &lt;-- use global variable\nlong square(long x)\n{\n  sqr = x * x;\n  return sqr;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  return sqrt(square(base) + square(height));\n}\n\nint main()\n{\n  hypotenuse_of(3, 4);\n}\n</code></pre></p> <p>(g) <pre><code>#include &lt;math.h&gt;\n\nint main()\n{\n  long square(long x) // &lt;-- define function within function.\n  {\n    return x * x;\n  }\n\n  double hypotenuse_of(long base, long height) // &lt;--\n  {\n    return sqrt(square(base) + square(height));\n  }\n\n  hypotenuse_of(3, 4);\n}\n</code></pre></p> <ol> <li> <p>Adding more <code>long</code> does not make the integer longer, i.e., there is no <code>long long long int</code>.\u00a0\u21a9</p> </li> <li> <p>To be more precise, the C language standard does not specify the default sign-ness of <code>char</code> and leaves it to implementation.  In CS1010 programming environment, <code>char</code> defaults to <code>signed char</code>.\u00a0\u21a9</p> </li> </ol>"},{"location":"notes/06-cs1010-io.html","title":"Unit 6: The CS1010 I/O Library","text":""},{"location":"notes/06-cs1010-io.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>understand the notion of standard input (<code>stdin</code>) and output (<code>stdout</code>) channels in Unix;</li> <li>be able to use the various print and read functions available in <code>libcs1010</code> to perform I/O.</li> <li>be aware that there exist pitfalls in using <code>printf</code> and <code>scanf</code> functions provided by C, and students should only use these functions if they know what they are doing.</li> </ul>"},{"location":"notes/06-cs1010-io.html#interacting-with-users","title":"Interacting with Users","text":"<p>Our first C program that computes the hypotenuse doesn't do much -- it simply computes \\(\\sqrt{3^2 + 4^2}\\).  The value to be computed is hard-coded, and the result computed is not displayed.</p> <p>To make this program more general and useful, we need to do two things:</p> <ul> <li>We need to compute the hypotenuse for any length of the base and the height of a right-angled triangle.  Hard-coding the lengths in the program does not make the program useful.   Rather, we should read these values from the users.  </li> <li>We need to output the result of the computation to the users.  </li> </ul> <p>In other words, to make the program more general and useful, we need to perform input and output, or I/O, in our program.</p>"},{"location":"notes/06-cs1010-io.html#standard-input-and-standard-output","title":"Standard Input and Standard Output","text":"<p>Before we talk about how to read the input values and display the output values, we have to first talk about where the input comes from and where the output goes.</p> <p>In Unix-flavored operating systems, the input is read from an abstract channel called the standard input or <code>stdin</code> for short, and an output is sent to an abstract channel called the standard output or <code>stdout</code> for short.</p> <p>The fact that these channels are abstract is a powerful concept -- when we write our code, we do not have to worry about where the inputs come from and where the outputs go to.  It will depend on how the user runs our program.  Thus, it allows the users of our program the flexibility to control where the data comes from or goes.</p> <p>For instance, the standard input, by default, reads from the keyboard.  But the user can choose to read from a file, using the redirection <code>&lt;</code> operator from the command line or the output of another process, using the pipe <code>|</code> operator from the command line.  Similarly, the standard output, by default, writes to the terminal.  But the user can choose to write to a file using the redirection <code>&gt;</code> operator on the command line or to the input of another process, using the pipe <code>|</code> operator, again, on the command line when invoking the program.  You will see how cool these are later.  But for C programming, it suffices to know for now that we only need to read from <code>stdin</code> and write to <code>stdout</code> in our code, and we let the users decide where they come from / go to.</p>"},{"location":"notes/06-cs1010-io.html#no-printf-and-scanf-yet","title":"No <code>printf</code> and <code>scanf</code> (yet)","text":"<p>In almost all articles and textbooks on C that I have seen, the <code>scanf</code> and <code>printf</code> functions are taught as the standard C library functions to perform the input and output respectively.  The function <code>scanf</code>, however, is tricky to use correctly and securely.  The function <code>printf</code> comes with many nuances, such as having to remember the different conversion specifiers and modifiers.</p> <p>CS1010 would rather not teach you <code>scanf</code> and <code>printf</code> at this stage and instead focus on how to solve computational problems with C.  As such, CS1010 provides you with a library to perform I/O.  The library provides a small set of essential functions to read and write <code>long</code> values, <code>double</code> values, space-separated words, and lines of text.</p> <p>Use <code>printf</code> and <code>scanf</code> only if you know what you are doing</p> <p>If you insist on using <code>printf</code> and <code>scanf</code> for your assignments, make sure you know what you are doing.  Otherwise, you will run into strange bugs if you are not using them correctly (and it is non-trivial to use them correctly).  If you are an experienced programmer with C, you can skip ahead to take a look at Unit 27 on the pitfalls of using <code>printf</code> and <code>scanf</code>.</p> <p>You can find the documentation for the CS1010 I/O Library here.  We will see how to use the library to improve our hypotenuse computation program here.</p>"},{"location":"notes/06-cs1010-io.html#using-the-cs1010-io-library","title":"Using the CS1010 I/O Library","text":"<p>Let's modify our earlier program to now read the base and height from <code>stdin</code>, compute the hypotenuse, and print the results out to <code>stdout</code>.</p> Example: Reading and writing with standard I/O<pre><code>#include &lt;math.h&gt;\n#include \"cs1010.h\"\n\nlong square(long x)\n{\n  return x*x;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  long sum_of_square = square(base) + square(height);\n  return sqrt((double)sum_of_square);\n}\n\nint main()\n{\n  long base = cs1010_read_long();\n  long height = cs1010_read_long();\n  double hypotenuse = hypotenuse_of(base, height);\n  cs1010_println_double(hypotenuse);\n}\n</code></pre> <p>The first change you see (on Line 2) is to include the file <code>cs1010.h</code>, which includes the declaration of functions provided by the library.  On Lines 17 and 18, we introduce two new <code>long</code> variables named <code>base</code> and <code>height</code>, which we initialized with the returned value from <code>cs1010_read_long()</code>.  The function <code>cs1010_read_long</code> reads a <code>long</code> value from <code>stdin</code> and returns the value.  For now, we assume that the inputs are correctly passed to the program.</p> <p>Remember to include <code>()</code></p> <p>C requires that function calls be identified with <code>()</code>.  It is common for beginners to skip <code>()</code> and call a function like <code>long base = cs1010_read_long;</code> leading to compilation errors.</p> <p>Finally, on Line 20, we print the resulting hypotenuse to <code>stdout</code> using the library function <code>cs1010_println_double</code>.  Note that there are two versions of functions to print a <code>double</code> value: <code>cs1010_println_double</code> and <code>cs1010_print_double</code>.  The one with <code>println</code> prints a newline character as well.</p> <p>Refer to the CS1010 Compilation Guide on how to compile a program that uses the CS1010 I/O library.</p>"},{"location":"notes/06-cs1010-io.html#when-to-use-variables","title":"When to Use Variables","text":"<p>One of the decisions that we need to make when writing programs is when to introduce a new variable into our code.  In cases where we need to keep track of a state (e.g., \\(i\\) and \\(m\\) from Unit 2), using a variable is necessary.  In other instances, we may want to use a variable to store a value so that we do not need to compute the same value repeatedly (e.g., \\(k\\) from Unit 2).</p> <p>Sometimes, however, it is useful to introduce a variable for readability. For instance, the <code>main</code> function above can be written as a single statement without any variable and assignment.</p> Example: Calculating hypotenuse without declaring any variables<pre><code>int main()\n{\n  cs1010_println_double(hypotenuse_of(cs1010_read_long(), cs1010_read_long()));\n}\n</code></pre> <p>The resulting code, however, is not necessarily easier to comprehend. On the other hand, the following snippet is easier to comprehend:</p> <pre><code>int main()\n{\n  long base = cs1010_read_long();\n  long height = cs1010_read_long();\n  double hypotenuse = hypotenuse_of(base, height);\n  cs1010_println_double(hypotenuse);\n}\n</code></pre> <p>Here, we introduce variables with a descriptive name and indicate what each value read from <code>stdin</code> is meant for, and what the value we are printing to <code>stdout</code> is.  The sequence of execution is also clearer as we read the C statements from top to bottom: we read the two inputs first, then we compute the hypotenuse, then we print.</p> <p>When writing programs, it is sometimes useful to declare and introduce new variables to temporarily hold a value to make your code more readable.</p> <p>We, however, need to avoid overdoing it.  For instance, consider the code below:</p> <pre><code>double hypotenuse_of(long base, long height)\n{\n  long to_be_squared = base;\n  double square_base = (double)square(to_be_squared);\n\n  to_be_squared = height;\n  double square_height = (double)square(to_be_squared);\n\n  double hypotenuse = sqrt(square_base + square_height);\n  return hypotenuse;\n}\n</code></pre> <p>The variable <code>to_be_squared</code> does not improve the readability of the code.</p>"},{"location":"notes/07-arithmetic-ops.html","title":"Unit 7: Arithmetic Operations","text":""},{"location":"notes/07-arithmetic-ops.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>be able to define arithmetic expressions in C programs that include the use of the following arithmetic operators:<ul> <li>addition ( <code>+</code> ),</li> <li>subtraction ( <code>-</code> ),</li> <li>multiplication ( <code>*</code> ),</li> <li>division ( <code>/</code> ), and</li> <li>remainder ( <code>%</code> );</li> </ul> </li> <li>be aware of the numeric types that may be used with arithmetic operators in C programs;</li> <li>be aware of the value range restrictions on the various numeric types in C;</li> <li>be able to use compound operators in C programs;</li> <li>be aware of the difference between division and integer division, and when the latter occurs within arithmetic expressions; and</li> <li>be aware that there exist pitfalls in using <code>++</code> and <code>--</code> operators, and they are not allowed in CS1010.</li> </ul>"},{"location":"notes/07-arithmetic-ops.html#operators","title":"Operators","text":"<p>You have seen the <code>+</code> operator in the previous units.  You can use <code>+</code> to add two variables, a value, and a variable, or two values:</p> <pre><code>long a = 1;\nlong b = 2;\nlong c = 3;\na = b + c; // add two variables\nb = a + 4; // add a variable to a value\nc = 5 + 6; // add two values\n</code></pre> <p>You can also use <code>+</code> on values returned by functions:</p> <pre><code>long sum_of_square = square(base) + square(height);\n</code></pre> <p>You have also seen the multiplication operator <code>*</code>.  It can be used in the same way as the <code>+</code> operator.  Three other useful operators are:</p> <ul> <li><code>/</code> - division (e.g., <code>double half_x = x / 2;</code>)</li> <li><code>-</code> - subtraction (e.g., <code>long deducted = income - 100;</code>)</li> <li><code>%</code> - remainder (e.g, <code>long last_digit = number % 10;</code>)</li> </ul> <p>The <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code> operators work on both integer types (<code>char</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>long long</code>) and real numbers (<code>float</code>, <code>double</code>).  The module operator <code>%</code> works only on integer types.</p>"},{"location":"notes/07-arithmetic-ops.html#operator-precedence","title":"Operator Precedence","text":"<p>We can chain the operations together to form expressions such as:</p> <pre><code>long b = 10;\nlong c = 2;\nlong a = b + 2 * c / 4;\n</code></pre> <p>When we have multiple operations appearing, however, it becomes harder to trace the sequence of evaluation.  What is the value of <code>a</code> after the three lines above are executed?  There is some ambiguity: do we evaluate from left to right (in which case the answer is 6) or do we multiply and device first before adding (in which case the answer is 11)? </p> <p>C has well-defined rules for the order of evaluation for the operators: <code>*</code>, <code>/</code>, and <code>%</code> take precedence over <code>+</code> and <code>-</code>, and the operators are evaluated from left to right.</p> <p>Thus, in the example above, <code>a</code> will be 11 instead of 6 after the execution.</p> <p>To change the order of execution, we can add parenthesis to the expression.  For instance:</p> <pre><code>long a = (b + 2) * c / 4; // 6\nlong a = b + (2 * c / 4); // 11\n</code></pre> <p>The expression in the parenthesis will be evaluated first.  To make your code easier to understand, you should add parenthesis even if the order of evaluation is according to the order of precedence to make the order of evaluation explicit<sup>1</sup>.</p>"},{"location":"notes/07-arithmetic-ops.html#compound-operators","title":"Compound Operators","text":"<p>It is common to modify the value of a variable and store a new value back in the same variable.  For example,</p> <pre><code>index = index + 1;  // increment the variable index\nage = age * 2;  // double the variable age\n</code></pre> <p>C provides compound operators that simplify the expressions above.  For example,</p> <pre><code>index += 1;\nage *= 2;\n</code></pre> <p>The syntax for a compound operator is <code>op=</code>, where <code>op</code> can be <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, or other binary operators.  The statement:</p> <pre><code>a op= b;\n</code></pre> <p>modifies <code>a</code> the same way as:</p> <pre><code>a = a op b\n</code></pre>"},{"location":"notes/07-arithmetic-ops.html#common-mistakes-using-arithmetic-operations","title":"Common Mistakes Using Arithmetic Operations","text":"<p>It is important to remember that when arithmetic operations in C are performed on a sequence of bits, the value that the sequence of bits can represent is limited and is determined by its type.  A common mistake for beginner programmers is to forget this fact and treat the arithmetic operations as the same as the ones seen in mathematics.</p> <p>Let's look at two common gotchas.</p>"},{"location":"notes/07-arithmetic-ops.html#overflow","title":"Overflow","text":"<p>Consider the type <code>uint8_t</code>, which represents an unsigned 8-bit integer, and the following code:</p> <pre><code>uint8_t c = 255;\nc += 1;\n</code></pre> <p>What is the value of variable <code>c</code> after the operation above?</p> <p>Here, we are adding one to the value 255, so <code>c</code> must store the value 256, right?</p> <p>It turns out that after the execution above, <code>c</code> contains the value 0.  The variable <code>c</code> is of the type <code>uint8_t</code>, which is the unsigned 8-bit integer.  Being 8-bit, the variable can store values from 0 to 255.  When we add 1 to 255, even though we get the result 256, mathematically, we cannot store 256 in <code>c</code> -- there are not enough bits!  In this case, the value stored is \"wrap around\", and we get the value 0 instead.</p> <p>The variable <code>c</code> above is unsigned. It gets trickier if <code>c</code> is signed.  In the case of overflowing signed integer, the behavior depends on the compiler and is undefined in the C standard.</p>"},{"location":"notes/07-arithmetic-ops.html#integer-division","title":"Integer Division","text":"<p>Now, let's consider the following code:</p> <pre><code>double half = 3/2;\n</code></pre> <p>What is the value of the variable <code>half</code> after the operation above?</p> <p>It got to be 1.5, right?</p> <p>It turns out that, after executing the code above, the value of <code>half</code> is 1.0.  </p> <p>To understand this, first, let's see what happens when we assign a floating-point number to an integer type:</p> <pre><code>int x = 1.5;\n</code></pre> <p>C truncates the floating number and only stores the integer part of the value, 1 in this case, in <code>x</code>.</p> <p>Second, when we perform an arithmetic operation, the resulting value will be an integer if both values are integer types.  If one of the operands is a floating-point number, the result will be a floating-point number<sup>2</sup>.</p> <p>Since 3 and 2 are both integers, the resulting value 1.5 is stored in an integer, which causes it to become 1.  We then store 1 into a <code>double</code> variable, causing the value of <code>half</code> to become <code>1.0</code>.</p> <p>Because of this limitation, the operation <code>/</code> is sometimes also known as integer division when both operands are integers.</p> <p>In order to get the result 1.5 as expected, we can write either: <pre><code>double half = 3/2.0;\n</code></pre></p> <p>or</p> <pre><code>double half = (double)3/(double)2;\n</code></pre> <p>The second fix above explicitly converts the type, or casts the type, of values 2 and 3 into a <code>double</code>.</p> <p>As it is a good practice to be explicit when programming so that the readers of your code knows your intention, in CS1010, we will use explicit casting to convert <code>long</code> to <code>double</code> when necessary.</p> <pre><code>long x = 3;\nlong y = 2\n  :\ndouble x_over_y = x / y;  // trigger a compiler warning\ndouble x_over_y = (double)x / (double)y;  // ok\n</code></pre>"},{"location":"notes/07-arithmetic-ops.html#the-operator","title":"The % Operator","text":"<p>It is commonly misunderstood that the <code>%</code> operator is equivalent to the modulo operation in number theory, where the operator always gives a positive remainder.</p> <p>This equivalence holds when the two operands are positive. E.g., <code>9 % 4</code> gives <code>1</code> as the answer.  But, when one of the operands is negative, the <code>%</code> operator may return a negative number.</p> <p>The <code>%</code> operator in C is defined as follows: <code>x % n</code> is equivalent to <code>x - ((x / n) * n)</code> (where <code>/</code> is the integer division operator).</p> <p>For instance, <code>-9 % 4</code> is evaluated as <code>-9 - ((-9 / 4) * 4)</code> which is <code>-9 - (-8)</code>, and gives <code>-1</code>.</p> <p>On the other hand, <code>9 % -4</code> is evaluated as <code>9 - ((9 / -4) * -4)</code>, which gives <code>9 - 8</code>, or <code>1</code>.</p> <p>To avoid confusion between the <code>%</code> operator in C and the modulo operation in number theory, we will call the <code>%</code> as the remainder operator. </p>"},{"location":"notes/07-arithmetic-ops.html#avoid-increment-decrement-operator","title":"Avoid Increment / Decrement Operator","text":"<p>If you read C code in other places, you will certainly come across the increment or decrement operator, <code>++</code> or <code>--</code>.  The operators add one and minus one from the operand respectively.  So, the statement</p> <pre><code>index += 1;\n</code></pre> <p>can be further shortened into</p> <pre><code>index++;\n</code></pre> <p>and the statement</p> <pre><code>index -= 1;\n</code></pre> <p>can be further shortened into</p> <pre><code>index--;\n</code></pre> <p>Using these two operators only shortens your code by two characters per statement, but introduces several issues.  As such, we ban the use of both increment and decrement operators in CS1010.</p> <p>So, why aren't <code>++</code> and <code>--</code> welcomed in CS1010?  The <code>++</code> and <code>--</code> operators not only modify the value of the operand, but it also returns a value.  We can write <code>j = i++;</code> to both increment <code>i</code> and assign the pre-incremented value of <code>i</code> to <code>j</code>.  In C, we can also write <code>j = ++i;</code>, which again, increment <code>i</code>, and assign the post-incremented value of <code>i</code> to <code>j</code>.  Things get tricky when we write <code>i = i++;</code>, it is not clear how to interpret this.  The C standard leaves this behavior undefined and leaves it to the compiler to define its behavior.  Introducing all these complexities just to save two characters is not warranted.</p>"},{"location":"notes/07-arithmetic-ops.html#list-of-c-features-banned-in-cs1010","title":"List of C features banned in CS1010","text":"<p>You should realize by now that we are only using a subset of C and enforce a certain style of programming in CS1010.  We wish to move all of you away from common pitfalls in learning and writing C so that we can focus on using C as a tool to solve problems.</p> <p>So far, you have seen that we are banning:</p> <ul> <li><code>++</code> and <code>--</code> operators</li> <li>the types <code>int</code>, <code>short</code>, <code>float</code>, etc. (with the returning type of <code>main()</code> as the exception)</li> <li>global variables</li> </ul> <p>In addition, we discourage:</p> <ul> <li>the use of <code>printf</code> and <code>scanf</code></li> <li>skipping parenthesis in writing arithmetic expression</li> </ul> <p>The complete list of C features that we ban or discourage in CS1010 can be found here.</p> <ol> <li> <p>Interested students may refer to the Wikipedia article on C operators on the complete rules for precedence.  But for beginners like us, using parentheses to explicitly indicate the order in which we wish to evaluate our computation suffices.\u00a0\u21a9</p> </li> <li> <p>The actual rules used by C, called integer promotion and usual arithmetic conversion, are much more complex and are outside the scope of CS1010.  You should take note of this, however, and in a later part of your study or career, if you need to delve deeper into writing or debugging C code, take a look at this.\u00a0\u21a9</p> </li> </ol>"},{"location":"notes/08-if-else.html","title":"Unit 8: Conditional Statement","text":""},{"location":"notes/08-if-else.html#learning-objectives","title":"Learning Objectives","text":"<p>After going through this unit, students should:</p> <ul> <li>understand that branching in flowcharts relates to either <code>if-else</code> statements or loops;</li> <li>be able to identify the three components of an <code>if-else</code> statement: the condition, the <code>true</code> block, and the <code>false</code> block;</li> <li>be able to develop an <code>if-else</code> statement in C, including, (i) nested <code>if-else</code>, (ii) <code>if</code> without <code>else</code> blocks, and (iii) <code>else if</code> blocks;</li> <li>be able to model a computational solution with different conditions as a table;</li> <li>understand the meaning and the use of the type <code>void</code></li> <li>understand the term string and be able to use <code>cs1010_println_string</code> to print a string to the screen.</li> <li>be aware that in CS1010:<ul> <li>curly brackets must not be skipped even if a block contains only a single statement;</li> <li>nested conditional operators are banned.</li> </ul> </li> <li>be aware of floating-point numbers must not be compared using equality.</li> </ul>"},{"location":"notes/08-if-else.html#branching","title":"Branching","text":"<p>So far the C programs that we have written have a straightforward execution path.  The execution flows from top to bottom in the <code>main</code> function, jumping to a function being called (or callee), and back to the caller when the function returns.</p> <p>We have, however, seen a few examples so far where the execution path can branch off to either one of two paths, depending on a condition:</p> <ul> <li>In the algorithm to compute the \\(max(L, k)\\), we check if \\(i\\) equals \\(k\\), and stop checking if it is true; repeat if it is false.</li> <li>In the algorithm to compute the \\(max(L, k)\\), we check if \\(l_i &gt; m\\), and update \\(m\\) only if this is true.  </li> <li>In the algorithm to compute the \\(factorial(n)\\), we check if \\(n\\) equals 0, and return 1 if it is true, otherwise, we return \\(n \\times factorial(n-1)\\).</li> </ul> <p>The first example above concerns repeating a step.  We will look into this in Unit 11.  For now, we will look at the other two examples first.</p> <p>Let's use the \\(factorial(n)\\) function as an example.  </p> <p></p> <p>In C, the \\(factorial(n)\\) would look like this: Calculating Factorial (v1)<pre><code>long factorial(long n)\n{\n  long answer;\n  if (n == 0) {\n    answer = 1;\n  } else {\n    answer = n * factorial(n - 1);\n  }\n  return answer;\n}\n</code></pre></p> <p>In this example, you see two new C keywords <code>if</code> and <code>else</code>.  These keywords are used to create conditional blocks.  The general syntax is:</p> Syntax for if-else Statements<pre><code>if (&lt;logical expression&gt;) {\n  \"true block\": statements to be executed if expression evaluates to true\n} else {\n  \"false block\": statements to be executed if expression evaluates to false\n}\n</code></pre> <p>The keyword <code>if</code> is followed by a logical expression in parentheses.  This is followed by a block of statements (in curly braces <code>{</code> and <code>}</code>).  If the logical expression is true, then the statements are executed.  Otherwise, they are skipped and the statements following the <code>else</code> block are executed instead.  For this reason, the group of statements following <code>if</code> is known as a true block, and the group of statements following <code>else</code> is known as the false block.</p>"},{"location":"notes/08-if-else.html#comparison-operator","title":"Comparison Operator","text":"<p>The logical expression <code>n == 0</code> is true if the variable <code>n</code> holds the value of <code>0</code>.</p> <p><code>==</code> vs <code>=</code></p> <p>Note that the use of TWO <code>=</code> signs.  This is often confused by newbie programmers with a single <code>=</code> sign, which is used for assignment.  A common bug is writing</p> <pre><code>  if (n = 0) {\n     :\n  }\n</code></pre> <p>The <code>==</code> is known as a comparison operator.  It compares if the expression on the left-hand side has the same value as the expression on the right-hand side.  Other comparison operators include <code>&gt;</code> (greater than), <code>&lt;</code> (less than), <code>&gt;=</code> (greater or equal to), <code>&lt;=</code> (less than or equal to), and <code>!=</code> (not equal).</p> <p>In other words, the variable <code>answer</code> will be set to <code>1</code> if the parameter <code>n</code> equals <code>0</code>. What if <code>n</code> is not <code>0</code>?  The block that contains Line 5 <code>answer = 1;</code> will be skipped, and Line 7 <code>answer =  n * factorial(n - 1);</code> will be executed instead.</p>"},{"location":"notes/08-if-else.html#nested-else-if","title":"Nested Else-If","text":"<p>The example above considers two possible execution paths only.  In some situations, we may need to consider more than two execution paths.  Take the following problem for example.  We are given the numerical score for an assignment, ranging between 0 and 10.  We want to print out the letter grade of the assignment according to the table below:</p> Score Letter Grade 8 or higher A Less than 8 but 5 or higher B Less than 5 but 3 or higher C Less than 3 D <p>Summary Table</p> <p>Building a table that summarizes the different possibilities is a useful tool when planning your solution to solve a computational problem.</p> <p>Since the <code>if</code>-<code>else</code> statement only allows branching into two possibilities, we can branch into multiple possibilities by nesting the <code>if</code>-<code>else</code> statements hierarchically.  We can first break the table down into three tables, each containing only two rows, with one row a negation of the other row.</p> <p>Table 1 (A Grade)</p> Score Letter Grade 8 or higher A Less than 8 See Table 1 <p>Table 2 (B Grade)</p> Score Letter Grade Less than 8 but 5 or higher B Less than 5 See Table 2 <p>Table 3 (C or D Grade)</p> Score Letter Grade Less than 5 but 3 or higher C Less than 3 D <p>The tables above can be translated into a flowchart below:</p> <p></p> <p>which can then be written into the following function with three nested <code>if</code>-<code>else</code> blocks:</p> Function to Print The Letter Grade Given The Score (v1)<pre><code>void print_score(double score) // (1)!\n{\n  if (score &gt;= 8) {\n    cs1010_println_string(\"A\"); // (2)!\n  } else {\n    // Table 1\n    if (score &gt;= 5) {\n      cs1010_println_string(\"B\");\n    } else {\n      // Table 2\n      if (score &gt;= 3) {\n        cs1010_println_string(\"C\");\n      } else {\n        cs1010_println_string(\"D\");\n      }\n    }\n  }\n}\n</code></pre> <ol> <li><code>void</code> is a special keyword in C that indicates a \"nothing\" type.</li> <li>We use a pair of double quotes <code>\"</code> to mark the beginning and the end of text strings in C.</li> </ol> <p>There are also a couple of \"first\" in the sample code above:</p> <ul> <li>You see the keyword <code>void</code> for the first time.  <code>void</code> is a special type that indicates nothing.  The function <code>print_score</code> does not return anything, it accepts an input <code>score</code> and prints something to the screen.  As such, we say that the return type of <code>print_score</code> is <code>void</code>.  A function whose return type is <code>void</code> does not need to have a <code>return</code> statement.</li> <li>You see strings for the first time (<code>\"A\"</code>, etc.).  A string is a sequence of characters.  We use double quotes <code>\"</code> to mark the beginning and the end of a string and use the CS1010 I/O library function <code>cs1010_println_string</code> to print a string to the screen.  We won't cover how to declare a string variable or manipulate a string yet, until after the mid-semester break.  For now, we will use strings in the context of printing output messages to the users.</li> </ul> <p>You can imagine that as the number of possible letter grades increases (NUS has 11), we will have many nested <code>if</code>-<code>else</code>, and the code gets complicated.  To reduce the number of nesting, we can write <code>else if</code> directly, without nesting:</p> Using else-if for Multiple Branches (v2)<pre><code>void print_score(double score) \n{\n  if (score &gt;= 8) {\n    cs1010_println_string(\"A\");\n  } else if (score &gt;= 5) {\n    cs1010_println_string(\"B\");\n  } else if (score &gt;= 3) {\n    cs1010_println_string(\"C\");\n  } else {\n    cs1010_println_string(\"D\");\n  }\n}\n</code></pre> <p>The above code is easier to read but has the same flow as the one with nested <code>if</code>-<code>else</code> earlier.</p>"},{"location":"notes/08-if-else.html#skipping-else","title":"Skipping <code>else</code>","text":"<p>In some algorithms, we don't need to have an else block.</p> <p>For instance, suppose we have a variable <code>m</code>, and we wish to compare it with another variable <code>x</code>.  We set <code>m</code> to <code>x</code> if <code>x</code> is the larger of the two, but we do not need to do anything otherwise.   Regardless of whether <code>m</code> or <code>x</code> is larger, we will print out <code>m</code> after the comparison. </p> <p></p> <p>We could write it as:</p> Code with Empty False Block<pre><code> :\nif (m &lt; x) {\n  m = x;\n} else {\n  // do nothing\n}\ncs1010_println_long(m);\n :\n</code></pre> <p>The false block is empty, and we could keep our code succinct by removing it altogether.</p> Skipping Else<pre><code> :\nif (m &lt; x) {\n  m = x;\n}\ncs1010_println_long(m);\n :\n</code></pre> <p>One, however, needs to be careful with skipping the else block.  </p> <p>Let's consider another example.  Suppose we have three <code>long</code> variables, <code>x</code>, <code>y</code>, and <code>max</code>, and we want to set <code>max</code> to the maximum of <code>x</code> and <code>y</code>.</p> <p>Consider the following code snippet:</p> Bad Code Example: Skipping Else<pre><code>if (x &gt; y) {\n  max = x;\n}\nif (x &lt; y) {\n  max = y;\n}\n</code></pre> <p>Take a moment to understand the code above, and see if you can figure out what is wrong.</p> <p>When we think about writing conditionals, we have to exhaustively reason about what are all the possible scenarios that could occur.  In this example, we need to think about what are the possible relationships between <code>x</code> and <code>y</code> when we compare <code>x</code> and <code>y</code>.  There are three possibilities:</p> <ul> <li><code>x &gt; y</code>: <code>x</code> is larger, and we set <code>max</code> to <code>x</code></li> <li><code>y &gt; x</code>: <code>y</code> is larger, and we set <code>max</code> to <code>y</code></li> <li><code>x == y</code>: both are equally large, so the maximum can be either <code>x</code> or <code>y</code>.</li> </ul> <p>In the code above, <code>max</code> is not updated if <code>x == y</code>!</p> <p>The following code adds the third case and arbitrarily chooses to set <code>max</code> to <code>y</code> if both <code>x</code> and <code>y</code> have the same value.</p> Setting max to the Larger of x and y<pre><code>if (x &gt; y) {\n  max = x;\n}\nif (x &lt; y) {\n  max = y;\n}\nif (x == y) {\n  max = y;\n}\n</code></pre> <p>The code snippet above now correctly sets <code>max</code> to the maximum of <code>x</code> and <code>y</code>.  The code, however, is inefficient since it redundantly compares <code>x</code> and <code>y</code> three times.  Regardless of whether <code>x</code> or <code>y</code> is larger, the conditions <code>x &gt; y</code>, <code>x &lt; y</code>, and <code>x == y</code> are always evaluated.  See the flowchart below.</p> <p></p> <p>To get around this redundant comparison, let's try to simplify the code.  First, since the \"true block\" for <code>x &lt; y</code> and <code>x == y</code> are the same, we can combine it into a single comparison <code>x &lt;= y</code>.</p> Setting max to the Larger of x and y (Simplified)<pre><code>if (x &gt; y) {\n  max = x;\n}\nif (x &lt;= y) {\n  max = y;\n}\n</code></pre> <p>But, if <code>x &gt; y</code> is false, then <code>x &lt;= y</code> must be true!  We say that <code>x &gt; y</code> and <code>x &lt;= y</code> are negation (or opposite) of each other.  So, the check for <code>x &lt;= y</code> is redundant -- checking <code>x &gt; y</code> is enough to tell us if <code>x &lt;= y</code>.  We can re-write the code above succinctly as:</p> Setting max to the Larger of x and y (Simplified)<pre><code>if (x &gt; y) {\n  max = x;\n} else {\n  max = y;\n}\n</code></pre> <p>So, we should not skip the <code>else</code> block in the case above, to begin with.</p> <p>There are, however, other cases where the <code>else</code> block can be skipped.  Consider the code:</p> Calculating Factorial (v1)<pre><code>long factorial(long n)\n{\n  long answer;\n  if (n == 0) {\n    answer = 1;\n  } else {\n    answer = n * factorial(n - 1);\n  }\n  return answer;\n}\n</code></pre> <p>Since we do not modify or use the variable <code>answer</code> in a meaningful way except as a placeholder to be returned later, we could remove this variable to simplify our code.  We could write the function more succinctly as:</p> Calculating Factorial (v2)<pre><code>long factorial(long n)\n{\n  if (n == 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n</code></pre> <p>Now that we removed the variable <code>answer</code>, we could go one step further, and remove the <code>else</code>.</p> Calculating Factorial (v3)<pre><code>long factorial(long n)\n{\n  if (n == 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n</code></pre> <p>We can always do this without changing the outcome of the function since Line 6 will be executed only if the condition of Line 3 is false.  If the condition on Line 3 is true, the function will return and Line 6 will be skipped!</p> <p>In CS1010, we follow this rule: we do not write an <code>else</code> after a <code>return</code> statement, since it is redundant.</p>"},{"location":"notes/08-if-else.html#conditional-operator","title":"Conditional Operator","text":"<p>Another way to express a conditional statement in C is to use the ternary conditional operator, which consists of two special characters <code>?</code> and <code>:</code>.  We use this operator in the format of:</p> <pre><code>condition ? true expression : false expression;\n</code></pre> <p>If the <code>condition</code> evaluates to true, then the <code>true expression</code> will be evaluated and returned, otherwise, the <code>false expression</code> will be evaluated and returned.</p> <p>The conditional operator allows us to replace</p> <pre><code>if (x &gt; y) {\n  max = x;\n} else {\n  max = y;\n}\n</code></pre> <p>with a single line:</p> Using Conditional Operator<pre><code>max = (x &gt; y) ? x : y;\n</code></pre> <p>We can nest the conditional operator as well, but it does not necessarily make your code easier to read once you start nesting them up.  For example, <pre><code>a = (x &gt; y) ? ((y &gt; z) ? y : z) : ((z &gt; x) ? x : z);\n</code></pre></p> <p>Nesting of conditional operators is therefore not allowed in CS1010.</p> <p>In some cases, even without nesting, the conditional operator does not make the code easier to understand.  Take the <code>factorial</code> function, for instance,</p> Calculating Factorial (v4)<pre><code>long factorial(long n)\n{\n  return n == 0 ? 1 : n * factorial(n - 1);\n}\n</code></pre> <p>So, CS1010 advises you to use the <code>? :</code> operator sparingly and only when you know what you are doing.</p>"},{"location":"notes/08-if-else.html#common-pitfalls-with-conditional-statements","title":"Common Pitfalls with Conditional Statements","text":""},{"location":"notes/08-if-else.html#comparing-real-numbers","title":"Comparing Real Numbers","text":"<p>Recall that we said real numbers cannot be represented exactly in computers.  Comparing real numbers, therefore, becomes a little trickier in programming.  The <code>if</code> statement</p> <pre><code>double expected_value = 0.3;\ndouble sum = 0.1 + 0.2;\nif (sum == expected_value) {\n :\n}\n</code></pre> <p>would not be evaluated as <code>true</code> as expected!</p> <p>Thus, to compare real numbers, we normally allow some errors in comparisons -- we want the absolute difference between <code>sum</code> and <code>expected_value</code> to be small enough.</p> <pre><code>double expected_value = 0.3;\ndouble sum = 0.1 + 0.2;\nif (fabs(sum - expected_value) &lt; 0.000001) {\n :\n}\n</code></pre>"},{"location":"notes/08-if-else.html#indentation","title":"Indentation","text":"<p>We use indentation to indicate the nesting of blocks below:</p> Function to Print the Letter Grade Given the Score (v1)<pre><code>void print_score(double score) // (1)!\n{\n  if (score &gt;= 8) {\n    cs1010_println_string(\"A\"); // (2)!\n  } else {\n    // Table 1\n    if (score &gt;= 5) {\n      cs1010_println_string(\"B\");\n    } else {\n      // Table 2\n      if (score &gt;= 3) {\n        cs1010_println_string(\"C\");\n      } else {\n        cs1010_println_string(\"D\");\n      }\n    }\n  }\n}\n</code></pre> <p>Using indentation to denote the nesting of blocks is not required by C's syntax (unlike languages such as Python), but it is a widely accepted, good, programming practice, and is required for CS1010.</p> <p>The code below compiles perfectly but is not as easy to read by a human as the above.</p> Bad Code Example: Bad Indentation<pre><code>void print_score(double score)\n{\n  if (score &gt;= 8) {\n    cs1010_println_string(\"A\"); } else { // Table 1\n    if (score &gt;= 5) { cs1010_println_string(\"B\");\n  } else { // Table 2\nif (score &gt;= 3) {\n  cs1010_println_string(\"C\");\n      } else {\n        cs1010_println_string(\"D\");\n    } } } }\n// Don't write code like this.\n</code></pre>"},{"location":"notes/08-if-else.html#curly-braces","title":"Curly Braces","text":"<p>The C standard says that, if the block contains only one statement, we can skip the curly braces <code>{</code> and <code>}</code>.  In the example above, we can write:</p> Bad Code Example: Skipping Braces<pre><code>void print_score(double score)\n{\n  if (score &gt;= 8)\n    cs1010_println_string(\"A\");\n  else if (score &gt;= 5)\n    cs1010_println_string(\"B\");\n  else if (score &gt;= 3)\n    cs1010_println_string(\"C\");\n  else\n    cs1010_println_string(\"D\");\n}\n</code></pre> <p>Despite being allowed by the C standard, this is considered a bad practice and should be avoided.  Imagine some time later, you go back to this code, and want to write something extra:</p> Bad Code Example: Skipping Braces<pre><code>void print_score(double score)\n{\n  if (score &gt;= 8)\n    cs1010_println_string(\"A\");\n  else if (score &gt;= 5)\n    cs1010_println_string(\"B\");\n  else if (score &gt;= 3)\n    cs1010_println_string(\"C\");\n  else\n    cs1010_println_string(\"You can do better!\");\n    cs1010_println_string(\"D\");\n}\n</code></pre> <p>What would be printed?</p> <p>The famous Apple <code>goto fail</code> bug wouldn't have happened in the there is a pair of curly braces added!</p> <p>Alternatively, if you have code like this:</p> Bad Code Example: Skipping Braces<pre><code>if (score &gt;= 8)\n  if (late_penalty != 0)\n      cs1010_println_string(\"late submission\");\nelse\n  cs1010_println_string(\"you can do better!\");\n</code></pre> <p>It might look like <code>you can do better!</code> will be printed if the <code>score</code> is less than 8, but actually, <code>you can do better!</code> will be printed if the <code>score</code> is larger or equal to 8 and there is no late penalty, which is not what is intended.</p>"},{"location":"notes/08-if-else.html#redundant-comparisons","title":"Redundant Comparisons","text":"<p>CS1010 insists that students should not make redundant conditional statements when writing <code>if</code>-<code>else</code> statements.  A condition is redundant if it is always true or always false.  </p> <p>Take the example below:</p> Redundant Comparison of x &lt;= y<pre><code>if (x &gt; y) {\n  max = x;\n}\nif (x &lt;= y) {\n  max = y;\n}\n</code></pre> <p>Here, we compare both <code>x &gt; y</code> and <code>x &lt;= y</code>, but since the conditions are the negation of each other, if one is true then the other must be false.   We only need to make one comparison between <code>x</code> and <code>y</code>.</p> <p>Another example is the version of <code>print_score</code> below:</p> Bad Code Example: Redundant Comparisons of score<pre><code>void print_score(double score) \n{\n  if (score &gt;= 8) {\n    cs1010_println_string(\"A\");\n  } else if (score &lt; 8) {\n    // Table 1\n    if (score &gt;= 5) {\n      cs1010_println_string(\"B\");\n    } else if (score &lt; 5) {\n      // Table 2\n      if (score &gt;= 3) {\n        cs1010_println_string(\"C\");\n      } else if (score &lt; 3) {\n        cs1010_println_string(\"D\");\n      }\n    }\n  }\n}\n</code></pre> <p>The conditions <code>score &lt; 8</code>, <code>score &lt; 5</code>, and <code>score &lt; 3</code> are always true and are therefore redundant.  </p>"},{"location":"notes/08-if-else.html#problem-sets","title":"Problem Sets","text":""},{"location":"notes/08-if-else.html#problem-81","title":"Problem 8.1","text":"<p>Draw the flowcharts for the two code snippets below.  Identify redundant comparisons (if any), in each of the snippets.</p> <p>(a) <pre><code>if (x &gt; y) {\n  max = x;\n} else if (x &lt; y) {\n  max = y;\n} else if (x == y) {\n  max = y;\n}\n</code></pre></p> <p>(b) <pre><code>if (x &gt; y) {\n  max = x;\n} else {\n  max = y;\n}\n</code></pre></p>"},{"location":"notes/08-if-else.html#problem-82","title":"Problem 8.2","text":"<p>Suppose we break down the table below in a slightly different way.</p> Score Letter Grade 8 or higher A Less than 8 but 5 or higher B Less than 5 but 3 or higher C Less than 3 D <p>We rewrite the tables into three smaller tables, as follows:</p> Score Letter Grade 5 or higher See Table X Less than 5 See Table Y <p>where Table X (5 or higher) is</p> Score Letter Grade 8 or higher A Less than 8 B <p>and Table Y (less than 5) is</p> Score Letter Grade 3 or higher C Less than 3 D <p>Write the corresponding <code>if</code>-<code>else</code> statements to print out the letter grade based on the tables above.  Draw the corresponding flowchart.</p>"},{"location":"notes/09-logical-exp.html","title":"Unit 9: Logical Expression","text":""},{"location":"notes/09-logical-exp.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>be able to read and write logical expressions in C using various logical operators, including <code>==</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>!=</code>, <code>&amp;&amp;</code>, <code>||</code> and <code>!</code>;</li> <li>be aware of the <code>bool</code> type and its values <code>true</code> and <code>false</code>, and the need to include <code>stdbool.h</code> to use it in C;</li> <li>be aware that in CS1010, we must never use <code>int</code> to indicate a true/false value;</li> <li>be aware of short-circuiting in logical expression;</li> <li>be aware of the CS1010's convention of naming a boolean variable with the prefix <code>is_</code>, <code>has_</code>, or <code>can_</code>;</li> <li>be able to write a logical expression in appropriate order to exploit short-circuiting toward more efficient code</li> </ul>"},{"location":"notes/09-logical-exp.html#representing-a-boolean-value","title":"Representing a Boolean Value","text":"<p>You have seen some basic logical expressions in Unit 8. <code>n == 0</code>, <code>score &gt;= 5</code>, <code>y &gt; x</code>, are all logical expressions.  They evaluate to be either true or false.</p> <p>We call a type that can contain either true or false a Boolean data type, named after George Boole, a mathematician.</p> <p>The Boolean data type in C is named <code>bool</code>.  It can hold two values: <code>true</code> or <code>false</code>.  All three of <code>bool</code>, <code>true</code>, and <code>false</code> are keywords introduced in modern C. To use them, you need to include the file <code>stdbool.h</code> at the top of your program.</p> <p>Using <code>bool</code> is considered a cleaner way of representing true and false in C. Classically, C defines the numeric value 0 to be false, and everything else to be true.  So, you can write code like this:</p> <pre><code>// x and y are long.\nlong is_diff = x - y;\nif (is_diff) {\n  cs1010_println_string(\"x and y store different values.\");\n}\n</code></pre> <p>The above is harder to understand and should be avoided.  A cleaner way is to write:</p> <pre><code>bool is_diff = x != y;\nif (is_diff) {\n  cs1010_println_string(\"x and y store different values.\");\n}\n</code></pre> <p>Although not required by C, we will name a <code>bool</code> variable with a prefix <code>is_</code>, <code>has_</code>, or <code>can_</code>, as a convention.  </p> <p>The code above can also be written as: <pre><code>bool is_diff = x != y;\nif (is_diff == true) {\n  cs1010_println_string(\"x and y store different values.\");\n}\n</code></pre></p> <p>The comparison with <code>true</code> is redundant, however, and should be skipped.</p>"},{"location":"notes/09-logical-exp.html#logical-operators","title":"Logical Operators","text":"<p>Just like we can perform arithmetic operations on integers and real numbers, we can perform logical operations on boolean values.  These operations allow us to write complex logical expressions.</p> <p>Consider the example problem: Write a function that, given the birth year of a person, determine if he or she belongs to Generation Z, defined as someone whose birth is between 1995 and 2005, inclusive.</p> <p>We can write the function as follows using what we have known: <pre><code>bool is_gen_z(long birth_year)\n{\n  if (birth_year &gt;= 1995) {\n    if (birth_year &lt;= 2005) {\n      return true;\n    }\n  }\n  return false;\n}\n</code></pre></p> <p>To be in Generation Z, both conditions <code>birth_year &gt;= 1995</code> and <code>birth_year &lt;= 2005</code> must be true.  We can use the logical AND <code>&amp;&amp;</code> operator to simplify the code above to:</p> <pre><code>bool is_gen_z(long birth_year)\n{\n  if ((birth_year &gt;= 1995) &amp;&amp; (birth_year &lt;= 2005)) {\n    return true;\n  }\n  return false;\n}\n</code></pre> <p>or simply: <pre><code>bool is_gen_z(long birth_year)\n{\n  return ((birth_year &gt;= 1995) &amp;&amp; (birth_year &lt;= 2005));\n}\n</code></pre></p> <p>The AND operator, <code>&amp;&amp;</code>, evaluates to true if and only if both operands are true.</p> <p>Common Error</p> <p>A common mistake by a new C programmer is to write <code>1995 &lt;= birth_year &lt;= 2005</code> as the logical expression.  Unfortunately, in C, we cannot chain the comparison operators together.</p> <p>What if we want to write a function to determine if someone is NOT part of Generation Z?   This means that they are born either before 1995 or after 2005.  To have an expression that evaluates to true if at least one of two expressions is true, we can use the OR operator, <code>||</code>.</p> <pre><code>bool is_not_gen_z(long birth_year)\n{\n  return ((birth_year &lt; 1995) || (birth_year &gt; 2005));\n}\n</code></pre> <p>Generally, we prefer to write functions that check for the positives, as it is generally easier to think in terms of the positives.  So the example <code>is_not_gen_z</code> above is for illustration purposes only, we do not encourage you to write functions that check for the negatives.   In any case, if we want to check if someone is not a Generation Z, we can use the <code>!</code> NOT operator.</p> <pre><code>if (!is_gen_z(birth_year)) {\n     :\n}\n</code></pre> <p>The <code>!</code> operator can be used as part of the boolean expression:</p> <pre><code>bool is_not_gen_z(long birth_year)\n{\n  return !((birth_year &gt;= 1995) &amp;&amp; (birth_year &lt;= 2005));\n}\n</code></pre> <p>The table below summarizes the logical operations <code>&amp;&amp;</code>, <code>||</code> and <code>!</code>:</p> <code>a</code> <code>b</code> <code>a &amp;&amp; b</code> <code>a || b</code> <code>!a</code> true true true true false true false false true false false true false true true false false false false true"},{"location":"notes/09-logical-exp.html#short-circuiting","title":"Short-Circuiting","text":"<p>When evaluating the logical expressions that involve <code>&amp;&amp;</code> and <code>||</code>, C uses \"short-circuiting\".  If the program already knows, for sure, that a logical expression is true or false, there is no need to continue the evaluation.  The corresponding <code>true</code> or <code>false</code> value will be returned.</p> <p>Consider the following: <pre><code>bool is_gen_z(long birth_year)\n{\n  return ((birth_year &gt;= 1995) &amp;&amp; (birth_year &lt;= 2005));\n}\n</code></pre></p> <p>If the argument <code>birth_year</code> is <code>1970</code>, then, the expression <code>(birth_year &gt;= 1995)</code> already evaluates to <code>false</code>, and the whole statement is false.  We do not need to evaluate the second expression <code>(birth_year &lt;= 2005)</code>.  </p> <p>Similarly, for <pre><code>bool is_not_gen_z(long birth_year)\n{\n  return ((birth_year &lt; 1995) || (birth_year &gt; 2005));\n}\n</code></pre></p> <p>When <code>birth_year</code> is <code>1970</code>, the expression <code>(birth_year &lt; 1995)</code> is <code>true</code>, so we know that the whole statement is <code>true</code>.  There is no need to check if <code>(birth_year &gt; 2005)</code>.</p> <p>In both examples above, the savings due to short-circuiting is not much -- since we are comparing two numbers, and there is no side effects in comparing <code>birth_year</code> to <code>2005</code>.  But, let's suppose that we introduce two functions with side effects (of printing to the screen):</p> <pre><code>bool not_too_old(long birth_year)\n{\n  if (birth_year &gt;= 1995) {\n    cs1010_print_string(\"not too old..\");\n    return true;\n  }\n  cs1010_print_string(\"too old..\");\n  return false;\n}\n\nbool not_too_young(long birth_year)\n{\n  if (birth_year &lt;= 2005) {\n    cs1010_print_string(\"not too young..\");\n    return true;\n  }\n  cs1010_print_string(\"too young..\");\n  return false;\n}\n\nbool is_gen_z(long birth_year)\n{\n  return not_too_old(birth_year) &amp;&amp; not_too_young(birth_year);\n}\n</code></pre> <p>When we call <code>is_gen_z(1984)</code>, you might expect <code>too old..not too young..</code> to be printed, but due to short-circuiting, the code only prints <code>too old..</code>.</p> <p>Another reason to keep short-circuiting in mind is that the order of the logical expressions matter: we would want to put the logical expression that involves more work in the second half of the expression.  Take the following example:</p> <pre><code>if (number &lt; 100000 &amp;&amp; is_prime(number)) {\n    :\n}\n</code></pre> <p>Checking whether a number is below 100,000 is easier than checking if a number is prime.  So, we can skip checking for primality if the <code>number</code> is too big.  Compare this to:</p> <pre><code>if (is_prime(number) &amp;&amp; number &lt; 100000) {\n    :\n}\n</code></pre> <p>Suppose <code>number</code> is a gigantic integer, then we would have spent lots of effort checking if <code>number</code> is a prime, only to find out that it is too big anyway!</p>"},{"location":"notes/09-logical-exp.html#problem-sets","title":"Problem Sets","text":""},{"location":"notes/09-logical-exp.html#problem-91","title":"Problem 9.1","text":"<p>Consider the function below, which aims to return the maximum value given three numbers.</p> <pre><code>long max_of_three(long a, long b, long c)\n{\n  long max = 0;\n  if ((a &gt; b) &amp;&amp; (a &gt; c)) {\n    // a is larger than b and c\n    max = a;\n  }\n  if ((b &gt; a) &amp;&amp; (b &gt; c)) {\n    // b is larger than a and c\n    max = b;\n  }\n  if ((c &gt; a) &amp;&amp; (c &gt; b)) {\n    // c is larger than a and b\n    max = c;\n  }\n  return max;\n}\n</code></pre> <p>(a) The function is not correct.  Give a sample test value of <code>a</code>, <code>b</code>, and <code>c</code> that would expose the bug.</p> <p>(b) List all conditions on the inputs <code>a</code>, <code>b</code>, and <code>c</code> such that the function above would fail.</p>"},{"location":"notes/09-logical-exp.html#problem-92","title":"Problem 9.2","text":"<p>The restaurant WcDonald's is setting a new rule for dining in.  Two people are allowed to dine in only if both of them are fully vaccinated against COVID-19.  A child below 12 years old from the same household is exempted from the rule.</p> <p>Suppose we represent each diner with a <code>long</code> variable, and we have the following functions:</p> <ul> <li><code>bool is_vaccinated(long p)</code> returns true if and only if <code>p</code> is fully vaccinated.</li> <li><code>bool is_a_child(long p)</code> returns true if and only if <code>p</code> is a child below 12.</li> <li><code>bool are_from_same_household(long p, long q)</code> returns true if and only if both <code>p</code> and <code>q</code> are from the same household.</li> </ul> <p>(a) Add as many rows as needed to the table below to enumerate all conditions under which <code>p</code> and <code>q</code> can dine in together at WcDonald's.  Each table cell can be <code>yes</code>, <code>no</code>, or <code>don't care</code>.</p> <code>is_vaccinated(p)</code> <code>is_vaccinated(q)</code> <code>is_a_child(p)</code> <code>is_a_child(q)</code> <code>are_from_same_household(p,q)</code> yes yes don't care don't care don't care ? ? ? ? ? <p>The first row has been filled up for you.  It represents the condition in which both diners are fully vaccinated.  In this case, it does not matter whether they are from the same household or they are children.</p> <p>(b) Using the table from (a) to help you write a function <code>can_dine_in(long p, long q)</code> that returns true if and only if <code>p</code> and <code>q</code> can dine in together at WcDonald's.</p>"},{"location":"notes/10-assert.html","title":"Unit 10: Assertion","text":""},{"location":"notes/10-assert.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>know what is an assertion</li> <li>be able to derive assertion statements in an algorithm that involves assignment and branches</li> <li>be able to note down assertions using Hoare's notation</li> <li>be able to apply De Morgan's laws</li> </ul>"},{"location":"notes/10-assert.html#what-is-assertion","title":"What is Assertion?","text":"<p>An assertion is a logical expression that must always be true for the program to be correct.  We can write assertions either as part of the comment for the code or use the <code>assert()</code> macro in C.  Let's look at what is assertion first.  We will introduce the use of <code>assert()</code> later.</p> <p>To get started, let's first look at the most trivial assertion:</p> <pre><code>long x = 1;\n// { x == 1 }\n</code></pre> <p>The line above initialize the variable <code>x</code> to be <code>1</code>.  The next line, a comment, uses the curly braces <code>{</code> and <code>}</code> with a logical expression in between, to indicate that <code>x</code> must be equal to `1`` after the assignment.  We use the curly braces as a notation in CS1010, following C. A. R. Hoare's notation, but this is not part of any C standard.</p> <p>The assertion above is kind of trivial and not very meaningful.</p> <p>Let's revisit this snippet:</p> <pre><code>if (x &gt; y) {\n  max = x;\n} else {\n  max = y;\n}\n</code></pre> <p>Let's consider the true block and the false block.  Inside the true block, since <code>x &gt; y</code>, we can assert that, well, <code>x &gt; y</code>, and inside the false block, we have the negation, so <code>x &lt;= y</code>.</p> <pre><code>if (x &gt; y) {\n  // { x &gt; y }\n  max = x;\n} else {\n  // { x &lt;= y }\n  max = y;\n}\n</code></pre> <p>Let's now consider what happens after initializing <code>max</code> to either <code>x</code> or <code>y</code>.</p> <pre><code>if (x &gt; y) {\n  // { x &gt; y }\n  max = x;\n  // { max == x &amp;&amp; max &gt; y }\n} else {\n  // { x &lt;= y }\n  max = y;\n  // { max &gt;= x &amp;&amp; max == y }\n}\n</code></pre> <p>The assertion on Line 4 consists of two parts: <code>max == x</code> which is the result of the assignment (the trivial assertion), but since inside this block, <code>x &gt; y</code>, we must have <code>max &gt; y</code> to be true as well.</p> <p>Similarly, we can argue the assertion in Line 8 to be true.  </p> <p>What can we assert after we exit from the <code>if</code>-<code>else</code> block?  We have either <code>max == x &amp;&amp; max &gt; y</code> or <code>max &gt;= x &amp;&amp; max == y</code>.  This is exactly the property we are looking for in <code>max</code> when we set it to the maximum of <code>x</code> and <code>y</code>!  </p> <p>Let's look at another example:</p> <pre><code>  if (score &gt;= 8) {\n    cs1010_println_string(\"A\");\n  } else {\n    if (score &gt;= 5) {\n      cs1010_println_string(\"B\");\n    } else {\n      if (score &gt;= 3) {\n        cs1010_println_string(\"C\");\n      } else {\n        cs1010_println_string(\"D\");\n      }\n    }\n  }\n</code></pre> <p>Let's focus on the case of printing <code>C</code>.  We should print <code>C</code> if the <code>score</code> is less than 5 but is 3 or higher.  Let's check if this is correct by finding out what we can assert wrt <code>score</code> just before printing <code>C</code>.  We first add the assertion to all the true blocks and the false block by negating the <code>if</code> condition.</p> <pre><code>  if (score &gt;= 8) {\n    cs1010_println_string(\"A\");\n  } else {\n    if (score &gt;= 5) {\n      // { score &gt;= 5 }\n      cs1010_println_string(\"B\");\n    } else {\n      // { score &lt; 5 }\n      if (score &gt;= 3) {\n        // { score &lt; 5 &amp;&amp; score &gt;= 3 }\n        cs1010_println_string(\"C\");\n      } else {\n        // { score &lt; 5 &amp;&amp; score &lt; 3 }\n        cs1010_println_string(\"D\");\n      }\n    }\n  }\n</code></pre> <p>We can see that, we are printing <code>C</code> when <code>score &lt; 5 &amp;&amp; score &gt;= 3</code>, which is what we want.  </p> <p>Note that the last assert <code>score &lt; 5 &amp;&amp; score &lt; 3</code> can be simplified to <code>score &lt; 3</code>.</p> <p>Note that we write assertions with Hoare's notation as C comments, so the assertions do not have to follow C's syntax.  We could have written them in English.  However, as much as possible, we use mathematical or programming notations to keep our assertion succinct and precise.</p>"},{"location":"notes/10-assert.html#de-morgans-law","title":"De Morgan's Law","text":"<p>To write an assertion for the false block, it is useful to know De Morgan's law, which tells us how to negate some logical expression.  Suppose we have two logical expressions <code>e1</code> and <code>e2</code>.</p> <ul> <li><code>!(e1 &amp;&amp; e2)</code> is the same as <code>(!e1) || (!e2)</code></li> <li><code>!(e1 || e2)</code> is the same as <code>(!e1) &amp;&amp; (!e2)</code></li> </ul> <p>We have seen it in action before. Recall the expression for Generation Z:</p> <p><code>(birth_year &gt;= 1995) &amp;&amp; (birth_year &lt;= 2005)</code>.  </p> <p>To check for NOT Generation Z, we can write it as</p> <p><code>!((birth_year &gt;= 1995) &amp;&amp; (birth_year &lt;= 2005))</code>,</p> <p>which according to De Morgan's law, is the same as</p> <p><code>!(birth_year &gt;= 1995) || !(birth_year &lt;= 2005)</code>,</p> <p>which is just</p> <p><code>(birth_year &lt; 1995) || (birth_year &gt; 2005)</code>,</p> <p>exactly as we have written before!</p> <p>Assertion and De Morgan's law are two thinking tools that will help us reason about our code.  We will revisit assertion when we discuss iterative algorithms.</p>"},{"location":"notes/10-assert.html#problem-set-10","title":"Problem Set 10","text":""},{"location":"notes/10-assert.html#problem-101","title":"Problem 10.1","text":"<p>Negate the following logical expression, then apply De Morgan's Law to simplify the resulting expression.  Assume all variable names mentioned are boolean variables.</p> <p>(a) <code>(x &gt; 1) &amp;&amp; (y != 10)</code></p> <p>(b) <code>!eating &amp;&amp; drinking</code></p> <p>(c) <code>(has_cs2030 || has_cs2113) &amp;&amp; has_cs2040c</code></p>"},{"location":"notes/10-assert.html#problem-102","title":"Problem 10.2","text":"<p>In the code below, replace <code>???</code> with the appropriate assertion.  What will be printed?</p> <pre><code>long score = 4;\nif (something) {\n  score = 10;\n} else {\n  score = 0;\n}\n// { ??? }\n\nif (score == 4) {\n    score = 1;\n} else {\n    score += 10;\n}\n// { ??? }\n\nif (score &gt;= 10) {\n    cs1010_println_string(\"ok\");\n} else {\n    cs1010_println_string(\"failed\");\n}\n</code></pre>"},{"location":"notes/11-loop.html","title":"Unit 11: Loops","text":""},{"location":"notes/11-loop.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>be able to identify the four components of a loop: initialization, body, update, and condition</li> <li>be able to express a computational solution as a loop with the four components above</li> <li>be able to implement a loop using either the <code>for,</code>while<code>, or</code>do-while` construct in C</li> <li>be able to trace through the control flows of each loop construct</li> <li>understand the correspondence between the different loop constructs</li> <li>be aware of the \"infinite loops\" bug, what causes it, and what to pay attention to avoid it.</li> </ul> <p>In Unit 8, you were introduced to writing code that follows one of two possible execution paths using the <code>if</code>-<code>else</code> statements, using a logical expression to decide which path to take.</p> <p>Sometimes, we want to execute one of the branches repeatedly (or iteratively), over and over again, until a certain logical condition is met.  You have seen this construct in the \\(max\\) and \\(sum\\) example, where we repeatedly go through the numbers in the list until \\(i == k\\).</p>"},{"location":"notes/11-loop.html#writing-loops","title":"Writing Loops","text":"<p>To write a loop, we need to think about the following four questions:</p> <ul> <li>what do we want to do repeatedly?</li> <li>what do we need to set up before repeating the above?</li> <li>what changes from one repetition to another?  </li> <li>how to decide if we should stop repeating (or conversely, continue repeating?)</li> </ul> <p>There is a fifth question that is as important as the above but is harder to answer (and not necessary for writing simple loops), so we will leave it to Unit 12.</p> <p>Let's revisit the example of <code>max</code>.  Here is the answer to the four questions:</p> <ul> <li> <p>What do we want to do repeatedly?  We want to compare the element \\(l_i\\) to \\(m\\), and update \\(m\\) to \\(l_i\\) if \\(l_i &gt; m\\).</p> </li> <li> <p>What do we need to set up before repeating the above?  We need to have some initial values of \\(m\\) and \\(i\\).  We set it up as \\(m = l_0\\) and \\(i = 1\\).</p> </li> <li> <p>What would be different each time we repeat the above?  Every time we repeat, \\(i\\) will be different.  To be more precise, \\(i\\) is one more than before.</p> </li> <li> <p>How to decide if we should continue repeating the above?  We stop when there is no more element to compare, i.e., \\(i\\) equals \\(k\\).  In other words, we continue if \\(i &lt; k\\).</p> </li> </ul> <p></p> <p>Let's consider another example.  We have seen how to compute factorial recursively.  Let's try to compute factorial using a loop.</p> <p>Recall that \\(n! = n \\times n-1 \\times n-2 .. 2 \\times 1\\).  Given \\(n\\), how do we find \\(n!\\) using a loop?  </p> <p>The idea to solve this with a loop is to start with the value \\(n\\), and repeatedly multiply another value \\(i\\), starting with \\(i = n - 1\\), then \\(i = n - 2\\), etc., until \\(i = 2\\).  We do not need to multiply with \\(i = 1\\) since it does not change the value.</p> <p>Like any other problem, we need to consider what are the variables we need to maintain.  In this case, we should maintain the partial product of the factorial and a variable \\(i\\) that corresponds to the value to multiply into the partial product.</p> <ul> <li>What do we want to do repeatedly?  Multiply \\(i\\) into the partial product.</li> <li>What do we need to set up before repeating the above?  We set up the partial product to be \\(n\\) and \\(i\\) to be \\(n - 1\\).</li> <li>What changes from one repetition to another?  \\(i\\) would decrease by one every time we repeat the above.</li> <li>How to decide if we should stop repeating (or conversely, continue repeating?)  We can stop when we have multiplied \\(i = 2\\) to the partial product.</li> </ul> <p>We can express the algorithm above using the following flowchart:</p> <p></p>"},{"location":"notes/11-loop.html#a-for-loop","title":"A <code>for</code> loop","text":"<p>Now that we have seen the four essential elements of a loop, let's write some loops in C.</p> <p>C provides three ways to write a loop.  Let's start with a simple one:  the <code>for</code> loop.  </p> <p>The <code>for</code> loop in C has the following syntax:</p> <pre><code>for (&lt;initialize&gt;; &lt;condition&gt;; &lt;update&gt;) {\n    &lt;body&gt;\n}\n</code></pre> <p>There are four components, corresponding to the four questions above:</p> <ul> <li>The <code>initialize</code> statement sets up the loop (i.e., \"What do we need to set up before repeating the above?\").  </li> <li>The <code>condition</code> statement indicates when we should stop repeating.  If it evaluates to <code>true</code>, it will cause the loop to continue, otherwise, the loop stops.</li> <li>The <code>update</code> statement is executed after every loop.  (i.e., \"What changes from one repetition to another?\")</li> <li>The <code>body</code> statement is the action that we want to do repeatedly.  </li> </ul> <p></p> <p>For the <code>initialize</code> and <code>update</code> statement, even though C allows us to include multiple initializations and multiple updates, it makes the code harder to read and understand.  C also allows us to have empty statements for <code>initialize</code>, <code>condition</code> and/or <code>update</code>.  As such, in CS1010, we will stick to performing one initialization and one update only.</p> <p>For example, in the setup phase for factorial, we should initialize the partial product to \\(n\\) and \\(i\\) to \\(n - 1\\), that's two assignments.  We commonly choose the index which we increment or decrement as we loop, hence we choose to initialize \\(i\\) in the <code>initialize</code> statement of the <code>for</code> loop, and leave the initialization of <code>product</code> to a separate assignment before the <code>for</code> loop.</p> <p>Here is an example on computing the factorial with a for loop:</p> <pre><code>long factorial(long n)\n{\n    long product = n;\n    for (long i = n - 1; i &gt;= 2; i -= 1) {\n        product *= i;\n    }\n    return product;\n}\n</code></pre> <p>The code above is almost correct.  We only need to handle the special case when <code>n</code> is 0.  The complete code for the function is thus:</p> <pre><code>long factorial(long n)\n{\n    if (n == 0) {\n        return 1;\n    }\n    long product = n;\n    for (long i = n-1; i &gt;= 2; i -= 1) {\n        product *= i;\n    }\n    return product;\n}\n</code></pre>"},{"location":"notes/11-loop.html#while-loop","title":"<code>while</code> Loop","text":"<p>The second way to write a loop in C is to use a <code>while</code> loop.  The while loop looks like this:</p> <pre><code>while (&lt;condition&gt;) {\n    &lt;body&gt;\n}\n</code></pre> <p>The statements in <code>&lt;body&gt;</code> will be executed if <code>&lt;condition&gt;</code> is true.  </p> <p>Note that the syntax of the <code>while</code> loop above does not contain the <code>&lt;initialize&gt;</code> and the <code>&lt;</code>update&gt;` components.  When we write the loop, however, we still need to think about them, and add them to the appropriate place in the code, as follows:</p> <pre><code>&lt;initialize&gt;\nwhile (&lt;condition&gt;) {\n    &lt;body&gt;\n    &lt;update&gt;\n}\n</code></pre> <p>The corresponding flowchart for <code>while</code> is:</p> <p></p> <p>Compare the flowchart for <code>while</code> to the flowchart for <code>for</code> earlier.  You will see that they are the same!</p> <p>Here is the <code>while</code> version of the <code>factorial</code> function: <pre><code>long factorial(long n)\n{\n    if (n == 0) {\n        return 1;\n    }\n    long product = n;\n    long i = n - 1;\n    while (i &gt;= 2) {\n        product *= i;\n        i -= 1;\n    }\n    return product;\n}\n</code></pre></p> <p>In the <code>while</code> loop, however, we can be more flexible in terms of what we want to do inside the loop.  Technically, there is no difference between <code>update</code> and <code>body</code> since they are just a bunch of C statements.  We can interleave <code>&lt;update&gt;</code> and <code>&lt;body&gt;</code> or execute <code>&lt;update&gt;</code> first before <code>&lt;body&gt;</code>, depending on the algorithm.  With <code>for</code> loop, there is no such flexibility as <code>&lt;update&gt;</code> has to be executed after <code>&lt;body&gt;</code>.</p>"},{"location":"notes/11-loop.html#a-do-while-loop","title":"A <code>do-while</code> loop","text":"<p>The third way we can write a loop in C is to use a <code>do-while</code> loop.  The <code>do-while</code> loop is very similar to <code>while</code>, except that the body of the loop is guaranteed to be executed at least once.  </p> <pre><code>&lt;initialize&gt;\ndo {\n    &lt;body&gt;\n    &lt;update&gt;\n} while (&lt;condition&gt;);\n</code></pre> <p></p> <p>Similar to the <code>while</code> loop, the <code>&lt;body&gt;</code> component and <code>&lt;update&gt;</code> component in the loop do not have to be in order.</p> <p>Alert</p> <p>There is a semicolon <code>;</code> after a <code>do-while</code> loop.</p> <p>Let's look at an example where using <code>do-while</code> is more natural than <code>while</code>.</p>"},{"location":"notes/11-loop.html#example-guess-a-number","title":"Example: Guess a Number","text":"<p>Let's write a program that plays a game with the user.  The program generates a random integer number between 1 and 100.  The user will guess what that number is.  If the user guesses correctly, the program congratulates the user.  Otherwise, the program tells the user whether the guess is too high or too low, and let the user guess again.  This process repeats until the guess is correct.</p> <p>Note that, here, the user needs to guess at least once, so it is more natural to use a <code>do</code>-<code>while</code> loop than a <code>while</code> or a <code>for</code>.</p>"},{"location":"notes/11-loop.html#answering-the-four-questions","title":"Answering The Four Questions","text":"<ul> <li>What do we want to do repeatedly?  We want to read the guess from the user and respond to the user.</li> <li>What do we need to set up before repeating the above?  We need to generate a random integer between 1 and 100.</li> <li>What changes from one repetition to another?  The guess may be different.</li> <li>How to decide if we should continue repeating the above?  We stop when the guess is correct.</li> </ul>"},{"location":"notes/11-loop.html#designing-the-flowchart","title":"Designing the Flowchart","text":"<p>Here is the flowchart of the steps described above.</p> <p></p>"},{"location":"notes/11-loop.html#the-c-code","title":"The C code","text":"<p>The entire corresponding program is shown below:</p> <pre><code>#include &lt;stdlib.h&gt;\n#include &lt;sys/times.h&gt;\n#include \"cs1010.h\"\n\nint main()\n{\n  // Initialize the random number generator\n  srandom(times(0));\n\n  // Generate a random number between 1 and 100\n  long answer = (random() % 100) + 1;\n\n  long guess;\n  do {\n    // Read guess and feedback to user\n    guess = cs1010_read_long();\n    if (guess &gt; answer) {\n      cs1010_println_string(\"too high\");\n    } else if (guess &lt; answer) {\n      cs1010_println_string(\"too low\");\n    }\n  } while (guess != answer);\n\n  // { guess == answer }\n  cs1010_println_string(\"you got it.  congrats!\");\n}\n</code></pre> <p>I will not go into details of what <code>srandom(times(0))</code> means.  You can look it up on your own if you are interested (InfoSec students may want to do this as generating a good random number is key to keeping systems secure).</p> <p>The function <code>random()</code> generates a random integer, which we limit to 0 to 99 by modulo-ing it with 100.  We then add 1 to it to a number between 1 and 100, inclusive.</p>"},{"location":"notes/11-loop.html#infinite-loop","title":"Infinite Loop","text":"<p>One of the common bugs that programmers encounter when writing loops is the infinite loop.  An infinite loop is a loop that never terminates until an external input CtrlC terminates the program.</p> <p>Consider the slight variation of the <code>factorial</code> function below:</p> <pre><code>long factorial(long n)\n{\n    if (n == 0) {\n        return 1;\n    }\n    long product = n;\n    long i = n - 1;\n    while (i != 2) {\n        product *= i;\n        i -= 1;\n    }\n    return product;\n}\n</code></pre> <p>What is the return value of <code>factorial(-2)</code>?  Take a moment to trace through the code.</p> <p>The answer is that <code>factorial(-2)</code> will never return!  Since <code>i</code> is initialized to <code>-3</code> on Line 7, and <code>i</code> only get smaller every time Line 10 is called.  So, the terminating condition <code>i != 2</code> will never be true.  As a result, the loop never terminates.</p> <p>Let's examine under what condition would a loop continue forever, using three of the loop components: <code>&lt;initialize&gt;</code>, <code>&lt;update&gt;</code>, and <code>&lt;condition&gt;</code>.  </p> <p>Consider the variable(s) used in <code>&lt;condition&gt;</code> and the condition in which <code>&lt;condition&gt;</code> evaluates to false.  This is the terminal state of the loop.  Now consider how these variables are set up in <code>&lt;initialize&gt;</code>.  This is the initial state.  For the loop to terminate, the sequence of operations performed by the <code>&lt;update&gt;</code> component must transit these variables from the initial state to the terminal state.  Otherwise, the loop will never terminate.</p> <p>As an example, let's consider what happens when we call <code>factorial(10)</code>.  The terminal state is <code>{ i == 2 }</code>.  The initial state is <code>{ i == 9 }</code>.  The update is performed by subtracting 1 from <code>i</code> in every loop.  So the value of <code>i</code> starts at 9, and it becomes 8, 7, 6, .. and eventually the condition <code>i == 2</code> will be true, <code>i != 2</code> will be false, and the loop terminates.</p> <p>As an example, let's consider what happens when we call <code>factorial(-2)</code>.  The terminal state is <code>{ i == 2 }</code>.  The initial state is <code>{ i == -3 }</code>.  The update is performed by subtracting 1 from <code>i</code> in every loop.  So the value of <code>i</code> starts at -3, and it becomes -4, -5, -6, ...  The <code>&lt;update&gt;</code> condition is moving the state away from the terminal state.  So this loop never terminates!<sup>1</sup></p> <p>To prevent the infinite loop bug, when developing your <code>&lt;initialize&gt;</code>, <code>&lt;update&gt;</code>, and <code>&lt;condition&gt;</code>, make sure that <code>&lt;update&gt;</code> always nudges the state from the initial state stated in <code>&lt;initialize&gt;</code> to the terminating condition specified by <code>&lt;condition&gt;</code> at each iteration and the terminal state is achievable eventually.</p> <p>Now, consider the version of <code>factorial</code> where the terminating condition is <code>{ i &lt; 2 }</code>.  </p> <pre><code>long factorial(long n)\n{\n    if (n == 0) {\n        return 1;\n    }\n    long product = n;\n    long i = n - 1;\n    while (i &gt;= 2) {\n        product *= i;\n        i -= 1;\n    }\n    return product;\n}\n</code></pre> <p>This version does not have the possibility of an infinite loop.  Regardless of the initial state (i.e., regardless of what the value of <code>i</code> is initialized to), we will always reach the terminal state.</p>"},{"location":"notes/11-loop.html#problem-set","title":"Problem Set","text":""},{"location":"notes/11-loop.html#problem-111","title":"Problem 11.1","text":"<p>Here is another version of the <code>factorial</code> function:</p> <pre><code>long factorial(long n)\n{\n    long i = n - 1;\n    long product;\n    for (product = n; i &gt;= 2; product *= i)\n    {\n        i -= 1;\n    }\n    return product;\n}\n</code></pre> <p>Does this code run correctly?  If it is incorrect, explain what is wrong and suggest a fix.  (Hint: translate this to the corresponding flowchart and trace through the flowchart).</p>"},{"location":"notes/11-loop.html#problem-112","title":"Problem 11.2","text":"<p>Trace the following algorithms:</p> <pre><code>long mystery(long n, long k) {\n    long something = n;\n    long count = -1;\n    while (something &gt;= 1) {\n        something /= k;\n        count += 1;\n    }\n    return count;\n}\n</code></pre> <p>(a) What is the return value when</p> <ul> <li><code>n</code> is 8 and <code>k</code> is 2?  </li> <li><code>n</code> is 81 and <code>k</code> is 3?  </li> <li><code>n</code> is 100 and <code>k</code> is 5?</li> </ul> <p>Answer these questions by reading the code first, instead of trying it out on a computer (you can verify later).</p> <p>(b) What is the mathematical expression that our mystery function here is trying to compute based on the examples above?</p> <p>(c) Give a pair of inputs that would cause the function to return the wrong answer.</p> <p>(d) Give a pair of inputs that would cause the function to loop forever.</p> <ol> <li> <p>Since a <code>long</code> variable can only store a limited range of values, eventually <code>i</code> will overflow and become positive again and reach the value 2.  So the loop will still terminate, albeit after a long time (no pun intended) if we consider overflow.  For CS1010, we still consider such a loop as an infinite loop.\u00a0\u21a9</p> </li> </ol>"},{"location":"notes/12-invariant.html","title":"Unit 12: Reasoning About Loops with Invariants","text":""},{"location":"notes/12-invariant.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>understand how assertions can be derived in a loop;</li> <li>understand how assertions can help us understand the behavior of a loop;</li> <li>understand what is a loop invariant;</li> <li>be able to argue why a given loop invariant is true;</li> <li>be able to derive a simple loop invariant of a given loop.</li> </ul>"},{"location":"notes/12-invariant.html#is-a-loop-correct","title":"Is A Loop Correct?","text":"<p>We have seen how we can use assertions to reason about the state of our program at different points of execution for conditional <code>if</code>-<code>else</code> statements.  We can apply the same techniques to loops.  Consider a variation of our <code>factorial</code> function below:</p> Calculating factorial of a number using while loop<pre><code>long factorial(long n)\n{\n  long product = 1;\n  long i = 1;\n  while (i &lt; n) {\n    i += 1;\n    product *= i;\n  }\n  return product;\n}\n</code></pre> <p>Unlike the one we have seen in the previous unit, this simpler version computes the factorial starting from <code>i</code> = 1, 2, 3, up to <code>n</code>.</p> <p>Before we continue, let's label a few critical points of execution in the code with A - E:</p> Calculating factorial of a number using while loop<pre><code>long factorial(long n)\n{\n  long product = 1;\n  long i = 1;\n  // Line A\n  while (i &lt; n) {\n    // Line B\n    i += 1;\n    // Line C\n    product *= i;\n    // Line D\n  }\n  // Line E\n  return product;\n}\n</code></pre> <p>We want to check if the code correctly computes the factorial of <code>n</code>.  In other words, we want to be able to assert at Line E that <code>{ product == n! }</code>.  Let's see if we can do that by writing down the assertions at Lines A - E, relating <code>product</code>, <code>i</code>, and <code>n</code>.</p> <p>To do so, it is important to first understand what the loop in the code above is computing.  The loop is accumulating partial result of factorial of <code>n</code> into <code>product</code>.  At each loop, it computes <code>product</code> to be <code>i!</code>.   To show that the assertion <code>{ product == n! }</code> is true at Line E, we first need to show that <code>{ product == i! }</code> is true at Line D, i.e., at the end of every iteration.</p>"},{"location":"notes/12-invariant.html#first-iteration","title":"First Iteration","text":"<p>Let us show that <code>{ product == i! }</code> for the first iteration.  The first time we enter the loop, <code>i</code> is 1 and <code>product</code> is 1 at Line B.  At Line C, <code>i</code> becomes 2.   At Line D, we have multiplied <code>i</code> into <code>product</code>, so <code>product</code> becomes 2.  The assertion  <code>{ product == i! }</code> is true at Line D at the end of the first iteration.</p>"},{"location":"notes/12-invariant.html#every-iteration","title":"Every Iteration","text":"<p>Now, let's consider the second iteration.  Since the assertion <code>{ product == i! }</code> is true at Line D at the end of the first iteration, and the variables <code>product</code> and <code>i</code> haven't changed, we can assert that <code>{ product == i! }</code> is true at Line B at the beginning of the second iteration.  You can substitute the value of <code>i</code> and trace through the body of the loop, and see that, at the end of the second iteration, at Line D, the assertion <code>{ product == i! }</code> still holds.</p> <p>We could do this for the third iteration, fourth iteration, and so on.  But, we would not be able to show that the assertion holds at the end of every iteration for any <code>n</code>.</p> <p>A more succinct way to show that the assertion holds for every iteration is to use wishful thinking.  To show that <code>{ product == i! }</code> at the end of every loop, we only need to show that:</p> <ul> <li>the assertion holds at the end of the first loop;</li> <li>if the assertion holds at the end of the \\(k\\)-th loop, then, it holds at the end of the \\((k+1)\\)-th loop.</li> </ul> <p>We have already shown that the assertion holds after the first iteration.  So, let's assume that the assertion holds at the end of the \\(k\\)-th iteration.  At the beginning of the \\((k+1)\\)-iteration, we know that <code>{ product == i! }</code> is true, since it is true at the end of the previous iteration.  Now consider what happens when we increment <code>i</code> at Line 8.  At Line C, the assertion <code>{ product == i! }</code> is no longer true.  Instead, since <code>i</code> is one more than before, we now have <code>{ product == (i-1)! }</code>.</p> <p>Next, on Line 10, we set <code>product</code> to <code>product * i</code>, i.e., <code>(i-1)! * i</code>, which is just <code>i!</code>.  So, we get <code>{ product == i! }</code> again at Line D of the \\(k+1\\) iteration.</p>"},{"location":"notes/12-invariant.html#after-the-loop","title":"After The Loop","text":"<p>We have shown that <code>{ product == i! }</code> at Line D.  Now, let's consider what happens when we eventually exit the loop.  Between Line D and Line E, the variables <code>product</code> and <code>i</code> remain the same.  So, we can still assert <code>{ product == i! }</code>.  </p> <p>Additionally, since we exited the loop, we know that <code>{ i == n }</code>.  Putting the two together, we have <code>{ product == n! }</code> at Line E.</p>"},{"location":"notes/12-invariant.html#before-the-loop","title":"Before The Loop","text":"<p>We showed that the code correctly computes <code>n!</code> if it enters the loop.  One last thing for us to check is that the code is correct even if it does not enter the loop.  In this case, the execution goes from Line A to Line E directly.</p> <p>Assuming that <code>n</code> is non-negative, we have two cases where this could happen: both <code>i</code> and <code>n</code> are 1, or <code>n</code> is 0. In either case, We can assert that <code>{ product == n! }</code> at Line E.  So the code is still correct even if we do not enter the loop!</p> <p>The way we argue that <code>{ product == i! }</code> is true above is similar to a mathematical proof technique called proof by induction.  Induction is taught in CS1231.  We do not require you to give a formal proof in CS1010, however.</p> <p>Here is the code again, with annotated assertions</p> Calculating factorial of a number using while loop (with assertion)<pre><code>long factorial(long n)\n{\n  long product = 1;\n  long i = 1;\n  // { product == i! }\n  while (i &lt; n) {\n    // { product == i! }\n    i += 1;\n      // { product == (i-1)! }\n    product *= i;\n    // { product == i! }\n  }\n  // { product == i! }\n  // { i == n || n == 0 }\n  // { product == n! }\n  return product;\n}\n</code></pre>"},{"location":"notes/12-invariant.html#loop-invariant","title":"Loop Invariant","text":"<p>In the last unit, we say that there are five questions that we have to think about when designing loops.  But we only talked about four at that time.  The fifth question is: what is the loop invariant?  A loop invariant is an assertion that is true before the loop, after each iteration of the loop, and after the loop.  Thinking about the loop invariant is helpful to convince ourselves that a loop is correct, or to identify bugs in a loop.</p> <p>In the example above, <code>{ product == i! }</code> is an invariant, since it is true before the loop (Line A), after each iteration of the loop (Line D), and after the loop (Line E).</p> <p>To argue that an invariant is true, we can use the same approach above, i.e., we need to argue that:</p> <ul> <li>it is true before entering the loop.</li> <li>it is true at the end of the first iteration of the loop</li> <li>if it is true at the end of the \\(k\\)-th iteration of the loop, then it is true at the end of the \\((k+1)\\)-th iteration.</li> <li>it is true when we exit the loop.</li> </ul>"},{"location":"notes/12-invariant.html#when-is-an-invariant-useful","title":"When is an Invariant Useful","text":"<p>As we have seen in the example above, an invariant is useful thinking and reasoning tool to help us convince ourselves that our loop behaves correctly (e.g., <code>{ product == n! }</code>).</p> <p>Loop invariant, however, is not unique.  We can write down infinitely many loop invariants.  A good invariant, however, will lead us to an assertion that we want to see (e.g., relating <code>product</code> to <code>n</code>).  We can derive other invariants in our code (such as <code>{ n != 0 }</code> below) that do not contribute to the reasoning of the behavior of our loop.  Such invariants should be avoided.</p> <pre><code>long factorial(long n)\n{\n  if (n == 0) {\n      return 1;\n  }\n  long product = 1;\n  long i = 1;\n  // { n != 0 }\n  while (i &lt; n) {\n    i += 1;\n    product *= i;\n    // { n != 0 }\n  }\n  // { n != 0 }\n  return product;\n}\n</code></pre>"},{"location":"notes/12-invariant.html#problem-set-12","title":"Problem Set 12","text":""},{"location":"notes/12-invariant.html#problem-121","title":"Problem 12.1","text":"<p>(a) Consider the algorithm to find the maximum among a list of integers \\(L\\) with at least one element (\\(k &gt; 0\\)) below:</p> <p></p> <p>The loop invariant for this loop must hold at the three points marked with the red dots: before the loop, after each iteration of the loop, and after the loop.</p> <p>State the loop invariant, explain why it holds at the three points above, and threfore argue that the loop above correctly finds the maximum among the elements of the list \\(L\\).  </p> <p>(b) Now, consider a slightly different algorithm to find the maximum among a list of integers \\(L\\) with at least one element (\\(k &gt; 0\\)) below:</p> <p></p> <p>Explain why you cannot find a loop invariant similar to Part (a) above, and therefore show that the algorithm does not correctly find the maximum in certain cases.</p>"},{"location":"notes/13-call-stack.html","title":"Unit 13: Call Stack","text":"<p>In this unit, we will delve deeper into how variables are stored in the memory and what happens when we call a function.</p>"},{"location":"notes/13-call-stack.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>understand the purpose of the call stack</li> <li>be aware that the stack frame represents the memory allocated to a particular function call</li> <li>be aware that the stack frame for a function is deallocated once the function terminates</li> <li>understand what occurs in a stack frame when a variable is declared</li> <li>understand what occurs in a stack frame when a variable is assigned</li> <li>understand how function parameters are handled within the stack frame</li> <li>be able to trace the contents of the call stack through nested function calls</li> <li>be aware that there are three different types of variables: automatic, global, and static</li> <li>be aware that the operating system limits the size of the call stack for each program</li> </ul>"},{"location":"notes/13-call-stack.html#stack-frame","title":"Stack Frame","text":"<p>Modern OS typically divides the memory into several regions.  The region that we are concerned with for now is called the call stack. Every function invocation causes the OS to allocate some memory on the call stack to store (among other things) the parameters passed into the function and the variables declared and used in the function.  The memory allocated to each function call is called a stack frame.  When a function returns, the stack frame is deallocated and freed up for other uses.</p> <p>Let's start with the following simple program as an example.</p> <pre><code>int main()\n{\n  long x = 1;\n  long y;\n}\n</code></pre> <p>When the OS runs the program above, it invokes, or calls, the function <code>main</code>.  A new stack frame is created for <code>main</code>.  There are two variables <code>x</code> and <code>y</code> declared in <code>main</code>.  Recall from Unit 2 that a variable is a location in the memory which holds a value.  Thus, the stack frame of the <code>main</code> will include these two variables.  We initialize <code>x</code> to 1 in the code above, so the value 1 will be placed in the memory location of <code>x</code>.  The variable <code>y</code> remains uninitialized, so it will contain whatever value that happens to be in the memory at that time.</p> <p></p> <p>Now, let's consider the program<sup>1</sup>:</p> <pre><code>long add(long a, long b) {\n  long sum;\n  sum = a + b;\n  return sum;\n}\n\nint main()\n{\n  long x = 1;\n  long y;\n  y = add(x, 10);\n}\n</code></pre> <p>Now, the program invokes the function <code>add</code> with two parameters, using <code>x</code> and 10 as arguments.  What the OS does when <code>add</code> is called, is that it allocates another stack frame for <code>add</code>.  We can visualize the stack frame for <code>add</code> as being placed on top of the stack frame of <code>main</code>.  The stack frame for <code>add</code> includes two variables corresponding to the parameters <code>a</code>, <code>b</code>, and the variable <code>sum</code> declared in the function <code>add</code>.</p> <p>When the stack frame for <code>add</code> is created, <code>sum</code> is uninitialized, but <code>a</code> is initialized to whatever the value of <code>x</code> is when the function is invoked (1 in this example), and <code>b</code> is initialized to 10 since that is the argument passed into <code>add</code>.</p> <p></p> <p>After the stack frame for <code>add</code> is set up, the code is executed.  The memory location for <code>sum</code> is then initialized to the sum of <code>a</code> and <code>b</code> (11 in this example), and the return statement is executed. </p> <p></p> <p>When a function returns, the stack frame for <code>sum</code> is removed.  The variables <code>sum</code>, <code>a</code>, <code>b</code> crumble into dust and no longer exist in the memory.  The value of the variable being returned (<code>sum</code> in this case) is then copied back to the stack frame of the <code>main</code> (the caller).  In this example, this value is copied into the memory location of <code>y</code>.</p> <p></p> <p>What would happen if we change the value of <code>a</code> within <code>add</code>?</p> <pre><code>long add(long a, long b) {\n  sum = a + b;\n  a = 42;  // change a\n  return sum;\n}\n\nint main()\n{\n  long x = 1;\n  long y;\n  y = add(x, 10);\n}\n</code></pre> <p>In this example, we change the value of <code>a</code> in the call stack of <code>add</code> to 42.  This does not affect any variable in <code>main</code>, since the changes apply only within the stack frame of <code>add</code>.</p> <p>A common bug by beginners is to try to write a function this way:</p> <pre><code>void add(long sum, long a, long b) {\n  sum = a + b;\n}\n\nint main()\n{\n  long x = 1;\n  long sum;\n  add(sum, x, 10);\n}\n</code></pre> <p>Here, there are two versions of <code>sum</code>, one in the stack frame of <code>main</code>, the other in the stack frame of <code>add</code>.  When we change <code>sum</code> in <code>add</code>, we are changing a local copy which will eventually get deleted.  The assignment to <code>sum</code> in Line 2 does not affect the variable <code>sum</code> on Line 8 of <code>main</code>.</p> <p>This explanation explains why a function is a black box, we can only pass in parameters and get a value in return.  Nothing else gets in and out.  There are no \"side effects\" -- whatever happens in the function, stays in the function and does not affect the caller (except if it reads or writes to the standard input/output).  Such a function is sometimes called a \"pure function\".</p> <p>Pure functions simplify the reasoning about our code.  For instance, in the code snippet below, we can still be sure that <code>x</code> is 1 and <code>sum</code> is 0, after invoking the function <code>add</code>, without knowing what is happening inside. </p> <pre><code>  long x = 1;\n  long sum = 0;\n  add(sum, x, 10);\n  // { x == 1 }\n  // { sum == 0 }\n</code></pre> <p>There is a paradigm of programming called functional programming where one of its tenets is that a program should consist of only pure functions.  Functional programming languages such as Haskell and F# provide language support for functional programming.  C, however, does not enforce such a functional paradigm -- it is up to us programmers to enforce it.  As we will see very soon, some core features of C actually introduce impurity into functions.</p>"},{"location":"notes/13-call-stack.html#automatic-variable","title":"Automatic Variable","text":"<p>Because of the way the memory for the variables are automatically allocated and deallocated when a function is invoked and when the function returns, we call these variables automatic variables or auto variable for short.  </p> <p>There are two other types of variables, global variable, which we have mentioned is a very very bad programming practice in Lecture 5 and is banned from CS1010, and static variable, which could be useful on rare occasions, but it is again a bug-prone feature of C and so using <code>static</code> variable in CS1010 is not allowed.</p>"},{"location":"notes/13-call-stack.html#stack-size","title":"Stack Size","text":"<p>The OS typically reserves a limited amount of memory for each program for the stack.  You can find out, on your system, what is the maximum allocated stack size with the command <pre><code>ulimit -s\n</code></pre></p> <p>On our CS1010 PE hosts, the limit is 8 MB. </p>"},{"location":"notes/13-call-stack.html#problem-set-13","title":"Problem Set 13","text":""},{"location":"notes/13-call-stack.html#problem-131","title":"Problem 13.1","text":"<p>Trace through what gets stored in the call stack when we run the following programs:</p> <pre><code>#include &lt;math.h&gt;\n\nlong square(long x)\n{\n  return x*x;\n}\n\ndouble hypotenuse_of(long base, long height)\n{\n  return sqrt(square(base) + square(height));\n}\n\nint main()\n{\n  hypotenuse_of(3, 4);\n}\n</code></pre>"},{"location":"notes/13-call-stack.html#problem-132","title":"Problem 13.2","text":"<p>Trace through what gets stored in the call stack when we run the following programs:</p> <pre><code>#include \"cs1010.h\"\n\nlong factorial(long n)\n{\n  if (n == 0) {\n    return 1;\n  }\n  return factorial(n-1) * n;\n}\n\nint main()\n{\n  factorial(3);\n}\n</code></pre> <ol> <li> <p>The variable <code>sum</code> is not necessary and the function can be better written as a one-liner <code>return a + b;</code>.  But I introduce the additional variable <code>sum</code> here to make the example more meaningful in explaining about stack frame.\u00a0\u21a9</p> </li> </ol>"},{"location":"notes/14-array.html","title":"Unit 14: Fixed-Length Array","text":""},{"location":"notes/14-array.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>understand the concept of a compound data type</li> <li>be able to manipulate arrays in C, including:<ul> <li>declaring an array of a particular type and length</li> <li>accessing the elements within an array</li> </ul> </li> <li>be aware that when declaring arrays, they are done so with a fixed-length</li> <li>be able to define an array as a function parameter</li> <li>be aware of the difference of pass by value and pass by reference, and that arrays, as parameters correspond to the latter, and consequently, the need to also indicate the length of an array as another parameter</li> <li>be aware that we cannot change the length of an array, only declare a new one of a different length</li> <li>be aware that we may check the length of an array using the <code>sizeof</code> operator</li> <li>be aware that VLA should be avoided in general, and is banned in CS1010</li> </ul>"},{"location":"notes/14-array.html#your-first-compound-data-type","title":"Your First Compound Data Type","text":"<p>We now look at the first of the two compound data types in C -- arrays.  </p> <p>An array is a data type that can hold one or more values.  An array variable can only store values of the same type \\(T\\).  We say that the array variable is an array of \\(T\\).  For instance, we can declare a variable <code>list</code> to be an array of <code>long</code>, in which case, <code>list</code> can hold one or more <code>long</code> values.  </p> <p>There are three different types of arrays in C:</p> <ul> <li>A fixed-size array is an array in which the size is known during compile time.</li> <li>A variable-length array (VLA) is an array in which the size is variable (known only during run-time) and is allocated on the stack.</li> <li>A dynamically allocated array is an array in which the size is variable (known only during run-time) and is allocated on the heap.</li> </ul> <p>In this unit, we will focus on fixed-size arrays.  We will explain why VLA should not be used.  We will leave our discussion of dynamically allocated arrays to later units. </p>"},{"location":"notes/14-array.html#array-declaration","title":"Array Declaration","text":"<p>Let's first look at how we can declare an array variable.  The declaration syntax for an array in C takes the following form:</p> <pre><code>long list[10];\n</code></pre> <p>We use the square bracket <code>[</code> and <code>]</code> to indicate that the variable <code>list</code> is an array.  The number <code>10</code> indicates that <code>marks</code> holds 10 <code>long</code> values.  The size of the array must be an integer value, not a variable.</p> <p>Just like any other local variables, declaring an array does not initialize it.  An uninitialized array contains whatever values happened to be in the memory at that time.</p>"},{"location":"notes/14-array.html#accessing-the-array-elements","title":"Accessing the Array Elements","text":"<p>We can access the array elements using the index of the element, starting from 0.  For instance, to initialize the first three elements of a list to 1, 2, and 4, respectively, we can write:</p> <pre><code>long list[10];\nlist[0] = 1;\nlist[1] = 2;\nlist[2] = 4;\n</code></pre> <p>Same syntax, two different meanings</p> <p>Beginners tend to confuse with the following: <pre><code>long list[10];\nlist[10] = 1;\n</code></pre></p> <p><code>list[10]</code> appears twice but it has two different meanings.  In the first line, we are declaring an array called <code>list</code> of size 10.  In the second line, we are using the array <code>list</code>, and accessing the element with index 10 (which is not valid). </p>"},{"location":"notes/14-array.html#array-initialization","title":"Array Initialization","text":"<p>Initializing a large array using the method above could be tedious.  Alternatively, we can initialize an array using a list of values when we declare the array.  </p> <pre><code>long list[10] = {1, 2, 3, 1, 5, 10, 10, 4, 5, 3, };\n</code></pre> <p>If we do not specify a value during initialization, it will be set to 0 by default.  </p> <pre><code>long list[10] = {1, 2, 3, 1, 5, 10, 10, 4, };\n// list[8] and list[9] are both initialized to 0\n</code></pre> <p>Note that, after the declaration, we can no longer use this technique to reinitialize or initialize the array.</p> <pre><code>long list[10];\nlist = {1, 2, 3, 1, 5, 10, 10, 4, 5, 3, };  // error\n</code></pre>"},{"location":"notes/14-array.html#example-array-as-lookup-table","title":"Example: Array as Lookup Table","text":"<p>One useful application of a pre-initialized array is to use it as a lookup table.  Consider the problem of checking if a given month and day is a valid pair.  One is to write the code as follows:</p> <pre><code>bool is_valid_date(long month, long day) \n{\n  if (month &lt; 1 || month &gt; 12 || day &lt; 1) {\n    return false;\n  }\n  if (month == 2) {\n    return (day &lt;= 28);\n  } \n  if (month == 1 || month == 3 || month == 5 || month == 7 || \n      month == 8 || month == 10 || month == 12) {\n    return (day &lt;= 31);\n  }\n  // the rest of the months\n  return (day &lt;= 30);\n}\n</code></pre> <p>The long chain of logical conditions are hard to read and prone to errors.</p> <p>An alternative is to store the number of days in a month in a look-up table.  We do so by declaring an array with twelve elements and storing the number of days in month \\(i\\) in array position indexed \\(i-1\\).</p> <pre><code>bool is_valid_date(long month, long day)\n{\n  long days_in_month[12] = {\n    31, // Jan\n    28, // Feb (non leap year)\n    31, // Mar\n    30, // Apr\n    31, // May\n    30, // Jun\n    31, // Jul\n    31, // Aug\n    30, // Sep\n    31, // Oct\n    30, // Nov\n    31  // Dec\n  };\n  if (month &lt; 1 || month &gt; 12 || day &lt; 1) {\n    return false;\n  }\n  return (day &lt;= days_in_month[month - 1]);\n}\n</code></pre> <p>This approach separates the data (number of days in a month) from the control flow.  In cases where the data may change, separating the data from the control makes the code easier to maintain and update to changing requirements.</p>"},{"location":"notes/14-array.html#passing-array-as-parameter-to-functions","title":"Passing Array as Parameter to Functions","text":"<p>C supports several syntaxes for passing an array as a parameter into a function.  The following function declarations mean the same thing.</p> <p>a. Passing in the array with <code>[</code>, <code>]</code> and the constant size of the array.     <pre><code>void foo(long list[10]) { \n  :\n}\n</code></pre></p> <p>b. Passing in the array with <code>[</code>, <code>]</code> <pre><code>void foo(long len, long list[]) { \n  :\n}\n</code></pre></p> <p>Option (a) explicitly tells the reader of the code that this function expects an array called <code>list</code> of size 10.  Option (b) passes both the length of the array <code>len</code> and the array <code>list</code> to the function.   Note that <code>len</code> is not explicitly related to <code>list</code> in C, and would have to depend on the comments of the code to tell the reader what <code>len</code> is for. </p> <p>A third way of passing in an array</p> <p>For (b), we could also write it as: <pre><code>void foo(long len, long list[len]) { \n  :\n}\n</code></pre></p> <p>This way, the code informs the reader that <code>len</code> represents the size of the array.  While this code is more readable, it unfortunately gets treated as a variable-length array and triggers a warning by <code>clang</code>.  As such, we avoid using this syntax in CS1010.</p> <p>To pass in an array as an argument, we just need to specify the name of the array:</p> <pre><code>long list[3] = {1, 2, 3};\nfoo(3, list);  // assuming `foo` is declared with Option (b)\n</code></pre>"},{"location":"notes/14-array.html#example-finding-max","title":"Example: Finding Max","text":"<p>We can now revisit the flowchart for \\(max\\) and write the function in C:</p> <pre><code>long max(long list[], long length)\n{\n  long max_so_far = list[0];\n  for (long i = 1; i != length; i += 1) {\n    if (list[i] &gt; max_so_far) {\n      max_so_far = list[i];\n    }\n  }\n  return max_so_far;\n}\n</code></pre>"},{"location":"notes/14-array.html#array-is-passed-by-reference","title":"Array is Passed By Reference","text":"<p>An array variable is treated differently than a variable of other types in C in several ways.  One of these differential treatments has caught many new programmers by surprise -- it violates the pureness of functions.  Whatever happens in the function no longer just stays in the function.  Let's consider the following example:</p> <pre><code>void foo(long a[2]) {\n  a[0] = a[1];\n}\n\nint main()\n{\n  long a[2] = {100, 200};\n  foo(a);\n  cs1010_println_long(a[0]);\n  cs1010_println_long(a[1]);\n}\n</code></pre> <p>If <code>foo</code> is a pure function with no side effects, then calling <code>foo</code> should not change <code>a</code>.  But if you run the code above, you will see that <code>a[0]</code> has changed to <code>200</code>!</p> <p>When we pass <code>a</code> into <code>foo</code>, what do we push onto the stack?  Unlike other variable types, we do not copy the whole array onto the stack.  One reason for this is that an array can be huge -- copying the whole array onto the stack for every function call with the array as an argument can be slow.  Thus, in C, when an array is passed as an argument, only the memory address of the array is copied onto the stack.</p> <p>The following figures illustrate this point.  First, let's see how an array is laid out in the memory.  When we declare an array <code>a</code> with two elements, the appropriate space is reserved on the stack.  The elements of the array are stored consecutively in the memory.  This implies, that, it is sufficient to know where the first element of the array is stored.  With that memory address, we can find out where the rest of the elements in the array are, and by reading the content of that memory location, find out what their values are.  This \"trick\" is what allows C to pass an array into a function efficiently.</p> <p></p> <p>When we call <code>foo</code>, we push the memory address of the array (i.e., of the first element of the array), on the stack.  With this memory address, <code>foo</code> can now read the elements of the array <code>a[0]</code> and <code>a[1]</code>, by accessing the memory of the array on the stack frame of <code>main</code>.  If <code>foo</code> modifies to the array, then the array on the stack frame of <code>main</code> is updated as well.</p> <p></p> <p>This mechanism of passing arguments into a function is called \"pass by reference\", as opposed to \"pass by value\", in which we make a copy of the variable on the stack.</p>"},{"location":"notes/14-array.html#mitigating-impurity-with-const","title":"Mitigating Impurity with <code>const</code>","text":"<p>C does not give us any choice but to pass in an array by reference, making our job to reason about the behavior of our code difficult.  Every time we pass an array into a function, we would have to read through the code of that function, to ensure that the array is not modified.  Fortunately, C provides a mechanism to make our life better: the <code>const</code> keyword.</p> <p>The <code>const</code> keyword is a qualifier that indicates that a variable is read-only, and therefore cannot be modified.  A good programmer should always communicate to the reader of the code if a call-by-reference parameter will be modified or not.  A better way to write our <code>max</code> is:</p> <pre><code>long max(const long list[], const long length)\n{\n  long max_so_far = list[0];\n  for (long i = 1; i != k; i += 1) {\n    if (list[i] &gt; max_so_far) {\n      max_so_far = list[i];\n    }\n  }\n  return max_so_far;\n}\n</code></pre> <p>Here, we are communicating to whoever reading our code that <code>length</code> and the elements of <code>list</code> will not be modified anywhere in our code.  Adding <code>const</code> will also help us to avoid bugs in case we had a typo in our code.</p> <p>Consider a buggy version of <code>max</code> is as follows, where the programmer uses one-letter variable names and then shoots themself in the foot by mixing up <code>k</code> and <code>m</code>.  However, if the programmer already qualified <code>k</code> with the <code>const</code> keyword, the code wouldn't compile, avoiding hours of hair-pulling debugging sessions.</p> <pre><code>long max(const long list[], const long k)\n{\n  long m = list[0];\n  for (long i = 1; i != k; i += 1) {\n    if (list[i] &gt; m) {\n      k = list[i]; // error\n    }\n  }\n  return m;\n}\n</code></pre>"},{"location":"notes/14-array.html#pointers","title":"Pointers","text":"<p>A more visual way to illustrate the fact that a memory location contains the memory address of another variable is to draw an arrow to point from the location storing the address of the variable to the location storing the variable.</p> <p></p> <p>For this reason, in C, a variable that stores a memory address is called a pointer.  We will examine this in more detail in Unit 15, but for now, we will just introduce the <code>*</code> notation in C.   This notation is overused in C and often confuses.  You have seen how <code>*</code> is used for multiplication.  We will now use <code>*</code> to indicate that a variable is a pointer, by putting it in front of the name of the variable.</p> <p>For instance, the line below declares a variable named <code>address</code> that contains the memory address of a <code>double</code> value.</p> <pre><code>double *addr;\n</code></pre> <p>Common Bug</p> <p>It is possible to write as <pre><code>double* addr;\n</code></pre> too, but this is not recommended.  Suppose you want to declare two addresses, you might write, <pre><code>double* from_addr, to_addr;\n</code></pre> thinking that both <code>from_addr</code> and <code>to_addr</code> are of type <code>double*</code>.  But C treats <code>to_addr</code> as a <code>double</code>, not an address of a <code>double</code>!  In any case, if you follow the CS1010 style, you shouldn't be declaring two variables in one line.</p> <p>We can use <code>*</code> to dereference a pointer, but let's keep that for another day, and stick to using <code>*</code> in a variable declaration for now.</p>"},{"location":"notes/14-array.html#array-decay","title":"Array Decay","text":"<p>We have seen in the above, how calling <code>foo(a)</code> would cause the address of array <code>a</code> to be passed into the function <code>foo</code>.  This behavior is rooted in the principle in how C treats the name of an array: array decay.  Once you understand this concept, all the special treatments C makes to <code>array</code> would fall into place!</p> <p>This is how array decay works.  In C, the name of the variable of an array is treated differently from a non-array variable.  If we declare an array</p> <pre><code>type name[num_of_elems];\n</code></pre> <p>Then, any reference to <code>name</code> is a synonym for the pointer to the first element of the array <code>name</code>.  This explains why when we call <code>foo</code> with <code>a</code>, it is the address of the first element of <code>a</code> that is pushed onto the stack.</p> <pre><code>  long a[2] = {100, 200};\n  foo(a);\n</code></pre> <p>This also explains why we have several options when declaring an array as a parameter to a function.  All three options below </p> <pre><code>void foo(long list[10]) { .. }\nvoid foo(long len, long list[]) { .. }\n</code></pre> <p>are equivalent to:</p> <pre><code>void foo(long *list) { .. }\n</code></pre> <p>or <pre><code>void foo(long len, long *list) { .. }\n</code></pre></p> <p>since we are just passing in the pointer to a <code>long</code> variable.  Using <code>long *x</code> is a perfectly valid (and common) C syntax for passing in an array, it is just not as readable since we can't tell if <code>x</code> is meant to be just an address to a variable, or meant to be an array.</p> <p>Array decay works everywhere, not just during argument-passing to a function.</p> <p>Suppose we write</p> <pre><code>long a[2] = {0, 1};\nlong b[2] = {0, 1};\n\nif (a == b) {  // always false\n  :\n}\n\nb = a; // not possible\n</code></pre> <p>Line 4 above is equivalent to comparing the memory addresses of the first elements of <code>a</code> and <code>b</code> and therefore is always false (since the array elements do not have the same memory address).</p> <p>Line 8 above is equivalent to assigning the memory address of the first element of <code>a</code> to the memory address of <code>b</code>, which is not allowed.  We cannot change the memory address of a variable since this is determined by the OS.</p>"},{"location":"notes/14-array.html#returning-array-from-a-function","title":"Returning Array from a Function","text":"<p>Now that we have a better understanding of how we can pass an array as a pointer into a function, let's see how we can return an array from a function.  Exploiting array decay, we can return the array as a pointer from a function.  Consider the <code>square</code> function that computes the square of every element in the list:</p> <pre><code>long* square(const long length, long list[])\n{\n  for (long i = 1; i != length; i += 1) {\n    list[i] = list[i] * list[i];\n  }\n  return list;\n}\n</code></pre> <p>We can call the function like this: <pre><code>  long a[5] = {1, 2, 3, 4, 5};\n  long *a2;\n  a2 = square(5, a);\n</code></pre></p> <p>If you examine the content of <code>a2</code>, you will find that <code>a2</code> correctly contains the square of the input array <code>a</code>.  We are, however, passing in <code>a</code> as a reference, the code snippet above modifies <code>a</code> as well!  One might argue that it is pointless to return an array in this case, since we could have just defined the function as a <code>void</code> function:</p> <pre><code>void square(const long length, long list[])\n{\n  for (long i = 0; i &lt; length; i += 1) {\n    list[i] = list[i] * list[i];\n  }\n}\n</code></pre> <p>and assign <code>a</code> to <code>a2</code> (if we want to store the squared list in <code>a2</code>).</p> <pre><code>  long a[5] = {1, 2, 3, 4, 5};\n  square(5, a);\n  long *a2;\n  a2 = a;\n</code></pre> <p>Is there a way then, to keep <code>list</code> unmodified, while returning a \"new\" array?  You might be tempted to do this:</p> <pre><code>long* square(const long length, const long list[])\n{\n  long squared[length];\n  for (long i = 0; i &lt; length; i += 1) {\n    squared[i] = list[i] * list[i];\n  }\n  return squared;\n}\n</code></pre> <p>This is wrong for two reasons:</p> <ul> <li>We are declaring an array <code>squared</code> with a variable size on the stack.  This is called a variable-length array, or VLA.  VLA is banned in CS1010.  Even outside of CS1010, VLA should be used with extreme care.  A VLA is allocated on the stack, which typically has very limited memory.  If the stack runs out of memory, your program would crash!  The situation is worse if the size of the VLA is _read as input from the users -- this implies that an external user could enter a malicious input to crash your program._</li> <li>By returning <code>squared</code>, we are returning the memory address of an array allocated on the stack.  Recall that when a function exits, the memory allocated to it on the stack is reclaimed and reused.  Thus, the array <code>squared</code> no longer exists, and the content of the returned array is now undetermined.</li> </ul> <p>There is a right way to do this involving allocating memory on the heap, but we will explore it in a later unit.  But, in short, at this point, you haven't learned enough yet to have a correct and meaningful way to return an array from a function.</p>"},{"location":"notes/14-array.html#array-index-out-of-bound","title":"Array Index Out of Bound","text":"<p>A common bug when we work with arrays is accessing a location beyond what is allocated to the array.  Unlike other languages like Java, which checks the bound for you, C does not.  So we could write the following code, and it would compile perfectly.</p> <pre><code>int main()\n{\n  long a[10];\n  for (long i = 0; i &lt;= 10; i += 1) {\n    a[i] = 1;\n  }\n}\n</code></pre> <p>Running this, however, would lead to memory corruption, since we are writing to <code>a[10]</code> (the 11-th element) but we only asked for 10 elements for the array <code>a</code>.  So we are writing to a memory that we are not supposed to and thus causing your program to behave incorrectly.  Running the program above would lead to the following output<sup>1</sup>: <pre><code>array.c:5:5: runtime error: index 10 out of bounds for type 'long [10]'\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior a.c:5:5 in\nIllegal instruction (core dumped)\n</code></pre></p> <p>Similarly, reading from a memory location that we are not supposed to could lead to a misbehaving program.  You have seen this in Problem 2.1(d).</p>"},{"location":"notes/14-array.html#other-facts-about-arrays","title":"Other Facts About Arrays","text":""},{"location":"notes/14-array.html#skipping-elements-during-initialization","title":"Skipping Elements During Initialization","text":"<p>If we have a large array, and we want most of it to be initialized to 0, and only some non-zero, we can use element designators, putting the index of the element we want to initialize to non-zero in square brackets <code>[</code> and <code>]</code>.</p> <pre><code>long vector[100] = {1, [5] = 2, 3, [99] = -1};\n</code></pre> <p>This statement initializes <code>vector[0]</code> to 1, <code>vector[5]</code> to 2, <code>vector[6]</code> to 3, and <code>vector[99]</code> to -1.  The rest of the elements will be 0.</p>"},{"location":"notes/14-array.html#skipping-the-size-in-declaration","title":"Skipping the Size in Declaration","text":"<p>If you supply an initialization list, the number of elements already indicates the length to the compiler, so you can skip the length.</p> <pre><code>long marks[] = {1, 3, 2, 8, 5,}\n</code></pre> <p>This makes it easy to add or remove items from the array, without having to remember to keep the array length consistent.</p>"},{"location":"notes/14-array.html#determining-the-number-of-elements-in-the-array","title":"Determining the Number of Elements in the Array","text":"<p>C provides a <code>sizeof</code> operator, which returns the number of bytes allocated to a type.  We can use <code>sizeof long</code>, for instance, to determine the number of bytes allocated to <code>long</code> on a platform.  We can also use <code>sizeof</code> of a variable instead of the type.  This becomes useful to determine, programmatically, the length of an array (esp if the array length is skipped in the array declaration).  We can calculate the number of elements in <code>marks</code> with</p> <pre><code>long marks[] = { 1, 2, 3, 5, 8 };\nlong num_of_elem = sizeof marks/sizeof marks[0];\n</code></pre>"},{"location":"notes/14-array.html#problem-set-14","title":"Problem Set 14","text":""},{"location":"notes/14-array.html#problem-141","title":"Problem 14.1","text":"<p>Consider the snippet below.</p> <pre><code>void doThat(long a[], long b[]) {\n  a[0] = 100;\n  b[1] = 200;\n  // Line A\n}\n\nvoid doThis(long a[]) {\n  long *b = a;  \n  doThat(a, b);\n}\n\nint main()\n{\n  long a[3] = {0, 0, 0};\n  doThis(a);\n  // Line B\n}\n</code></pre> <p>a. Show the content of the stack at Line A if the program above is executed.</p> <p>b. What is the content of array <code>a</code> at Line B?</p>"},{"location":"notes/14-array.html#problem-142","title":"Problem 14.2","text":"<p>Consider the snippet below.</p> <pre><code>void doThat(long list[]) {\n  list[1] = 200;\n  // Line A\n}\n\nvoid doThis(const long a[]) {\n  long b[2] = {10, 10};\n  a = b;\n  doThat(a);\n}\n\nint main()\n{\n  long a[3] = {0, 0, 0};\n  doThis(a);\n  // Line B\n}\n</code></pre> <p>a. Does the code compile cleanly?</p> <p>b. Show the content of the stack at Line A if the program above is executed.</p> <p>c. What is the content of array <code>a</code> at Line B?</p> <ol> <li> <p>You will see this output only if your code is compiled with <code>-fsanitize=bounds</code> flag.\u00a0\u21a9</p> </li> </ol>"},{"location":"notes/15-pointers.html","title":"Unit 15: Pointers","text":""},{"location":"notes/15-pointers.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>understand what the address-of operator, <code>&amp;</code>, represents and what is its type</li> <li>be able to use the <code>&amp;</code> operator to access the address of a variable</li> <li>understand what the dereference operator, <code>*</code>, represents</li> <li>be aware that there is a pointer type associated with each type in C and that when <code>*</code> is used in the variable declaration it has a different meaning to the dereference operator</li> <li>be able to define pointer type variables and use the <code>*</code> operator, including:<ul> <li>declaration of a pointer type variable</li> <li>assigning an address (of the appropriate type) to a pointer type variable</li> <li>accessing/assigning the value that a pointer variable points at</li> <li>assigning a new value by dereferencing a pointer variable</li> </ul> </li> <li>understand why we cannot only change the address referenced by a variable</li> <li>understand the units being stored by a pointer and thus, how arithmetic operations would affect pointers</li> <li>be aware of pointers to pointers (and more), and the possibility of multiple levels of dereferencing</li> <li>be aware of the <code>NULL</code> pointer, understand what it represents, and be able to use it</li> </ul>"},{"location":"notes/15-pointers.html#memory-address-of-a-variable","title":"Memory Address of a Variable","text":"<p>You have learned that each variable must have four things: (i) a name, (ii) a type, (iii) a value, and (iv) a memory address.</p> <p>We have been accessing variables using their names.  For instance, consider the line <pre><code>a = b;\n</code></pre></p> <p>This line copies the value of variable <code>b</code> into variable <code>a</code>.  To be more precise, the line takes the value stored in the memory location labeled with the name <code>b</code>, and copies it into the memory location labeled with the name <code>a</code>.</p> <p>For many other higher-level languages, such as Java, Python, and JavaScript, this is the only way available to manipulate variables.  C, however, allows us direct access to the memory addresses of a variable.  In this unit, we will see how to update a variable via its address, and how to perform operations on the addresses.</p> <p>C has an \"address-of\" operator, <code>&amp;</code>.  When we put <code>&amp;</code> in front of a variable, we get the memory address of that variable.  For instance, consider the code below: <pre><code>long c;\ncs1010_println_long(c);\ncs1010_println_pointer(&amp;c);\n</code></pre></p> <p>The last line uses the <code>cs1010_println_pointer</code> function from the CS1010 I/O library to print the memory address of <code>c</code> in decimal format.</p> <p>The expression <code>&amp;c</code> has the type \"address of a <code>long</code>.\"  Note that \"address of a <code>long</code>\" and <code>long</code> are two different types in C.  In general, the expression <code>&amp;x</code> has the type \"address of \\(T\\)\" where \\(T\\) is the type of variable <code>x</code>.</p>"},{"location":"notes/15-pointers.html#pointer-a-variable-that-stores-address","title":"Pointer: A Variable that Stores Address","text":"<p>Recall from the previous unit that in C, a variable that stores a memory address is called a pointer and we can declare it with the <code>*</code> notation.</p> <pre><code>long *addr;\n</code></pre> <p>The line above declares a variable named <code>addr</code> with the type <code>long *</code> (i.e., a pointer to <code>long</code>, or, address of a <code>long</code>).  We can write:</p> <pre><code>addr = &amp;c;\n</code></pre> <p>The line initializes <code>addr</code> with the memory address of <code>c</code>.  To be more precise, it takes the memory address of the memory location labeled with name <code>c</code>, and copies it into the memory location labeled with name <code>addr</code>.  Sometimes, we also say that the line \"points <code>addr</code> to <code>c</code>.\"</p> <p>When we store a memory address to a pointer, the types must match.  In the example above, both <code>addr</code> and <code>&amp;c</code> refer to the memory address of a <code>long</code>.  Now consider this:</p> <pre><code>long radius = 5;\ndouble *addr;\naddr = &amp;radius; // not ok\n</code></pre> <p>Line 3 above would lead to a compilation error since we try to point a <code>double</code> pointer to a <code>long</code>.</p> <p>One exception to this rule is the type <code>void *</code>.  A pointer to <code>void</code> has a special place in C, and it can be used to point to any other type without type errors.  The function <code>cs1010_println_pointer</code>, for instance, takes in a parameter of type <code>void *</code>, hence we can pass a pointer of any type to this function as an argument.</p> <p>Note</p> <p>The two lines: <pre><code>long *addr;\naddr = &amp;c;\n</code></pre></p> <p>can be shortened to: <pre><code>long *addr = &amp;c;\n</code></pre></p> <p>Note that <code>long *addr = &amp;c</code> is NOT the same as <pre><code>long *addr;\n*addr = &amp;c;\n</code></pre></p> <p>The <code>&amp;</code> operator cannot be used on the left-hand side of the assignment operation.  For instance</p> <pre><code>long x = 1;\nlong y = 2;\n&amp;x = &amp;y; // error\n</code></pre> <p>We try to set the address of <code>x</code> to be the address of <code>y</code>.  This is not allowed since the address of <code>x</code> is determined by the OS when it is allocated on the stack.</p>"},{"location":"notes/15-pointers.html#updating-a-variable-using-its-pointer","title":"Updating a Variable Using Its Pointer","text":"<p>Now that we know how to access the memory address of a variable and store it in another variable.  Let's see how we can update its value using its pointer.</p> <p>To access a value of a variable through its address, rather than its name, we use the dereference operator <code>*</code>, which is the reverse of the address-of operator.</p> <p>Suppose we have a pointer variable <code>addr</code>.  We can write <pre><code>*addr = 15;\n</code></pre></p> <p>This line stores 15 into the memory address stored inside variable <code>addr</code>.  To be more precise, it takes the value 15 and copies it into the memory location, the address of which is stored in the memory location labeled with the name <code>addr</code>.  You can think of this as a two-step operation: (i) Go to memory location labeled <code>addr</code>, access the value stored there; (ii) The value stored in <code>addr</code> is an address.  Now, go to the memory location with this address, and store 15 there.</p> <p>The figure below illustrates the use of <code>&amp;</code> and <code>*</code>.</p> <p></p>"},{"location":"notes/15-pointers.html#segmentation-fault-memory-error","title":"Segmentation Fault: Memory Error","text":"<p>Updating variables via an address can be dangerous.  You could be changing the value in a memory location that you do not mean to.  If you are lucky, your program crashes with a <code>segmentation fault</code> error<sup>1</sup>. We say that your program has segfault.  If you are unlucky, your program runs normally but produces incorrect output occasionally.</p> <p>For instance, suppose you write <pre><code>double *p;\n*p = 1.0;\n</code></pre></p> <p>The program will almost certainly crash, because the pointer variable <code>p</code> is not initialized, so it is pointing to the location of whatever address happens to be in the memory at that time.  The line <code>*p = 1.0</code> then copy the value 1.0 to this arbitrary memory address stored in <code>p</code>.</p> <p>So, always make sure that your pointer is pointing to the right location before dereferencing and writing to the location.</p>"},{"location":"notes/15-pointers.html#summary","title":"Summary","text":"<p>To recap, suppose we have variables <code>a</code> and <code>b</code>, and a pointer variable <code>addr</code>:</p> Assignment Meaning <code>a = b</code> Take the value stored in the memory location labeled <code>b</code>, copy it into the memory location labeled <code>a</code> <code>addr = &amp;b</code> Take the memory address of memory location labeled <code>b</code>, copy it into the memory location labeled <code>addr</code> <code>*addr = a</code> Take the value stored in the memory location labeled <code>a</code>, copy it into the memory location of which the address is stored in memory location labeled <code>addr</code> <code>b = *addr</code> Take the value stored in the memory location of which the address is stored in memory location labeled <code>addr</code>, copy it into the memory location labeled <code>b</code>"},{"location":"notes/15-pointers.html#pointer-arithmetic","title":"Pointer Arithmetic","text":"<p>We can perform arithmetic operations on pointers, but not in the way you expect.</p> <p>Suppose we have a pointer:     <pre><code>long x;\nlong *ptr;\nx = 1;\nptr = &amp;x;\nptr += 1;\n</code></pre></p> <p>Suppose that <code>x</code> is stored in memory address 1000, after Line 4, <code>ptr</code> would have the value of 1000. After the line <code>ptr += 1</code>, using normal arithmetic operation, we would think that <code>ptr</code> will have a value of 1001.  However, the semantics for arithmetic operations differ for pointers.  The <code>+</code> operation for <code>ptr</code> causes the <code>ptr</code> variable to move forward by the size of the variable pointed to by the pointer.  In this example, <code>ptr</code> points to <code>long</code>, assuming that <code>long</code> is 8 bytes, after <code>ptr += 1</code>, <code>ptr</code> will have the value of 1008.</p> <p>We can only do addition and subtraction for pointers.</p>"},{"location":"notes/15-pointers.html#array-and-pointer","title":"Array and Pointer","text":"<p>We now revisit how arrays in C work, in the context of pointers:</p> <ul> <li> <p>Array decay: Recall that the name of the array decays into the memory address of the first element of the array.  In other words, if we declare an array called <code>a</code>, then the variable <code>a</code> is a synonym with <code>&amp;a[0]</code>.</p> </li> <li> <p>Accessing an element of an array: The array notation <code>a[i]</code> is a synonym with <code>*(a + i)</code>.  This notation explains why it suffices to pass the memory address of the first element of the array into the function.</p> </li> </ul>"},{"location":"notes/15-pointers.html#pointer-of-pointer-of-pointer","title":"Pointer of Pointer (of Pointer..)","text":"<p>A pointer variable is also a variable.  This means that it has a name, a type, a value, and a memory address as well.</p> <p>Let's say we have a pointer variable <code>ptr</code>. <pre><code>long x;\nlong *ptr;\nptr = &amp;x;\n</code></pre></p> <p><code>ptr</code> stores the memory address of <code>x</code>, but it has its own memory address.   We can have a variable <code>ptrptr</code> that stores the address of <code>ptr</code>.  Since the type of <code>ptr</code> is an address of <code>long</code>, the type of <code>ptrptr</code> is an address of an address of <code>long</code>, and can be written as:</p> <pre><code>long **ptrptr;\nptrptr = &amp;ptr;\n</code></pre> <p>These dereferences can go on since <code>ptrptr</code> is also a variable and therefore has its own memory address.  We rarely need to dereference more than twice in practice, but if the situation arises, such multiple layers of dereferencing are possible.</p>"},{"location":"notes/15-pointers.html#the-null-pointer","title":"The <code>NULL</code> Pointer","text":"<p><code>NULL</code> is a special value that is used to indicate that a pointer is pointing to nothing.  We use <code>NULL</code> to indicate that the pointer is invalid, typically to mean that we have not initialized the pointer or to flag an error condition.</p> <p>Billion Dollar Mistakes</p> <p>Sir Tony Hoare (the same one whom we met when we talked about Assertion) also invented the null pointer.  He called it his billion-dollar mistake.  Quoting from him: \"I couldn't resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.\"  As you start to use pointers in CS1010, you will see why it is a pain.</p>"},{"location":"notes/15-pointers.html#problem-set-15","title":"Problem Set 15","text":""},{"location":"notes/15-pointers.html#problem-151","title":"Problem 15.1","text":"<p>Sketch the content of the memory while tracing through the following code.  What would be printed?</p> <pre><code>long *ptr1;\nlong *ptr2;\nlong x;\nlong y;\n\nptr1 = &amp;x;\nptr2 = &amp;y;\n\n*ptr1 = 123;\n*ptr2 = -1;\n\ncs1010_println_long(x);\ncs1010_println_long(y);\ncs1010_println_long(*ptr1);\ncs1010_println_long(*ptr2);\n\nptr1 = ptr2;\n*ptr1 = 1946;\n\ncs1010_println_long(x);\ncs1010_println_long(y);\ncs1010_println_long(*ptr1);\ncs1010_println_long(*ptr2);\n\ny = 10;\n\ncs1010_println_long(x);\ncs1010_println_long(y);\ncs1010_println_long(*ptr1);\ncs1010_println_long(*ptr2);\n</code></pre>"},{"location":"notes/15-pointers.html#problem-152","title":"Problem 15.2","text":"<p>What is wrong with both programs below?</p> <pre><code>double *addr_of(double x)\n{\n  return &amp;x;\n}\n\nint main()\n{\n  double c = 0.0;\n  double *ptr;\n\n  ptr = addr_of(c);\n  *ptr = 10;\n}\n</code></pre> <pre><code>double *triple_of(double x)\n{\n  double triple = 3 * x;\n  return &amp;triple;\n}\n\nint main()\n{\n  double *ptr;\n\n  ptr = triple_of(10);\n  cs1010_println_double(*ptr);\n}\n</code></pre> <ol> <li> <p>I leave it to the later OS classes CG2271 / CS2106 to explain the term \"segmentation\" and \"fault\".  Interested students can always google and read on Wikipedia.\u00a0\u21a9</p> </li> </ol>"},{"location":"notes/16-call-by-reference.html","title":"Unit 16: Call by Reference","text":""},{"location":"notes/16-call-by-reference.html#learning-objectives","title":"Learning Objectives","text":"<p>After completing this unit, students should:</p> <ul> <li>understand the differences between call-by-value and call-by-reference</li> <li>understand the mechanism we can perform call-by-reference in C using stack and pointers</li> <li>know the situations where call-by-reference is useful</li> <li>be able to read and write code that uses call-by-references</li> <li>know how to write Doxygen documentation to document the parameters of a function.</li> </ul>"},{"location":"notes/16-call-by-reference.html#call-by-reference","title":"Call By Reference","text":"<p>In Unit 14, we have seen how an array is passed by reference into functions.  When we pass an array <code>a</code> into a function, due to array decay, we are passing in the pointer to the first element of the array (<code>&amp;a[0]</code>).  So, what gets copied onto the call stack is the pointer to the array, not the actual array itself.  Now, with this pointer, we can modify the elements in the array directly.</p>"},{"location":"notes/16-call-by-reference.html#passing-non-array-variables-by-references","title":"Passing Non-Array Variables by References","text":"<p>We mentioned that for all other non-array variables when we pass in a variable, the value of the variable gets copied onto the stack.  This mechanism is called call-by-value.</p> <p>The call-by-value mechanism has its limitation.  Sometimes, it is useful for a function to return more than one result.</p> <p>You have seen an example before in your Exercise 2, where, for the <code>collatz</code> problem, you are supposed to find both the largest stopping time and the value with the largest stopping time.</p> <p>C functions, however, can only return at most one value.  One way to get around this limitation is to use call-by-reference, the other is to use <code>struct</code>.  We will leave the discussion of <code>struct</code> for another day, so let's see how we can call non-array variables by reference.</p> <p>We use call-by-reference by passing in the address of a variable into a function, instead of the value of a variable.  Here is an example taken from the <code>collatz</code> problem.</p>"},{"location":"notes/16-call-by-reference.html#example-collatz","title":"Example: Collatz","text":"<pre><code>void find_max_steps(long n, long *max_n, long *max_num_steps) {\n  *max_num_steps = 0;\n  *max_n = 1;\n  for (long i = 1; i &lt;= n; i += 1) {\n    long num_of_steps = count_num_of_steps(i);\n    if (num_of_steps &gt;= *max_num_steps) {\n      *max_n = i;\n      *max_num_steps = num_of_steps;\n    }\n  }\n}\n</code></pre> <p>The method <code>find_max_steps</code> takes in two pointers.  Inside the function, we use the deference operator <code>*</code> to modify the variable pointed to by the pointers (Lines 2, 3, 7, and 8).</p> <p>To use this function, we have:</p> <pre><code>int main()\n{\n  long n = cs1010_read_long();\n  long max_num_steps;\n  long max_n;\n  find_max_steps(n, &amp;max_n, &amp;max_num_steps);\n  cs1010_println_long(max_n);\n  cs1010_println_long(max_num_steps);\n}\n</code></pre> <p>In Line 4 above, we pass in the address of <code>max_n</code> and <code>max_num_steps</code> into <code>find_max_steps</code>.  <code>find_max_steps</code> updates both variables for us.</p>"},{"location":"notes/16-call-by-reference.html#example-swapping-two-variables","title":"Example: Swapping Two Variables","text":"<p>Another example of call-by-reference is a function that swaps two variables.  Here is one that swaps two <code>long</code> variables.</p> <pre><code>void swap(long *a, long *b) {\n  long temp = *a;\n  *a = *b;\n  *b = temp;\n}\n</code></pre> <p>To see <code>swap</code> in action, consider: <pre><code>long a = 10;\nlong b = -4;\nswap(&amp;a, &amp;b);\n</code></pre></p> <p>After calling <code>swap</code>, the value for <code>a</code> becomes -4, <code>b</code> becomes 10.</p>"},{"location":"notes/16-call-by-reference.html#types-of-call-by-reference-parameters","title":"Types of Call-by-Reference Parameters","text":"<p>A parameter passed as a pointer could be used in three different ways:</p> <ul> <li>The parameter could be a read-only input, and the main purpose of passing in the value is so that the function has access to the value of the pointer.  </li> <li>The parameter could be used as a vessel for the function to pass a value to the caller, similar to the parameters <code>max_n</code> and <code>max_num_steps</code> in the function <code>find_max_steps</code> above.  In this case, the value contained in the variable pointed to by the pointer does not matter.</li> <li>The parameter could be used as both input and output.  The value contained in the parameter is read inside the function, and the value is updated from inside the function.  For example, the parameters passed to <code>swap</code> above.</li> </ul> <p>Documenting parameters in CS1010</p> <p>In CS1010, we will be using the <code>Doxygen</code> format to document our functions.  There are three types of parameters, corresponding to the three situations above: <code>@param[in]</code> is used to document a read-only parameter (note that this applies to all read-only parameters, not just pointers).  <code>@param[out]</code> is used to document an output-only parameter, and <code>@param[in,out]</code> is used to document a parameter that is both input and output.</p>"},{"location":"notes/16-call-by-reference.html#problem-set","title":"Problem Set","text":""},{"location":"notes/16-call-by-reference.html#problem-161","title":"Problem 16.1","text":"<p>Consider the program below: <pre><code>void foo(double *ptr, double trouble) {\n  ptr = &amp;trouble;\n  *ptr = 10.0;\n}\n\nint main() {\n  double *ptr;\n  double x = -3.0;\n  double y = 7.0;\n  ptr = &amp;y;\n\n  foo(ptr, x);\n\n  cs1010_println_double(x);\n  cs1010_println_double(y);\n}\n</code></pre></p> <p>What would be printed?</p>"},{"location":"notes/17-heap.html","title":"Unit 17: Heap","text":""},{"location":"notes/17-heap.html#learning-objectives","title":"Learning Objectives","text":"<p>After completing this unit, students should:</p> <ul> <li>understand the differences between the stack and the heap</li> <li>be able to use <code>malloc</code> and <code>calloc</code> to declare dynamically-sized arrays on the heap</li> <li>understand the importance of (i) checking for NULL and (ii) freeing the memory allocated on the heap</li> <li>aware of the possibility of memory leakage and avoid common mistakes that could lead to memory leaks</li> </ul>"},{"location":"notes/17-heap.html#variables-on-heap","title":"Variables on Heap","text":"<p>We have already seen what a call stack is and how the call stack works in Unit 13.  There is another important area of memory used by our programs, called the heap.</p> <p>The memory allocation on the heap can be done automatically or manually.  For variables allocated on the heap, their lifetime is either the same as the lifetime of the whole program.  An example of such a variable is a global variable -- a variable that is declared outside of any function and can be read from or written to anywhere in the program.  We have banned the use of global variables in CS1010 as it makes your code hard to understand or reason about:</p> <pre><code>x = 1;\nfoo();\n// { x == ?? }\n</code></pre> <p>Suppose <code>x</code> is a global variable, we cannot assert anything about the property of <code>x</code> after calling <code>foo</code>, since <code>x</code> can be modified by <code>foo</code> or any function it calls, even though we never pass <code>x</code> into <code>foo</code>.  This is worse than passing an array as we have seen in Unit 16!  Now, to assert something about <code>x</code>, we need to trace through every line of the code to how <code>x</code> is updated, even if the function does not take in <code>x</code> as a parameter.</p>"},{"location":"notes/17-heap.html#manual-memory-allocation-deallocation","title":"Manual Memory Allocation / Deallocation","text":"<p>Allocating memory on the heap, however, is useful if we want to allocate an array dynamically, i.e., not knowing what is the size of the array when we write the program.  Often, we need an array whose size depends on the input from the user, such as reading a string or reading a sequence of numbers.  We cannot use a fixed-length array unless we know for sure that the input size is limited, and we cannot use a variable-length array, since we may get a segfault if the array size is too big for the stack.  The only viable solution is to allocate the array on the heap.</p> <p>The C standard library provides a few functions related to memory allocation on the heap.  The header file for these functions is <code>stdlib.h</code>.  We are interested in <code>malloc</code> and <code>calloc</code>.</p>"},{"location":"notes/17-heap.html#malloc","title":"<code>malloc</code>","text":"<p><code>malloc</code> (memory allocation) is declared as: <pre><code>void *malloc(size_t size);\n</code></pre></p> <p>It takes in a parameter, <code>size</code>, which is the number of bytes of memory to be allocated, and returns a pointer to the memory allocated if successful, or <code>NULL</code> otherwise.  This is a general function so the type of pointer returned is <code>void *</code> rather than a pointer to a specific type.</p>"},{"location":"notes/17-heap.html#the-size_t-type","title":"The <code>size_t</code> type","text":"<p>The type of <code>size</code> is <code>size_t</code>, which is an unsigned integer type defined in <code>stdlib.h</code> to represent the size of a type/variable in memory. </p> <p>Reading and writing <code>size_t</code> variables with CS1010 I/O library</p> <p>You can read a <code>size_t</code> variable from the standard input using the CS1010 library function <code>cs1010_read_size_t()</code>.  You can similarly print a <code>size_t</code> variable with <code>cs1010_print_size_t</code> or <code>cs1010_println_size_t</code>. </p> <p>While both <code>size_t</code> and <code>long</code> are integer types, they are not compatible with each other.  Explicit casting is needed to assign the value of one type to the other.</p> <p>Furthermore, one must take care when comparing between values of unsigned type <code>size_t</code> and signed type <code>long</code>.  Your code can behave unexpectedly.  Suppose <code>s</code> is a variable of type <code>size_t</code>, the comparison <code>s &lt; -1</code> may return <code>true</code>, even though <code>s</code> is always non-negative!</p> <p>It is also a common bug to write code like this: <pre><code>size_t i = 100;\nwhile (i &gt;= 0) {\n    // do something to a[i]\n    i -= 1;\n}\n</code></pre></p> <p>which loops forever, since <code>i &gt;= 0</code> is always true.</p>"},{"location":"notes/17-heap.html#calloc","title":"<code>calloc</code>","text":"<p>The function <code>calloc</code> (clear allocation) is declared as: <pre><code>void *calloc(size_t count, size_t size);\n</code></pre></p> <p><code>calloc</code> allocates memory for <code>count</code> items, each of <code>size</code> number of bytes, in a contiguous region in the memory and initializes all bits in this memory region to 0.  Except for the fact that <code>calloc</code> initializes the bits to 0 and <code>malloc</code> does not, <code>calloc(count, size)</code> is the same as <code>malloc(count * size)</code>.</p>"},{"location":"notes/17-heap.html#sizeof","title":"<code>sizeof</code>","text":"<p>We have seen in Unit 5 that the number of bytes needed to represent a type depends on the platform.  Suppose we want to allocate enough memory for, say, 10 <code>long</code> values, how do we know how many bytes are needed?  A <code>long</code> can be 4 bytes on some platforms, 8 bytes on others.  For this purpose, C provides a <code>sizeof</code> operator, that returns the number of bytes needed for a type or a variable (of type <code>size_t</code>)  So, to allocate memory for 10 <code>long</code> values, we say: <pre><code>long *array = malloc(10 * sizeof(long));\n</code></pre></p>"},{"location":"notes/17-heap.html#memory-deallocation","title":"Memory Deallocation","text":"<p>Even though the memory available on the heap is larger than the stack, it is not unlimited, and therefore we should still use the memory judiciously.   In particular, after we are done using the memory allocated to us, we should call the method <code>free</code>, passing in the pointer the memory region allocated, to have the memory region deallocated and returned to the OS to be reused by others.</p> <p>A common bug is for a programmer to access a memory that has been freed or free an allocated memory region more than once.  This would cause strange behaviors -- possibly crashing in random places if we access memory that is being used by others.  It is a good practice to set the pointer to NULL after <code>free</code>-ing the memory region so that we do not accidentally use it.</p> <pre><code>free(buffer);\nbuffer = NULL;\n</code></pre> <p>Another common bug is for programmers to request memory via <code>malloc</code> or related functions, but forgot to <code>free</code> it back to the OS.  As a result, as the program runs, it starts to hog the memory and the system will become slower and slower.   This bug is known as memory leak.</p> <p>Another possible bug is for programmers to change the pointer to the region of memory allocated.  For instance, <pre><code>long *buffer = calloc(how_many, sizeof(long));\nbuffer = cs1010_read_long_array(how_many);\n</code></pre></p> <p>After we execute the code such as the above, the pointer <code>buffer</code> will point to something new, and there is no longer a pointer pointing to allocate memory.  The memory allocated becomes unreachable, and therefore we can no longer free it!</p> <p>Freeing memory returned by CS1010 I/O calls</p> <p>In CS1010, from now on, you are to make sure that memory that is allocated via <code>malloc</code> and related functions are <code>free</code> after it is used, including those allocated in the CS1010 I/O library.  The API documentation tells you which values returned by the library should be deallocated by the caller using <code>free</code>.</p>"},{"location":"notes/17-heap.html#memory-reallocation","title":"Memory Reallocation","text":"<p>If we allocate an array on the heap, we can even change the size of the array dynamically during run-time.  For instance, there could be cases where we don't know the size of the array we need.  We can allocate an array, say, of size <code>n</code>, at the beginning of our program.  As we populate the array, we may realize that <code>n</code> is too small, and we need a bigger array.  We can use the method <code>realloc</code> to reallocate our array to a larger size as needed.  Interested students can read the man page for <code>realloc</code> for more details. </p>"},{"location":"notes/17-heap.html#cs1010-io-library","title":"CS1010 I/O Library","text":"<p>To wrap up this unit, we will look at the CS1010 library functions that help us read in an array of either <code>long</code> values or <code>double</code> values.  These functions, <code>cs1010_read_long_array</code> or <code>cs1010_read_double_array</code> take in a parameter, which is the number of elements to read (of type <code>size_t</code>) and it returns a pointer to the array allocated within the function.</p> <p>A typical usage is as follows: we first read the size of the array <code>size</code> with <code>cs1010_read_size_t()</code>, then use <code>cs1010_read_long_array(size)</code> to read the array.</p> <p>Here is the incomplete version: Incomplete code without NULL checks and deallocation<pre><code>size_t num_of_students = cs1010_read_size_t();\nlong *marks;\nmarks = cs1010_read_long_array(num_of_students);\nfor (size_t i = 0; i &lt; num_of_students; i += 1) {\n  cs1010_println_long(marks[i]);\n}\n</code></pre></p> <p>This should be straightforward enough.  There are, however, two cases to consider.  What if the OS failed to allocate the memory for our array?  In this case, marks would be <code>NULL</code> and access <code>marks[i]</code> would cause a segfault. Second, we must return the memory allocated to us back to the OS once we are done.  To let go of this memory, we call the function <code>free</code>.  The complete code looks like this:</p> <pre><code>size_t num_of_students = cs1010_read_size_t();\nlong *marks;\nmarks = cs1010_read_long_array(num_of_students);\nif (marks == NULL) {\n  // signal error and return\n}\nfor (size_t i = 0; i &lt; num_of_students; i += 1) {\n  cs1010_println_long(marks[i]);\n}\n\n// do other things to marks\n  :\n\nfree(marks);\n</code></pre> <p>The CS1010 I/O library, internally, allocates memory on the heap so that we can read in words, lines, or arrays of arbitrary length.</p> <p>The following shows an example of how <code>cs1010_read_long_array</code> is implemented with <code>calloc</code>.</p> <pre><code>long* cs1010_read_long_array(size_t how_many)\n{\n  long *buffer = calloc(how_many, sizeof(long));\n  if (buffer == NULL) {\n    return NULL;\n  }\n\n  for (size_t i = 0; i &lt; how_many; i += 1) {\n    buffer[i] = cs1010_read_long();\n  }\n\n  return buffer;\n}\n</code></pre>"},{"location":"notes/17-heap.html#problem-set","title":"Problem Set","text":""},{"location":"notes/17-heap.html#problem-set-171","title":"Problem Set 17.1","text":"<p>Draw the call stack and the heap, showing what happened when we run the following code:</p> <pre><code>void foo(long *y, long *z)\n{\n  y[0] = -7;\n  y[1] = -8;\n  z[0] = 4;\n  z[1] = 5;\n}\n\n\nint main()\n{  \n  long y[2] = {1, 2};\n  long *z = calloc(2, sizeof(long));\n\n  z[0] = y[0];\n  z[1] = y[1];\n\n  foo(y, z);\n}\n</code></pre>"},{"location":"notes/18-string.html","title":"Unit 18: Characters and Strings","text":""},{"location":"notes/18-string.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>understand that a string is an array of chars</li> <li>know that a string always ends with a <code>char</code> with value 0 (or <code>'\\0'</code>)</li> <li>be aware of the different types of special chars</li> <li>understand what the empty string represents</li> <li>be able to use the CS1010 library functions to read strings and arrays of strings</li> </ul>"},{"location":"notes/18-string.html#the-char-type","title":"The <code>char</code> type","text":"<p>Recall that the <code>char</code> type is of size 8 bits. The ASCII code maps each bit sequence to character the letters, digits, punctuations, and some non-visible characters such as null, escape, newline, beep, etc.  To denote a character literal, we use a pair of single quotes <code>'</code>.  For instance, we can write something like this:</p> <pre><code>char x = 'A';\n</code></pre> <p>Further, recall that the type of a variable determines how we interpret a bit sequence.  Given the same bit sequence, we can interpret it differently if we assign it to a different type.  If we call</p> <pre><code>char x = 'A';\nputchar(x);\ncs1010_println_long(x);\n</code></pre> <p>We will see that character <code>A</code> is first printed, followed by its numeric value <code>41</code>.  We can use this property to manipulate the <code>char</code> variable with arithmetic operations.  For instance, </p> <pre><code>char x = 'A';\nputchar(x + 1);\n</code></pre> <p>would print <code>B</code>.</p>"},{"location":"notes/18-string.html#special-characters","title":"Special Characters","text":"<p>The use of the backslash <code>\\</code> creates an escape sequence that can be used to denote characters that would otherwise not be visible on the screen.  For instance, <code>'\\n'</code> refers to the newline character, <code>'\\t'</code> refers to the tab character, <code>'\\a'</code> refers to the beep character.</p> <p>Furthermore, since we already use <code>\\</code> to indicate the escape sequence, <code>'</code> to indicate a character, and <code>\"</code> to indicate a string, to use these characters, we need to \"escape\" them -- we use <code>'\\\\'</code> for the backslash character, <code>'\\''</code>, the single quote character, and the <code>'\\\"'</code> double-quote character.</p>"},{"location":"notes/18-string.html#string","title":"String","text":"<p>We have seen strings as a sequence of characters stored in double quotes, e.g., <code>\"hello!\"</code>.  Note how we distinguish between a string and a <code>char</code> by the quotes used.  String uses double quotes <code>\"</code>; a <code>char</code> uses a single quote <code>'</code>.  </p> <p>In C, a string is nothing more than just an array of <code>char</code> values. The only thing special about a string is that it always ends with a <code>0</code> value (note: not character <code>'0'</code> which has a value of 48, but the value 0).  The ASCII character with the value 0 is called the null character, written as <code>'\\0'</code>.  We, therefore, refer to strings in C as null-terminated strings.  Note that we distinguish the null character from the <code>NULL</code> pointer: the former is of type <code>char</code> and is always 0; the latter is of type <code>void *</code> and may or may not be 0.</p> <p>The following two ways of initializing a string are thus equivalent: <pre><code>char hello1[7] = {'h', 'e', 'l', 'l', 'o', '!', '\\0'};\nchar hello2[7] = \"hello!\";\n</code></pre></p> <p>The second way is more easily readable.</p> <p>We can also skip the size of the array, as mentioned above, or, more commonly, use a <code>char *</code> type for a variable storing a constant string. <pre><code>char hello3[] = \"hello!\";\nchar *hello4 = \"hello!\";\n</code></pre></p>"},{"location":"notes/18-string.html#string-literals","title":"String Literals","text":"<p>A string literal refers to a string written between two <code>\"</code> characters, such as <code>\"Hello world!\"</code>.  Such a string is still internally stored as an array of <code>char</code> values.  The location these arrays are stored depends on the platform, but usually, they are stored in a read-only region of the memory called the <code>text</code> region.  These strings are not meant to be modified.  Hence, trying something like this:</p> <pre><code>char *str1 = \"Hello!\";\nstr1[5] = '.';\n</code></pre> <p>is not allowed and would crash your program.</p> <p>The following, however, is OK: <pre><code>char str2[7] = \"Hello!\";\nstr2[5] = '.';\n</code></pre></p> <p>The difference between the two is that <code>str1</code> points to a read-only region in the memory, while <code>str2</code> contains a copy of the string on the stack.</p>"},{"location":"notes/18-string.html#empty-string","title":"Empty String","text":"<p>We commonly use the empty string <code>\"\"</code> to indicate a special condition or to initialize a string variable, where appropriate.  The empty string is nothing but an array where the 0-th element is <code>'\\0'</code>.</p>"},{"location":"notes/18-string.html#common-bugs","title":"Common Bugs","text":"<p>A very common bug for beginners to C programming is to forget about the terminating <code>'\\0'</code> char in a string.  For instance, suppose you want to copy one string to another:</p> <pre><code>    char src[6] = \"hello!\"\n    char dst[6];\n    for (long i = 0; i &lt; 6; i += 1) {\n        dst[i] = src[i];\n    }\n</code></pre> <p>The string variable <code>dst</code> is not terminated and C would treat whatever follows the memory location as part of the string!</p> <p>The other common bug is creating an array that is too small for the string.  Suppose you use the function <code>strcpy</code> provided by C to copy the string instead.</p> <pre><code>    char src[6] = \"hello!\"\n    char dst[6];\n    strcpy(dst, src);\n</code></pre> <p><code>strcpy</code> would properly copy the characters <code>'h'</code>, <code>'e'</code>,  .. <code>'!'</code>, AND the terminating <code>'\\0'</code>.  That's a total of 7 characters.  The code, however, only allocates the space of 6 characters for <code>dst</code>.  So overflow occurs and your program might crash.</p>"},{"location":"notes/18-string.html#cs1010-io-library","title":"CS1010 I/O Library","text":"<p>The CS1010 I/O library provides two functions, one to read a word (separated by white-space characters) and the other to read a line (separated by a newline character).  They are <code>cs1010_read_word()</code> and <code>cs1010_read_line()</code> respectively.  We can also read multiple words and multiple lines with <code>cs1010_read_word_array()</code> and <code>cs1010_read_line_array()</code>.  The results are stored in an array of strings.</p> <p>The arrays and strings returned by these functions need to be deallocated by the caller.  Particularly, note that when an array of strings is returned by both <code>cs1010_read_word_array()</code> and <code>cs1010_read_line_array()</code>, both the strings and the array holding the strings all need to be freed.</p> <p>Typical usage is as follows:</p> <pre><code>size_t k = cs1010_read_size_t();\nchar** lines = cs1010_read_line_array(k);\nif (lines == NULL) {\n  // Deal with error\n  return;\n}\n// Do something with array lines\n  :\n  :\n// free each line\nfor (size_t i = 0; i &lt; k; i += 1) {\n  free(lines[i]);\n}\n// free the array\nfree(lines);\n</code></pre>"},{"location":"notes/19-md-array.html","title":"Unit 19: Multi-Dimensional Arrays","text":""},{"location":"notes/19-md-array.html#learning-objectives","title":"Learning Objectives","text":"<p>After completing this unit, students should:</p> <ul> <li>be comfortable reading and writing code that involves multi-dimensional arrays</li> <li>be able to declare and allocate multi-dimensional arrays on the stack and the heap</li> <li>be able to decide when to use a fixed-size multi-dimensional array, a dynamically-sized multi-dimensional array, or a mixture of the two</li> <li>understand how we can pass a multi-dimensional array into a function</li> <li>understand the differences in C syntax, between an array of pointers and a pointer to an array.</li> <li>be able to declare and allocate jagged arrays</li> </ul>"},{"location":"notes/19-md-array.html#preliminary-pointer-to-a-fixed-size-array","title":"Preliminary: Pointer to a Fixed-Size Array","text":"<p>Consider the following code:</p> <pre><code>long a[20];\nlong *ptr;\nptr = a; // equivalent to ptr = &amp;a[0];\n</code></pre> <p>We know that, due to array decay, <code>ptr</code> will be pointing to the first element of the array.</p> <p>C allows us to have a pointer that points to an array.  Note: Not just an element, but the whole array.  We can do so with</p> <pre><code>long a[20];\nlong (*ptr)[20];\nptr = &amp;a; \n</code></pre> <p>The declaration <code>long (*ptr)[20]</code> denotes that <code>ptr</code> is a pointer to an array of 20 <code>long</code> elements.   We can decipher this syntax as follows: <code>(*ptr)</code> is an array of 20 long values.  <code>*</code> is the deference operator to an address, so <code>ptr</code> must then be a memory address of an array of 20 long values.</p> <p>C is very particular about the type of pointer that points to an array -- the size of the array matters.   If we write <pre><code>long a[20];\nlong (*ptr)[10];\nptr = &amp;a;  // warning\n</code></pre></p> <p>We will get a compilation warning about incompatible pointer types on the line <code>ptr = &amp;a</code>, since <code>a</code> is an array of 20 <code>long</code> values, and <code>ptr</code> is a pointer to an array of 10 <code>long</code> values.</p> <p>Note that the parenthesis around the <code>(*ptr)</code> is important.  If we write: <pre><code>long *ptr[10];\n</code></pre></p> <p>or  <pre><code>long *(ptr[10]);\n</code></pre></p> <p>Then, we are declaring an array of 10 pointers to <code>long</code>, which is different from a pointer to an array of 10 <code>long</code> values.</p> <p></p>"},{"location":"notes/19-md-array.html#fixed-size-2d-array","title":"Fixed-size 2D Array","text":"<p>At the beginning of Unit 14, we say that an array can hold one or more values of some type \\(T\\).  \\(T\\) can be any type, including an array.  So, we can have an array where each element is another array.</p> <p>For instance, <pre><code>long matrix[10][20];\n</code></pre></p> <p>Here, we have an array of 10 elements, and each element is an array of 20 <code>long</code> values.</p> <p>When we access the elements in the array, we can use the notation <code>matrix[i][j]</code>.  This notation is actually a simpler form of <code>(matrix[i])[j]</code> -- <code>matrix[i]</code> refers the <code>i+1</code>-th element in <code>matrix</code>, which is an array of 20 elements. So <code>(matrix[i])[j]</code> accesses the <code>j+1</code>-th element in this array of 20 elements.</p> <p>Such an array is called a two-dimensional array, or 2D array.  We can have a 3D array, 4D array, and so on.</p> <p>We have seen three types of arrays.  On the stack, we have fixed-length arrays and variable-length arrays.  On the heap, we have dynamically allocated arrays.  A 2D array can mix different types of arrays.  Since we ban the use of variable length arrays, we will focus on fixed-length arrays and dynamically allocated arrays only.</p> <p>The example <code>matrix</code> above is a fixed-length 2D array.  In the memory, a continuous space to store 200 <code>long</code> values is allocated.  We can visualize this as having 10 rows of <code>long</code> array, each array contains 20 columns of <code>long</code> values.</p> <p>Since <code>matrix[i]</code> is an array in the example above, <code>matrix[i]</code> decays to <code>&amp;matrix[i][0]</code>, the address of the first element in <code>matrix[i]</code>.  After decay, <code>matrix[i]</code> can be treated as having the type <code>long *</code>.</p> <p>Further, since <code>matrix[i]</code> is a 1D array, we can pass <code>matrix[i]</code>, which is one of the rows in <code>matrix</code>, just like a normal 1D array:</p> <pre><code>void bar(size_t num_of_cols, long matrix_row[]) { .. }\nvoid bar(size_t num_of_cols, long* matrix_row) { .. }\n</code></pre> <p>We can then invoke the function <code>bar</code> like:</p> <pre><code>bar(20, matrix[i]);\n</code></pre> <p>Things get a bit tricky when we want to pass a 2D array into a function.  By array decay, when we use the array name <code>matrix</code>, it is equivalent to <code>&amp;matrix[0]</code>, which is the address of the first element in <code>matrix</code>, which is the memory address of an array of 20 <code>long</code> elements.</p> <p>To pass a 2D array into a function, say <code>foo</code>, we can write </p> <pre><code>void foo(size_t num_of_rows, size_t num_of_cols, long matrix_row[10][20]]) { .. }\nvoid foo(size_t num_of_rows, size_t num_of_cols, long matrix_row[][20]]) { .. }\nvoid foo(size_t num_of_rows, size_t num_of_cols, long (*matrix_row)[20]) { .. }\n</code></pre> <p>Here, we cannot omit the number <code>20</code> since it is part of the type information.  </p> <p>With the declaration above, we can then call the function <code>foo</code> and pass in the 2D array as such: <pre><code>foo(10, 20, matrix);\n</code></pre></p> <p>Same Address; Different Meaning</p> <p>Since an array in C consists only of a contiguous region of memory that stores the elements of the array, the address of an array is the same as the address of the first element of the array.  The following five statements would print out exactly the same values. <pre><code>cs1010_println_pointer(matrix);        // address of a 1D array\ncs1010_println_pointer(matrix[0]);     // address of a long \ncs1010_println_pointer(&amp;matrix);       // address of a 2D array \ncs1010_println_pointer(&amp;matrix[0]);    // address of a 1D array\ncs1010_println_pointer(&amp;matrix[0][0]); // address of a long\n</code></pre></p>"},{"location":"notes/19-md-array.html#a-fixed-size-array-of-dynamically-allocated-array","title":"A Fixed-Size Array of Dynamically Allocated Array","text":"<p>Suppose that we know only one of the dimensions of the array in advance, but not the other dimension.  We can allocate a fixed-length array for the known dimension, and allocate the other dimension dynamically using <code>calloc</code>.  We can declare an array like this:</p> Allocating a 2D Array, Non-Contiguous Memory (Without Proper Failure Handling)<pre><code>double *buckets[10];\nsize_t num_of_cols = cs1010_read_size_t();\nfor (long i = 0; i &lt; 10; i += 1) {\n  buckets[i] = calloc(num_of_cols, sizeof(double));\n}\n</code></pre> <p></p> <p>Just like a dynamically allocated 1D array, we need to free the allocated memory after we are done. </p> <p>If we allocate non-contiguous regions of memory for our 2D array (with multiple <code>calloc</code> calls), then we need to deallocate it with multiple <code>free</code> calls. <pre><code>for (size_t i = 0; i &lt; 10; i += 1) {\n  free(buckets[i]);\n}\n</code></pre></p> <p>An alternative is to allocate a single contiguous region of memory with a single <code>calloc</code> call, and then point the pointers in our array in the right memory location.</p> Allocating a 2D Array, Contiguous Memory (Without Proper Failure Handling)<pre><code>double *buckets[10];\nsize_t num_of_cols = cs1010_read_size_t();\nbuckets[0] = calloc(num_of_cols * 10, sizeof(double));\nfor (size_t i = 1; i &lt; 10; i += 1) {\n  buckets[i] = buckets[i - 1] + num_of_cols;\n}\n</code></pre> <p></p> <p>For contiguous memory allocation, there is only one <code>calloc</code> call.  So we only need to: <pre><code>free(bucket[0]);\n</code></pre></p> <p>Here, <code>bucket</code> is a 1D array of 10 pointers to <code>double</code>.  So, we can easily pass <code>bucket</code> to a function just like any other 1D array:</p> <ul> <li><code>void baz(size_t num_of_rows, size_t num_of_cols, double **bucket)</code></li> <li><code>void baz(size_t num_of_rows, size_t num_of_cols, double *bucket[])</code></li> </ul> <p>Accessing individual elements in such type of array is no different from accessing a fixed-length 2D array: we use <code>bucket[i][j]</code>.  Just like a 1D array, <code>bucket[i][j]</code> is synonym with <code>*(bucket[i] + j)</code>, which is synonym with <code>*(*(bucket + i) + j)</code>.</p>"},{"location":"notes/19-md-array.html#dealing-with-allocation-failures","title":"Dealing with Allocation Failures","text":"<p>Just like a dynamically allocated 1D array, we need to deal with the possibility that memory allocation can fail.  To do this, we need to check if each <code>calloc</code> is successful or not.  In case one of the memory allocations fails, then we would have a partially allocated 2D array.  We will need to deallocate all those partially allocated memory with <code>free</code>.</p> Allocating a 2D Array, Non-Contiguous Memory (With Proper Failure Handling)<pre><code>double *buckets[10];\nsize_t num_of_cols = cs1010_read_size_t();\nfor (size_t i = 0; i &lt; 10; i += 1) {\n  buckets[i] = calloc(num_of_cols, sizeof(double));\n  if (buckets[i] == NULL) {\n    cs1010_println_string(\"unable to allocate array\");\n    for (size_t j = 0; j &lt; i; j += 1) {\n      free(buckets[j]);\n    }\n    return 1; // return non-zero from main (or other error indicator from a non-main function)\n  }\n}\n</code></pre> <p>If we allocate a single contiguous region of memory with a single <code>calloc</code> call, then the code is simpler:</p> Allocating a 2D Array, Contiguous Memory (With Proper Failure Handling)<pre><code>double *buckets[10];\nsize_t num_of_cols = cs1010_read_size_t();\nbuckets[0] = calloc(num_of_cols * 10, sizeof(double));\nif (buckets[0] == NULL) {\n  cs1010_println_string(\"unable to allocate array\");\n  return 1;\n}\nfor (size_t i = 1; i &lt; 10; i += 1) {\n  buckets[i] = buckets[i - 1] + num_of_cols;\n}\n</code></pre>"},{"location":"notes/19-md-array.html#dynamically-size-2d-array","title":"Dynamically Size 2D Array","text":"<p>Suppose that we do not know both dimensions in advance, then we can allocate both dimensions of the array dynamically on the heap.</p> <pre><code>double **canvas;\nsize_t num_of_rows = cs1010_read_size_t();\nsize_t num_of_cols = cs1010_read_size_t();\ncanvas = calloc(num_of_rows, sizeof(double *)); // note the call to sizeof\nif (canvas == NULL) {\n  cs1010_println_string(\"unable to allocate array\");\n  return 1; // or other error indicator\n}\nfor (size_t i = 0; i &lt; num_of_rows; i += 1) {\n  canvas[i] = calloc(num_of_cols, sizeof(double));\n  if (canvas[i] == NULL) {\n    cs1010_println_string(\"unable to allocate array\");\n    for (size_t j = 0; j &lt; i; j += 1) {\n      free(canvas[j]);\n    }\n    free(canvas);\n    return 1; // or other error indicator\n  }\n}\n</code></pre> <p></p> <p>Passing such an array into a function is no different from a 2D array where only one dimension is dynamically allocated above.</p> <p>Remember to free the allocated memory for both dimensions after we are done or if one of the rows encounters an error.</p> <pre><code>for (size_t i = 0; size_t i &lt; num_of_rows; i += 1) {\n  free(canvas[i]);\n}\nfree(canvas);\n</code></pre> <p>Note that during the deallocation of memory, we need to do it in the reverse order of memory allocation.  If we call <code>free(canvas)</code> first, we are no longer guaranteed to be able to access <code>canvas[i]</code> with the correct pointers inside, so calling <code>free(canvas[i])</code> after <code>free(canvas)</code> might lead to an error.</p> <p>Just like before, there is an alternative where we can also allocate a single contiguous region of memory with a single <code>calloc</code> call, and then point the pointers in our array in the right memory location.</p> <pre><code>double **canvas;\nsize_t num_of_rows = cs1010_read_size_t();\nsize_t num_of_cols = cs1010_read_size_t();\ncanvas = calloc(num_of_rows, sizeof(double *));\nif (canvas == NULL) {\n  cs1010_println_string(\"unable to allocate array\");\n  return 1;\n}\ncanvas[0] = calloc(num_of_rows * num_of_cols, sizeof(double));\nif (canvas[0] == NULL) {\n  cs1010_println_string(\"unable to allocate array\");\n  free(canvas);\n  return 1;\n}\n\nfor (size_t i = 1; i &lt; num_of_rows; i += 1) {\n  canvas[i] = canvas[i-1] + num_of_cols;\n}\n</code></pre> <p>If we allocate a single contiguous region of memory for <code>canvas</code>, then we only need to <code>free(canvas[0])</code> and <code>free(canvas)</code> once we are done.</p>"},{"location":"notes/19-md-array.html#jagged-array","title":"Jagged Array","text":"<p>One advantage of using a dynamically allocated array is that it allows a jagged 2D array, where each row has a different size.  The example below allocate memory for a 2D array that is shaped like a half-square: the first row has one element, the second row has two elements, the third row has three, and so on.</p> <pre><code>double *half_square[10];\nfor (size_t i = 0; i &lt; 10; i += 1) {\n  half_square[i] = calloc(i+1, sizeof(double));\n}\n</code></pre>"},{"location":"notes/19-md-array.html#initializing-a-multidimensional-array","title":"Initializing a Multidimensional Array","text":"<p>Just like a 1D-array, we can initialize a multi-dimensional array with initializers during declaration:</p> <pre><code>long matrix[3][3] = {\n    {1, 0, -1},\n    {-1, 1, 0},\n    {0, -1, 1}\n};\n</code></pre> <p>Note that we use nested <code>{</code> and <code>}</code> here.  There are other variations to the syntax above, which you may read up on your own if you are interested as we do not need to write complex initializers for multi-dimensional arrays that often.</p>"},{"location":"notes/20-efficiency.html","title":"Unit 20: Efficiency","text":""},{"location":"notes/20-efficiency.html#learning-objectives","title":"Learning Objectives","text":"<p>After completing this unit, students should:</p> <ul> <li>be aware that efficiency translates to less (and hopefully minimal) computation and space being used by a program</li> <li>Understand that increasing efficiency typically requires that there are no redundancies and no duplication (i.e., not repeat work already done)</li> <li>understand that when analyzing efficiency, we wish to bound the computation required and thus look at the worst-case scenario</li> <li>understand that Big-O bounds capture the highest order of growth for some algorithm/code</li> <li>be able to determine the Big-O bounds for most code used in CS1010</li> <li>be able to compare the efficiency between two algorithms using Big-O analysis</li> </ul>"},{"location":"notes/20-efficiency.html#no-redundant-work","title":"No Redundant Work","text":"<p>We have been asking you to write efficient code, but we have not been very formal about quantifying what is efficiency.  In this unit, we will recap the various good habits to write efficient code, and introduces the notion of time complexity of a code, using the Big-O notation.</p> <p>Writing efficient code means that we should not write code that runs unnecessarily.  Let's consider the following two versions of the <code>is_prime</code> function.</p> <pre><code>bool is_prime(long n)\n{\n  bool is_prime = true;\n  for (long i = 2; i &lt;= n - 1; i += 1) {\n    if (n % i == 0) {\n      is_prime = false;\n    }\n  }\n  return is_prime;\n}\n</code></pre> <pre><code>bool is_prime(long n)\n{\n  for (long i = 2; i*i &lt;= n; i += 1) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n</code></pre> <p>Both versions are correct -- they produce <code>true</code> when the input <code>n</code> is prime, and <code>false</code> otherwise.  But they take a vastly different amount of time to run.  On my machine, the slower version of <code>is_prime</code> took ~100s, while the fast one runs ~3ms when invoked with <code>is_prime(10000000001)</code>.  The time taken is a five-order of magnitude difference!</p> <p>The second version of <code>is_prime</code> is faster as it follows the following mantra:</p> <p>\"No redundant work\"</p> <p>We came across this when we discussed short-circuiting earlier -- we want to order our logical expression so that we don't do extra, unnecessary, work.</p> <p>Here, we improve the efficiency of <code>is_prime</code> by (i) returning <code>false</code> as soon as we found \"proof\" that the input is not a prime, and (ii) not checking for a divisor that is redundant.</p>"},{"location":"notes/20-efficiency.html#worst-case-performance","title":"Worst-Case Performance","text":"<p>The two techniques we employed above behave slightly differently.  For (i), we opportunistically stop our computation once we know the answer when the input is not a prime.  However, in the worst case, when the input is a prime, we still have to check through all \\(n-2\\) divisors, from 2 up to \\(n-1\\), before we can conclude that the input is a prime.  Thus, for (i), we make our program faster for certain inputs but in the worst case, we are not able to speed up the program.</p> <p>The second technique is more interesting and more fruitful.  With a little math, we can show that we only need to check for the divisor up to \\(\\sqrt{n}\\).  Here, we are improving the worst case performance of <code>is_prime</code>, so whether the input is prime or not, we always have a speedup.</p> <p>How much is the speedup in the worst case?  In the input above, with the original slow code, in the worst case, I need to check through ~10,000,000,001 divisors.  With the faster version, I only need to check ~\\(\\sqrt{10,000,000,001}\\) = ~10,000 divisors.  That's where the five orders of magnitude speedup come from!</p>"},{"location":"notes/20-efficiency.html#no-duplication","title":"No Duplication","text":"<p>The second principle to improving the efficiency of the program is \"No duplication\" -- we should not repeat work that has been done before.</p> <p>Let's look at the example from earlier this semester, where you are asked to compute the range of a list.  Recall that the range of a list is the absolute difference between the largest element and the smallest element.  We use this problem to motivate the use of function, where we denote \\(range(L, k) = |max(L, k) - min(L, k)|\\).  If we are to implement this solution in C, however, we would end up scanning through the list twice: first to find the max, then to find the min.</p> <p>But we could easily just go through the list once, using call-by-reference to output both the max and the min if we are willing to forgo the notion of pure functions and function-as-a-black-box.</p> <p>The performance improvement for not scanning through a list twice is modest at most.  Let's look at another example:</p> <pre><code>bool is_prime(long n)\n{\n  for (long i = 2; (double) i &lt;= sqrt(n); i += 1) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n</code></pre> <p>In this version, the loop checks for <code>i &lt;= sqrt(n)</code>, the terminating condition, every single loop.  But, note that <code>n</code> does not change as we loop, and so <code>sqrt(n)</code> does not change as well.  The code, however, calculates <code>sqrt(n)</code> over and over again.  It is doing duplicated work, re-computing the square root of <code>n</code>, for nothing.  A better code would compute <code>sqrt(n)</code> once, store it in a variable, and then just read from that variable.</p> <pre><code>bool is_prime(long n)\n{\n  double s = sqrt(n);\n  for (long i = 2; (double) i &lt;= s; i += 1) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n</code></pre> <p>Let's look at another example where, by not repeating ourselves, we can gain significant performance improvement.</p>"},{"location":"notes/20-efficiency.html#finding-fibonacci-numbers","title":"Finding Fibonacci Numbers","text":"<p>Recall from your Exercise 4, the Fibonacci sequence of numbers are numbers formed by adding the previous two numbers to form the next numbers. In other words, the \\(i\\)-th Fibonacci number is computed as the sum of the previous two Fibonacci numbers, the \\((i-2)\\)-th, and the \\((i-1)\\)-th.</p> <p>Here is one way we can find the Fibonacci numbers with a loop:</p> <pre><code>long fib(long n)\n{\n  if (n == 1 || n == 2) {\n    return 1;\n  }\n  long first = 1;\n  long second = 1;\n  long third = 2;\n  for (long i = 2; i != n; i += 1) {\n    first = second;\n    second = third;\n    third = first + second;\n  }\n  return third;\n}\n</code></pre> <p>To find the \\(n\\)-th Fibonacci number, we take \\(n\\) steps in a loop.</p> <p>Now, let's see the following elegant recursive solution: <pre><code>long fib(long n)\n{\n  if (n == 1 || n == 2) {\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n</code></pre></p> <p>This solution is short and follows directly from the definition of Fibonacci numbers.  Running this, however, reveals something very disturbing.  Let's say we call <code>fib(n)</code>.  This invocation in turns calls <code>fib(n-1)</code> and <code>fib(n-2)</code>.  <code>fib(n-1)</code> then calls <code>fib(n-2)</code> and <code>fib(n-3)</code>.   So, <code>fib(n-2)</code> will be called twice -- so we are repeating ourselves, violating the no duplication principles.  We will invoke <code>fib()</code> many times.</p>"},{"location":"notes/20-efficiency.html#big-o-notation","title":"Big-O Notation","text":"<p>How do we characterize the number of times <code>fib()</code> is called?  To answer this, we will introduce to you the Big-O notation.</p> <p>The Big-O function is a mathematical function that computer scientists use to characterize the time and space efficiency of an algorithm.  In CS1010, we will not go into the formal definition of the notation but will introduce Big-O using the intuition that it is the \"rate of growth\" of a function.</p> <p>Formal definition</p> <p>For those mathematically inclined students who can't wait until CS2040C or CS3230 for a formal definition, here it is:</p> <p>Given two functions \\(f\\) and \\(g\\), we say that \\(f(x) = O(g(x))\\) if the exists a position real number \\(c\\) and a real number \\(x_0\\) such that</p> \\[ |f(x)| \\le cg(x), \\,\\,  \\forall x \\ge x_0\\] <p>To motivate Big-O, let's consider how we can count the number of \"steps\" taken by an algorithm.  Let's consider this again:</p> <pre><code>  for (long i = 2; i != n; i += 1) {\n    first = second;\n    second = third;\n    third = first + second;\n  }\n</code></pre> <p>If we consider each of the fundamental operations: comparison, addition, and assignment, as a step, then we can see that, in each loop, there is one comparison (<code>i != n</code>), two additions (<code>i + 1</code>, <code>third = first + second</code>), four assignments.  So we have seven operations per loop, with a total of \\(n-1\\) loops.  So we have \\(7n - 7\\) operations.  In addition, we also need to count for the assignment <code>i = 2</code> and the additional comparison before we exit the loop (<code>i != n</code>).  So, in total, we have \\(7n - 5\\) operations.</p> <p>As you can see, such detailed counting of the steps is tedious, and in fact, not very meaningful.  For instance, we did not account for reading values from the memory and writing of values into the memory, the performance of which becomes dependent on the architecture underneath.</p> <p>To free us from such low-level accounting of the number of steps, let's focus on the big picture.  No matter how we count the number of steps, in the end, it is a linear function of \\(n\\).  In order words, the number of steps taken by the algorithm to compute Fibonacci in a loop grows linearly with \\(n\\).  Using the Big-O notation, we say that it takes \\(O(n)\\) steps.</p> <p>Given a mathematical function with multiple terms, the Big-O of this function is obtained by dropping any multiplicative constants and all terms, except for the one with the highest rate of growth.  For instance, \\(O(\\frac{n^4}{10} + 10000n^2 - n) = O(n^4)\\).</p> <p>Due to this focus on the term with the highest rate of growth, and not bothering about other terms or multiplicative constants, it becomes very convenient for us to express the time efficiency of an algorithm with \\(O()\\) -- we no longer need to count the steps precisely but just focus on the number of times it takes to run the algorithm in terms of \\(n\\).</p> <p>Take the example of <code>is_prime</code>.  The slow algorithm takes \\(O(n)\\), the fast algorithm takes \\(O(\\sqrt{n})\\).</p> <p>Take another example: to find the range of a list, both algorithms, regardless of whether we are taking two passes or one pass, take \\(O(n)\\) time.</p>"},{"location":"notes/20-efficiency.html#comparing-rate-of-growth","title":"Comparing Rate of Growth","text":"<p>Given two functions \\(f(n)\\) and \\(g(n)\\), how do we determine which one has a higher rate of growth?  We say that \\(f(n)\\) grows faster than \\(g(n)\\) if we can find a \\(n_0\\), such that \\(f(n) &gt; cg(n)\\) for all \\(n \\ge n_0\\) and for some constant \\(c\\).</p> <p>For instance, which one grows faster?  \\(f(n) = n^n\\) or \\(g(n) = 2^n\\)?  Pick \\(n = 1\\), we have \\(f(1) &lt; g(1)\\)<sup>1</sup>.  Pick \\(n = 2\\), we have \\(f(2)\\) equals \\(g(2)\\).  Pick \\(n = 3\\), we have \\(f(3) &gt; g(3)\\) now, and we can see that for any \\(n &gt; 3\\), \\(n^n &gt; 2^n\\), so we can conclude that \\(f(n)\\) grows faster than \\(g(n)\\).</p>"},{"location":"notes/20-efficiency.html#running-time-or-time-complexity-of-an-algorithm","title":"Running Time or Time Complexity of an Algorithm","text":"<p>Using the big-O notation, we can quantify how many steps an algorithm takes to run.  This measurement is called the running time or the time complexity of the algorithm.</p> <p>In CS1010, when we express the running time, we are interested in the worst-case performance, or worst-case running time.  Computer scientists also find measuring the average running time useful in certain scenarios.  You will learn about analyzing the average running time in CS3230.</p> <p>There are a couple of things to note when expressing the running of an algorithm in big-O notation:</p> <ul> <li>We should express it in its simplest form -- without multiplicative constants, and dropping all lower terms.</li> <li>Since we are specifying the worst-case performance, we are measuring an upper bound on the running time.  We should express an upper bound that is as tight as possible.</li> </ul>"},{"location":"notes/20-efficiency.html#example-1-finding-the-maximum","title":"Example 1: Finding the Maximum","text":"<p>Now, consider the algorithm to find the maximum elements from a list:</p> <pre><code>size_t max(size_t n, const long list[])\n{\n  long max_so_far = list[0];\n  size_t max_index = 0;\n  for (size_t i = 1; i &lt;= n; i += 1) {\n    if (list[i] &gt; max_so_far) {\n      max_so_far = list[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n</code></pre> <p>The algorithm scans through the elements in the list one-by-one.  The number of steps taken is thus \\(O(n)\\).  Note that the number of times we update <code>max_so_far</code> and <code>max_index</code> does not matter, since it incurs an additional constant number of steps per element.</p>"},{"location":"notes/20-efficiency.html#example-2-rectangle","title":"Example 2: Rectangle","text":"<p>Now, consider the code below that draw a rectangle:</p> <pre><code>void draw_line(long m, char* first, char* mid, char* last)\n{\n  cs1010_print_string(first);\n  for (int j = 0; j &lt; m - 2; j += 1) {\n    cs1010_print_string(mid);\n  }\n  cs1010_println_string(last);\n}\n\nvoid draw_rectangle(long m, long n)\n{\n  draw_line(m, TOP_LEFT, HORIZONTAL, TOP_RIGHT);\n  for (int i = 0; i &lt; n - 2; i += 1) {\n    draw_line(m, VERTICAL, \" \", VERTICAL);\n  }\n  draw_line(m, BOTTOM_LEFT, HORIZONTAL, BOTTOM_RIGHT);\n}\n\nint main()\n{\n  long m = cs1010_read_long();\n  long n = cs1010_read_long();\n  draw_rectangle(m, n);\n}\n</code></pre> <p>The function <code>draw_line</code> has a loop that loops \\(m-2\\) times.  There is a constant amount of work done before and after the loop (independent of \\(m\\)).  Thus, this function takes \\(O(m)\\) time.</p> <p>Now consider <code>draw_rectangle</code> and focus on the <code>for</code> loop.  The code has a loop that iterates \\(n-2\\) times.  For each loop, it calls <code>draw_line</code>, which takes \\(O(m)\\).  Thus, the total time taken by the for loop is \\(O(m \\times (n-2)) = O(m \\times n) = O(mn)\\).  The function <code>draw_rectangle</code> also calls <code>draw_line</code> twice outside the loop.  The total running time is \\(O(m + mn + m)\\), which is still \\(O(mn)\\).</p> <p>Note that if we execute the following two lines sequentially, <pre><code>  draw_line(m, TOP_LEFT, HORIZONTAL, TOP_RIGHT);\n  draw_line(n, TOP_LEFT, HORIZONTAL, TOP_RIGHT);\n</code></pre></p> <p>We will incur a running time of \\(O(m + n)\\) instead.</p>"},{"location":"notes/20-efficiency.html#example-3-recursive-max","title":"Example 3: Recursive Max","text":"<p>Consider the divide and concur version of <code>find_max</code> <pre><code>long find_max(const long list[], long start, long end){\n  if (start &gt;= end - 1){\n    return list[start];\n  }\n  long mid = (start + end) / 2;\n  long left = find_max(list, start, mid);\n  long right = find_max(list, mid, end);\n  if (left &gt;= right) {\n    return left;\n  } \n  return right;\n}\n</code></pre></p> <p>What is its running time?  Answering this question is trickier since this is a recursive function.  But, we can use the same \"wishful thinking\" approach we used when writing this code to analyze its running time.</p> <p>Let \\(T(n)\\) is the running time of <code>find_max</code> when given the list with \\(n\\) elements (i.e., <code>end - start</code> is \\(n\\)).  We can express \\(T(n)\\) recursively -- since we break the list into two halves and recur, we can write \\(T(n) = 2T(n/2) + 1\\) for \\(n &gt; 1\\), with the base case \\(T(1) = O(1)\\).</p> <p>Note that \\(O(1)\\) is also known as constant running time<sup>1</sup>.</p> <p>The equation for \\(T(n)\\) above is known as a recurrence relation.  There are standard techniques to solve it (search for Master Theorem on the web), but we won't go into them in CS1010.  We will solve it from the first principle, by expanding the equation and observing the pattern.</p> <p>Expanding \\(T(n)\\), we get</p> \\[ \\begin{align} T(n) &amp;= 2T(n/2) + 1  \\\\      &amp;= 4T(n/4) + 2 + 1  \\\\      &amp;= 8T(n/8) + 4 + 2 + 1  \\\\       &amp;= 2^iT(n2^{-i}) + 2^{i-1} + .. + 4 + 2 + 1  \\\\ \\end{align} \\] <p>To reach the base case, \\(n2^{-i} = 1\\), so \\(2^i = n\\) and \\(2^{i-1} = n/2\\).   We have  </p> \\[ \\begin{align} T(n) &amp;= nT(1) + n/2 + .. + 4 + 2 + 1  \\\\      &amp;= O(n) + n/2 + ... + 4 + 2 + 1\\\\ \\end{align} \\] <p>This term \\(n/2 + ... + 2 + 1\\) a geometric series with a coefficient of 1 and a common ratio of 2.  It sums to less than \\(n\\).  We can thus conclude that \\(T(n) = O(n)\\).</p>"},{"location":"notes/20-efficiency.html#example-4-fibonacci","title":"Example 4: Fibonacci","text":"<p>Let's get back to the recursive Fibonacci number example.  What is the running time of <code>fib</code>?</p> <pre><code>long fib(long n)\n{\n  if (n == 1 || n == 2) {\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n</code></pre> <p>Let \\(T(n)\\) is the running time of <code>fib(n)</code>.  Since <code>fib(n)</code> calls <code>fib(n-1)</code> and <code>fib(n-2)</code>, we can write \\(T(n) = T(n-1) + T(n-2) + 1\\).  Just like the recursive function there is a base case: \\(T(n) = O(1)\\) if \\(n \\le 2\\).</p> <p>We know that \\(T(n-1) &gt; T(n-2)\\).  So,</p> \\[ T(n) &lt; T(n-1) + T(n-1) + 1, \\] <p>therefore,</p> \\[ T(n) &lt; 2T(n-1) + 1. \\] <p>So</p> \\[ \\begin{align} T(n) &amp;&lt; 2T(n-1) + 1\\\\      &amp;&lt; 4T(n-2) + 2 + 1 \\\\      &amp;&lt; 8T(n-3) + 4 + 2 + 1\\\\      &amp;&lt; 2^iT(n-i) + 2^{i-1} + ... + 4 + 2 + 1\\\\      &amp; : \\\\      &amp;&lt; 2^{n-1}T(1) + 2^{n-2} + ... + 4 + 2 + 1 \\\\      &amp;= 2^n - 1 \\end{align} \\] <p>Since we can drop the additive constant in Big-O notation, we have \\(T(n) = O(2^n)\\).</p> <p>This explains why the recursive solution to Fibonacci is so much slower than the iterative version, which is \\(O(n)\\) -- one grows exponentially while the other linearly in terms of \\(n\\).</p>"},{"location":"notes/20-efficiency.html#example-5-collatz","title":"Example 5: Collatz","text":"<p>Not every program has a running time that is easy to analyze.  For instance, take <code>collatz</code> <pre><code>long count_num_of_steps(long n)\n{\n  long num_of_steps = 0;\n  while (n != 1) {\n    n = collatz(n);\n    num_of_steps += 1;\n  }\n  return num_of_steps;\n}\n</code></pre></p> <p>Recall that this program is based on the Collatz conjecture, which has not been proven.  So we cannot say that the loop above will always terminate after a given number of steps.  The running time for the code above remains unknown.</p>"},{"location":"notes/20-efficiency.html#space-efficiency","title":"Space Efficiency","text":"<p>We have focused mostly on efficiency in terms of time in this unit.  Note that the notion of efficiency extends to space (memory usage) as well.  Big-O notation can be used to quantify how much space is used as well.</p>"},{"location":"notes/20-efficiency.html#problem-set-20","title":"Problem Set 20","text":""},{"location":"notes/20-efficiency.html#problem-201","title":"Problem 20.1","text":"<p>Order the following functions in the increasing order of rate of growth:</p> <ul> <li>\\(n!\\),</li> <li>\\(2^n\\),</li> <li>\\(\\log_{10} n\\),</li> <li>\\(\\ln n\\),</li> <li>\\(n^4\\),</li> <li>\\(n\\ln n\\),</li> <li>\\(n\\),</li> <li>\\(n^2\\),</li> <li>\\(e^n\\),</li> <li>\\(\\sqrt{n}\\)</li> </ul>"},{"location":"notes/20-efficiency.html#problem-202","title":"Problem 20.2","text":"<p>What is the Big-O running time of the following code, in terms of \\(n\\)?</p> <p>a)</p> <pre><code>for (long i = 0; i &lt; n; i += 1) {\n  for (long j = 0; j &lt; n; j += 2) {\n    cs1010_println_long(i + j);\n  }\n}\n</code></pre> <p>b) <pre><code>for (long i = 1; i &lt; n; i *= 2) {\n  for (long j = 1; j &lt; n; j *= 2) {\n    cs1010_println_long(i + j);\n  }\n}\n</code></pre></p> <p>c) <pre><code>for (long j = 0; j &lt; n; j += 1) {\n  for (long i = 0; i &lt; j; i += 1) {\n    cs1010_println_long(i + j);\n  }\n}\n</code></pre></p> <p>d) <pre><code>long k = 1;\nfor (long j = 0; j &lt; n; j += 1) {\n  k *= 2;\n  for (long i = 0; i &lt; k; i += 1) {\n    cs1010_println_long(i + j);\n  }\n}\n</code></pre></p>"},{"location":"notes/20-efficiency.html#problem-203","title":"Problem 20.3","text":"<p>a) Express the running time of the following function as a recurrence relation:</p> <pre><code>void foo(long n) {\n  if (n == 1) {\n    return 1;\n  }\n  return foo(n/2) + 2;\n}\n</code></pre> <p>What is its running time?</p> <p>b) Express the running time of the following function as a recurrence relation:</p> <pre><code>void foo(long n) {\n  if (n == 1) {\n    return 1;\n  }\n  for (long i = 0; i &lt; n; i += 1) {\n    cs1010_println_long(i);\n  }\n  return foo(n - 1);\n}\n</code></pre> <p>What is its running time?</p> <ol> <li> <p>The \\(1\\) in \\(O(1)\\) has nothing to do with the function returning <code>1</code>.  But we write it this way because we can drop multiplicative constants in the big-O notation.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"notes/21-search.html","title":"Unit 21: Searching","text":""},{"location":"notes/21-search.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit students should be familiar with the linear search and binary search algorithms, including understanding how the algorithms work, implementing the algorithms, arguing their correctness, and analyzing their running time.</p>"},{"location":"notes/21-search.html#linear-search","title":"Linear Search","text":"<p>Let's continue the discussion on efficiency on one of the fundamental problems in computing: how to look for something.  Given a list of items \\(L\\) and query item \\(q\\), we wish to find if \\(q\\) is in \\(L\\).  If \\(q\\) is in \\(L\\), then we return the index of \\(q\\).  Otherwise, we return -1.</p> <p>Let's write a function to solve this.</p> <pre><code>/**\n * Look for q in list[0]..list[n-1].\n *\n * @return -1 if not found, the position of q in list otherwise.\n */\nlong search(long n, const long list[], long q) {\n  for (long i = 0; i &lt; n; i += 1) {\n    if (list[i] == q) {\n      return i;\n    }\n  }\n  return -1;\n}\n</code></pre> <p>What is the worst-case running time, expressed in Big-O notation, of the function above?  Suppose the query \\(q\\) is not in the list, we will have to scan the whole list, once.  The worst-case running time is, therefore, \\(O(n)\\).</p> <p>Can we do better?  It turns out that this running time \\(O(n)\\) is also the best that we can do because we cannot be sure that \\(q\\) does not exist until we check every single element in the list.  So there is no shortcut.</p> <p>In previous units, we have seen a recursive divide-and-conquer solution for <code>max</code>.  We can easily adapt it to search as well:</p> <pre><code>/**\n * Look for q in list[i]..list[j].\n *\n * @return -1 if not found, the position of q in list otherwise.\n */\nlong search(const long list[], long i, long j, long q) {\n  if (i &gt; j) {\n    return -1;\n  }\n  long mid = (i+j)/2;\n  if (list[mid] == q) {\n    return mid;\n  } \n  long found = search(list, i, mid-1, q);\n  if (found &gt;= 0) { \n    return found;\n  }\n  return search(list, mid+1, j, q);\n}\n</code></pre> <p>We then call this function as:</p> <pre><code>search(list, 0, n-1, q);\n</code></pre> <p>In the code above, we first handle the base case where <code>i &gt; j</code>, which means that the sublist <code>list[i]..list[j]</code> to search for <code>q</code> in, is empty.  In this case, <code>q</code> is not found and we return -1.  If the list <code>list[i] .. list[j]</code> is not empty, we check the element in the middle if it is <code>q</code>.  If we have not yet find <code>q</code>, then we first search the left sublist.  If still not found, we search the right sublist and return the result.</p> <p>In the worst case, when <code>q</code> is not in the list, we still have to check through every element in the list.  So the running time is still \\(O(n)\\).  It is not faster than searching with a for loop.</p> <p>We can also argue that the running time of the code above is \\(O(n)\\), using the recurrence relation:</p> \\[    T(n)= \\begin{cases}     2T(\\frac{n}{2}) + 1,&amp; \\text{if } n &gt; 1\\\\     1,           &amp; \\text{otherwise} \\end{cases} \\] <p>Here, </p> \\[ \\begin{align*} T(n) &amp;= 2T\\left(\\frac{n}{2}\\right) + 1  \\\\      &amp;= 4T\\left(\\frac{n}{4}\\right) + 2 + 1 = \\cdots  \\\\      &amp;= 2^kT\\left(\\frac{n}{2^k}\\right) + 2^{k-1} + .. + 4 + 2 + 1 = \\cdots \\\\       &amp;= nT(1) + n - 1  \\\\      &amp;= O(n) \\\\ \\end{align*} \\]"},{"location":"notes/21-search.html#binary-search","title":"Binary Search","text":"<p>But, do we always have to check every element in the list?  It turns out that, like many real-life situations, if the input list is sorted, we do not have to scan through every element.  We can eliminate a huge chunk of the elements based on whether a chosen element is bigger or smaller than \\(q\\).</p> <p>Suppose that the input list is sorted in increasing order.  Pick a random element \\(x\\) from the list.  Any element to the left of \\(x\\) must be less than or equal to \\(x\\), and any element to the right of \\(x\\) must be greater or equal to \\(x\\). </p> <p></p> <p>Suppose that \\(q &gt; x\\), then we know that \\(q\\) must be to the right of \\(x\\), there is no need to search to the left of \\(x\\).  Otherwise, \\(q &lt; x\\), and \\(q\\) must be to the left of \\(x\\), and there is no need to search to the right of \\(x\\).</p> <p>We can modify the earlier recursive function into the one below.</p> <pre><code>/**\n * Look for q in list[i]..list[j].\n *\n * @pre list is sorted\n * @return -1 if not found, the position of q in list otherwise.\n */\nlong search(const long list[], long i, long j, long q) {\n  if (i &gt; j) {\n    return -1;\n  }\n  long mid = (i+j)/2;\n  if (list[mid] == q) {\n    return mid;\n  } \n  if (list[mid] &gt; q) {\n    return search(list, i, mid-1, q);\n  } \n  return search(list, mid+1, j, q);\n}\n</code></pre> <p>We have changed the function so that it only searches either the left side or the right side, but never both.</p> <p>The search algorithm above is called binary search since it repeatedly cut the range of values to search by half.</p>"},{"location":"notes/21-search.html#why-is-it-correct","title":"Why is it correct?","text":"<p>It is not obvious at first glance that the code above correctly searches for \\(q\\) in \\(L\\). </p> <p>Let's analyze this function more systematically by writing an assertion for this function.  What we want to do here is to eliminate elements in the array that cannot possibly contain \\(q\\) -- these are elements outside of the <code>list[i]</code> .. <code>list[j]</code> range.  In other words, we want to assert that </p> <pre><code>// { q is not in list[0]..list[i-1] and list[j+1]..list[n-1] }\n</code></pre> <p>at the beginning of the function.  In other words, this is a precondition for the function.</p> <p></p> <p>Let's see if this precondition is true at the beginning.  Since \\(i\\) is \\(0\\) and \\(j\\) is \\(n-1\\), the ranges <code>list[0]..list[i-1]</code> and <code>list[j+1]..list[n-1]</code> are empty, so the assertion is true.</p> <p>What happens if \\(i &gt; j\\)?  This implies that \\(i - 1 &gt; j - 1\\), so the range <code>list[0]</code>..<code>list[i-1]</code> and the range <code>list[j+1]</code>..<code>list[n-1]</code> overlap.  We can be sure that \\(q\\) is not anywhere in <code>list</code>. </p> <p>Let's see how we ensure this assertion is true in the recursive call.</p> <pre><code>       :\n  if (list[mid] &gt; q) {\n    return search(list, i, mid-1, q);\n  } \n       :\n</code></pre> <p>Line 3 of the snippet above is invoked only if <code>list[mid] &gt; q</code>.  Since the array <code>list</code> is sorted, we know for sure that any element in <code>list[mid+1]</code>..<code>list[j]</code> is larger than \\(q\\).  So, \\(q\\) cannot be anywhere in that range.  We can assert, between Lines 2 and 3 above:</p> <pre><code>// { q is not in list[0]..list[i-1] and list[mid]..list[n-1] }\n</code></pre> <p>Thus, when Line 3 is invoked, the same assertion holds true.  You can apply the same argument to the call:</p> <pre><code>  return search(list, mid+1, j, q);\n</code></pre> <p>To summarize, we annotate the code above with the assertions: <pre><code>/**\n * Look for q in list[i]..list[j].\n *\n * @pre list is sorted\n * @pre q is not in list[0]..list[i-1] and list[j+1]..list[n-1]\n * @return -1 if not found, the position of q in list otherwise.\n */\nlong search(const long list[], long i, long j, long q) {\n  if (i &gt; j) {\n    // { q is not in list[0]..list[n-1] }\n    return -1;\n  }\n  long mid = (i+j)/2;\n  if (list[mid] == q) {\n    return mid;\n  } \n  if (list[mid] &gt; q) {\n    // { q is not in list[0]..list[i-1] and list[mid]..list[n-1] }\n    return search(list, i, mid-1, q);\n  } \n  // { q is not in list[0]..list[mid] and list[j+1]..list[n-1] }\n  return search(list, mid+1, j, q);\n}\n</code></pre></p>"},{"location":"notes/21-search.html#how-efficient-is-binary-search","title":"How Efficient is Binary Search","text":"<p>We have seen that if the input list is not sorted, then we minimally have to check every element in the list, leading to an \\(O(n)\\) algorithm.</p> <p>With a sorted input and using binary search, however, we can do better.  Let's consider the worst case, where \\(q\\) is not in the list.  Note that for every comparison we make, we reduce the range of elements to search by half, until we reach one element.  We start with \\(n\\) elements that could possibly contain \\(q\\).  After one comparison, we are left with \\(n/2\\).  After another comparison, we are left with \\(n/4\\), etc.  It takes only \\(O(\\log n)\\) steps until we reach one element in the list.  This is a big improvement over \\(O(n)\\) time: Suppose n is 1,000,000,000,000,000.  Instead of scanning through and comparing one quadrillion elements, we only need to compare 50 of them!</p> <p>We can also argue that the running time of the code above is \\(O(\\log n)\\), using the recurrence relation:</p> \\[    T(n)= \\begin{cases}     T(\\frac{n}{2}) + 1,&amp; \\text{if } n &gt; 1\\\\     1,           &amp; \\text{otherwise} \\end{cases} \\] <p>Now,</p> \\[ \\begin{align*} T(n) &amp;= T\\left(\\frac{n}{2}\\right) + 1  \\\\      &amp;= T\\left(\\frac{n}{4}\\right) + 2 = \\cdots  \\\\      &amp;= T\\left(\\frac{n}{2^k}\\right) + k = \\cdots \\\\       &amp;= T(1) + \\log n  \\\\      &amp;= O(\\log n) \\\\ \\end{align*} \\]"},{"location":"notes/21-search.html#the-magic-of-binary-search","title":"The \"Magic\" of Binary Search","text":"<p>How did we reduce the running time of searching from \\(O(n)\\), where we have to check every element, to \\(O(\\log n)\\)?  The secret ingredient here is that we exploit the underlying property of the input array -- in this case, the fact that the array is sorted -- to help us eliminate some possibilities, allowing us to avoid redundant checks.</p> <p>Exploiting underlying properties of the inputs is a crucial weapon we have in speeding up our algorithm.</p>"},{"location":"notes/21-search.html#problem-set-21","title":"Problem Set 21","text":""},{"location":"notes/21-search.html#problem-211","title":"Problem 21.1","text":"<p>Re-write the binary search algorithm using a loop.</p>"},{"location":"notes/21-search.html#problem-212","title":"Problem 21.2","text":"<p>Instead of returning -1 if the query <code>q</code> is not found, modify the binary search algorithm in Problem 21.1 such that it returns either:</p> <ul> <li>a position <code>k</code>, such that <code>list[k] &lt;= q &lt;= list[k+1]</code>. </li> <li><code>-1</code> if <code>q &lt; list[0]</code> </li> <li><code>n</code> if <code>q &gt; list[n-1]</code></li> </ul>"},{"location":"notes/22-sort.html","title":"Unit 22: Sorting","text":""},{"location":"notes/22-sort.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>be familiar with four sorting algorithms: counting sort, selection sort, bubble sort, and insertion sort</li> <li>be able to implement the above algorithms, argue that they are correct, and analyze their running time</li> <li>be aware of the difference between comparison-based sorting algorithms and counting sort</li> <li>be aware of the situations where insertion sort performs better than selection sort and bubble sort.</li> <li>be aware of the situations where counting sort performs better than other sorting algorithms.</li> </ul>"},{"location":"notes/22-sort.html#sorting","title":"Sorting","text":"<p>Sorting is one of the most fundamental computational problems.  Given a list of items, we want to rearrange the items in some order.  We have seen in the previous unit that searching in a sorted list gives us tremendous improvement in efficiency.</p> <p>In this unit, we assume that the items we wish to rearrange are integers, and we wish to rearrange them in increasing order.  We could, however, in practice, sort any type of item.</p>"},{"location":"notes/22-sort.html#counting-sort","title":"Counting Sort","text":"<p>The first sorting algorithm we explore today is counting sort.  Suppose we are given a list of numbers between a given range, say 0 to \\(MAX\\).   Counting sort works as follows</p> <ul> <li>scan through the input list once and count how many times each number appears in the list, using an array of size \\(MAX+1\\) (called the frequency array) to keep track of the frequency of each number.  </li> <li>scan through the frequency array and put the elements back into the output.</li> </ul> <p>For example, supposed we are asked to sort a list containing only numbers 0-4: \\(\\langle 0, 4, 3, 2, 3, 1, 0, 4, 4, 1 \\rangle\\).  Scanning through this list, we count how many times each number appears in the list, and we get the following frequency array: 0 appears twice, 1 appears twice, 2 appears once, 3 appears twice, and 4 appears thrice.  So we produce a list of two 0s, two 1s, one 2, two 3s, and three 4s, \\(\\langle 0, 0, 1, 1, 2, 3, 3, 4, 4, 4\\rangle\\).</p> <p>Here is the code that implements the counting sort algorithm. <pre><code>/**\n * Perform counting sort on the input in[] and store the sorted\n * numbers in out[].\n *\n * @param[in] in The array containing numbers to be sorted.\n * @param[out] out The array containing the sorted numbers.\n * @param[in] len The size of the input and output array.\n *\n * @pre in[i] is between 0 and MAX for all i.\n * @post out[] is sorted\n */\nvoid counting_sort(size_t len, const long in[], long out[])\n{\n  size_t freq[MAX + 1] = { 0 };\n\n  for (size_t i = 0; i &lt; len; i += 1) {\n    freq[in[i]] += 1;\n  }\n\n  size_t outpos = 0;\n  for (long i = 0; i &lt;= MAX; i += 1) {\n    for (size_t j = outpos; j &lt; outpos + freq[i]; j += 1) {\n      out[j] = i;\n    }\n    outpos += freq[i];\n  }\n}\n</code></pre></p> <p>Let's consider the running time of the counting sort.  We will break it down into three steps of counting sort.</p> <p>First, initializing <code>freq</code> array to 0 takes \\(O(MAX)\\) time.</p> <p>Second, looping through <code>in</code> and counting takes \\(O(n)\\) time (where \\(n\\) is <code>len</code>).</p> <p>What about the third step: populating the output array with sorted numbers?  This step involves a double for loop.  But, you shouldn't jump to the conclusion that it takes \\(O(MAX^2)\\) or \\(O(n^2)\\).  Let's analyze this more carefully.</p> <p>We will go with a more intuitive/informal approach first.  What we do here is to store the sorted numbers into the output, there are \\(n\\) numbers, so it seems reasonable to assume that this step takes \\(O(n)\\) time.</p> <p>Let's verify more formally and systematically.  The inner loop: <pre><code>    for (size_t j = outpos; j &lt; outpos + freq[i]; j += 1) {\n      out[j] = i;\n    }\n</code></pre></p> <p>takes \\(O(f_i)\\) time, where \\(f_i\\) is the <code>freq[i]</code> the number of times \\(i\\) appears.  The outer loop loops through this for different \\(i\\), from \\(i = 0, .. MAX\\).  So the total number of times is:</p> \\[ \\sum_{i=0}^{MAX} f_i \\] <p>This corresponds to the sum of the number of times each number appears in the input, which is simply \\(n\\).  So the third step takes \\(O(n)\\) time.</p> <p>The runnning time for counting sort is thus \\(O(n + n + MAX)\\), which is just \\(O(n + MAX)\\).</p> <p>Note that since we do not know the relationship between \\(n\\) and \\(MAX\\), we cannot simplify this term to either \\(O(n)\\) or \\(O(MAX)\\).</p>"},{"location":"notes/22-sort.html#selection-sort","title":"Selection Sort","text":"<p>Another simple sorting algorithm is selection sort.  Assuming we are sorting the numbers in increasing order.  Given a list of numbers, selection sort partitions the list into two parts, an unsorted part followed by a sorted part.  It then repeatedly selects the maximum element from the unsorted part and move it to the front of the sorted part.   Here is an example.  </p> <p>Suppose the input is <code>8 4 23 42 16 15</code>.  At the beginning, the whole list is considered unsorted.   We use the <code>|</code> to indicate the boundary between the sorted and unsorted parts below.</p> <pre><code>8 4 23 42 16 15 | \n</code></pre> <p>Selection sort selects the largest element from the unsorted part, which is 42, and moves it to the beginning of the sorted part.  We get:</p> <pre><code>8 4 23 16 15 | 42\n</code></pre> <p>Now, the largest element from the unsorted part is 23.  Selection sort moves it to the beginning of the sorted part.</p> <pre><code>8 4 16 15 | 23 42\n</code></pre> <p>This continues until the unsorted part is empty.  The list is now sorted.</p> <pre><code>8 4 15 | 16 23 42\n8 4 | 15 16 23 42\n4 | 8 15 16 23 42\n| 4 8 15 16 23 42\n</code></pre> <p>Here is an implementation of selection sort.</p> <pre><code>/**\n * Find the index of the largest element among list[0..last].\n *\n * @param[in] last The last element to search.\n * @param[in] list Input list\n * @return The index of the max element among list[0..last].\n *         Breaking ties by choosing the smaller index.\n * @pre list is not NULL and list[0] .. list[last] are valid.\n */\nsize_t max(size_t last, const long list[])\n{\n  long max_so_far = list[0];\n  size_t max_index = 0;\n  for (size_t i = 1; i &lt;= last; i += 1) {\n    if (list[i] &gt; max_so_far) {\n      max_so_far = list[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n\n/**\n * Sort a list using selection sort.\n *\n * @param[in] n The size of the list to sort.\n * @param[in] list The input list\n * @pre list is not NULL and list[0]..list[n-1] are valid\n * @post The list is sorted.\n */\nvoid selection_sort(size_t n, long list[])\n{\n  for (size_t j = n - 1; j &gt;= 1; j -= 1) {\n    size_t max_pos = max(j, list);\n    swap(list, max_pos, j);\n  }\n}\n</code></pre> <p>To analyze the running time, notice that in the function <code>selection_sort</code> above, Lines 17-18 are repeated \\(O(n)\\) times.  Line 17 calls another function <code>max</code>.  Inside <code>max</code>, there is another loop that repeats \\(j - 1\\) times.  Each time we call <code>max</code>, <code>j</code> decreases, so the loop in <code>max</code> takes one fewer step each time the function is called.</p> <p>To calculate the total number of steps, we can compute the following sum \\(\\sum_{j=1}^{n-1}(j-1)\\), which is just \\(0 + 1 + 2 + .. + (n-3) + (n-2)\\) This sum is the sum of an arithmetic series and equals to \\((n-2)(n-1)/2\\).   Since we use the Big-O notation, we can focus on the term with the highest rate of growth, \\(n^2\\), and ignore everything else.  The running time for <code>selection_sort</code> function is therefore \\(O(n^2)\\).</p>"},{"location":"notes/22-sort.html#selection-vs-counting-sort","title":"Selection vs Counting Sort","text":"<p>Comparing the running of counting sort \\(O(n + MAX)\\) vs selection sort \\(O(n^2)\\), it is clear that counting sort is more efficient -- we say that counting sort is a linear time algorithm and selection sort is a quadratic time algorithm.</p> <p>What is the magic of counting sort?  Why don't we just use counting sort all the time, and why bother learning about other sorting algorithms?</p> <p>It turns out that counting sort is special because it has an assumption that the input numbers fall into a certain range.  If \\(MAX\\) is small, then counting sort is efficient.  If \\(MAX\\) is say, the maximum long values, \\(2^{63}-1\\), then counting sort is not necessarily more efficient (both in terms of time and space) in practice than selection sort.  </p> <p>Because of this assumption, counting sort does not need to compare the inputs during sorting, and thus it can achieve a linear time.</p> <p>Selection sort, on the other hand, does not assume the range of the input numbers.  It is a comparison sort since it compares the input numbers during sorting.  It is therefore more general and has a wider range of applications.</p> <p>We now look at two more comparison-based sorting algorithms.</p>"},{"location":"notes/22-sort.html#bubble-sort","title":"Bubble Sort","text":"<p>Bubble sort is probably the most well-known, under-performed sorting algorithm<sup>1</sup>, but is taught in most CS classes because of its simplicity.  The idea of bubble sort is to make multiple passes through the list.  In each pass, we look for all possible adjacent pairs of items.  Any adjacent pair that is out of order is swapped so that they are in order.  This process repeats until everything is in order.</p> <p>Let's look at an example.  Suppose we have, as an input, the numbers <code>8 4 23 42 16 15</code>.  In the first pass, we start from the first item and check from left to right.  The pair <code>8 4</code> is out of order, so we swap them, and we get <code>4 8 23 42 16 15</code>.  Pairs <code>8 23</code> and <code>23 42</code> are in order, so we do not need to swap them.  The pair <code>42 16</code> is out of order.  We swap them and get <code>4 8 23 16 42 15</code>.  The pair <code>42 15</code> is again out of order, so we swap them and get <code>4 8 23 16 15 42</code>.</p> <p>The following sequence shows the first pass through the array:</p> <pre><code> 8  4 23 42 16 15   &lt;- swap\n-- --\n 4  8 23 42 16 15  \n   -- --\n 4  8 23 42 16 15  \n      -- --\n 4  8 23 42 16 15   &lt;- swap\n         -- --\n 4  8 23 16 42 15   &lt;- swap\n            -- --\n 4  8 23 16 15 42  \n</code></pre> <p>After the first pass, notice that the largest element, 42, \"bubbles\" up through the list until it reaches the maximum position.  We can now make the second pass, but we can exclude the last item since it is already in place.</p> <pre><code> 4  8 23 16 15 42  \n-- --\n 4  8 23 16 15 42  \n   -- --\n 4  8 23 16 15 42   &lt;- swap\n      -- --\n 4  8 16 23 15 42   &lt;- swap\n         -- --\n 4  8 16 15 23 42   \n         -- --\n</code></pre> <p>After the second pass, the second-largest element, 23, is in its position.  So we can exclude this item in the subsequent pass.</p> <p>The rest of the passes operate similarly.  In the \\(i\\)-th pass, we scan through array item 0 to \\(n-i\\), swapping any adjacent element that is out of order, until \\(i = n - 1\\), in which case we only have two elements, we swap them if they are out of order, and we are done!</p> <p>The code for bubble sort can be written as follows:</p> <pre><code>void bubble_pass(size_t last, long a[]) {\n  for (size_t i = 0; i &lt; last; i += 1) {\n    if (a[i] &gt; a[i+1]) {\n      swap(a, i, i+1);\n    }\n  }\n}\n\nvoid bubble_sort(size_t n, long a[n]) {\n  for (size_t last = n - 1; last &gt; 0; last -= 1) {\n    bubble_pass(last, a);\n  }\n}\n</code></pre> <p>How many steps does it take to bubble-sort an array of \\(n\\) elements?   Since the \\(i\\)-th pass scans through \\(n-i\\) elements, and there are a \\(n\\) passes in total, the analysis is similar to the one we did for the algorithm to compute the selection sort -- bubble sort takes \\(O(n^2)\\) steps.</p>"},{"location":"notes/22-sort.html#insertion-sort","title":"Insertion Sort","text":"<p>The next sorting algorithm we are going to discuss is the insertion sort.  This is another classic algorithm, that could perform better than bubble sort in some scenarios.  Similar to selection sort, we partition the input list into two, a sorted partition, and an unsorted partition.  Then we repeatedly take the first element from the unsorted partition, find its rightful place in the sorted partition, and insert it into place.  We start with a sorted partition of one element, and we end if the sorted partition contains all the elements.</p> <p>Take <code>8 4 23 42 16 15</code> as an example.  We use <code>|</code> to partition the array into a sorted partition, and an unsorted partition.</p> <pre><code>8 | 4 23 42 16 15\n</code></pre> <p>We pick the first element on the unsorted partition, 4, and insert it into the sorted partition.  This involves shifting the elements in the sorted partition to the right until we find the rightful place for <code>4</code>.   After this step, the sorted partition grows by 1 and the unsorted partition shrinks by 1.</p> <pre><code>4 8 | 23 42 16 15\n</code></pre> <p>In the next round, we take <code>23</code>, and find its rightful place.  It turns out <code>23</code> is already in its correct place. <pre><code>4 8 23 | 42 16 15\n</code></pre></p> <p>In the next step, <code>42</code> is also in its correct place. <pre><code>4 8 23 42 | 16 15\n</code></pre></p> <p><code>16</code> is the next element, and we insert it between 8 and 23. <pre><code>4 8 16 23 42 | 15\n</code></pre></p> <p>Finally, we insert <code>15</code>, and we are done, as there is no more element in the unsorted partition. <pre><code>4 8 15 16 23 42\n</code></pre></p> <p>The code for insertion sort can be written as follows:</p> <pre><code>void insert(long a[], size_t curr)\n{\n  size_t i = curr;\n  long temp = a[curr];\n  while (i &gt;= 1 &amp;&amp; temp &lt; a[i - 1]) {\n    a[i] = a[i - 1];\n    i -= 1;\n  }\n  a[i] = temp;\n}\n\nvoid insertion_sort(size_t n, long a[]) {\n  for (size_t curr = 1; curr &lt; n; curr += 1) {\n    insert(a, curr);\n  }\n}\n</code></pre>"},{"location":"notes/22-sort.html#animation","title":"Animation","text":"<p>Animations for various sorting algorithms, including some of which you will learn in CS2040C, are available online on VisuAlgo.</p>"},{"location":"notes/22-sort.html#problem-set-22","title":"Problem Set 22","text":""},{"location":"notes/22-sort.html#problem-221","title":"Problem 22.1","text":"<p>In the implementation of bubble sort above, we always make \\(n-1\\) passes through the array.  It is, however, possible to stop the whole sorting procedure, when a pass through the array does not lead to any swapping.  Modify the code above to achieve this optimization.</p>"},{"location":"notes/22-sort.html#problem-222","title":"Problem 22.2","text":"<p>(a) Suppose the input list to insertion sort is already sorted.  What is the running time of insertion sort?</p> <p>(b) Suppose the input list to insertion sort is inversely sorted.  What is the running time of insertion sort?</p>"},{"location":"notes/22-sort.html#problem-223","title":"Problem 22.3","text":"<p>In certain scenarios, a comparison is more expensive than an assignment.  For instance, comparing two strings is more expensive than assigning a string to a variable.  In this case, we can reduce the number of comparisons during insertion sort by doing the following:</p> <p>repeat</p> <ul> <li>take the first element X from the unsorted partition</li> <li>use binary search to find the correct position to insert X</li> <li>insert X into the right place</li> </ul> <p>until the unsorted partition is empty.</p> <p>Implement the variation to the insertion sort algorithm above.  You may use your solution from Problem 21.1.</p> <ol> <li> <p>https://www.youtube.com/watch?v=k4RRi_ntQc8 \u21a9</p> </li> </ol>"},{"location":"notes/23-tower.html","title":"Unit 23: Tower of Hanoi","text":""},{"location":"notes/23-tower.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should:</p> <ul> <li>appreciate of how recursion can be used in a non-linear way that cannot be easily replaced with an iterative solution</li> <li>aware of the classic Tower of Hanoi problem </li> <li>understand the recursive solution to the Tower of Hanoi problem</li> </ul>"},{"location":"notes/23-tower.html#the-tower-of-hanoi-problem","title":"The Tower of Hanoi Problem","text":"<p>We have introduced you to the concept of recursion since the beginning of the module.  So far, however, we dealt mostly with linear recursion -- recursive solutions that can be re-formulated with loops.  We have not yet unleashed the true power of recursive thinking.  We will do so in this unit.</p> <p>In this unit and the next two units, we will see how we can use recursion to solve more complex problems.  We will start with the Tower of Hanoi problem in this unit.</p> <p>The Tower of Hanoi problem is a famous mathematical puzzle invented by French mathematician \u00c9douard Lucas in 1883.  It goes like this: There are three pegs and \\(n\\) disks of various sizes that we can slide into any of the pegs.  There are a few rules that we have to obey:</p> <ul> <li>we can only move one disk at a time;</li> <li>we can only move the topmost disk from one peg and place the disk on another peg;</li> <li>no disk can be placed on top of a smaller disk.</li> </ul> <p>In the beginning, we have all the disks in one peg.  The goal is to move all the disks onto another peg.</p> <p>Wikipedia has the following animation showing how to solve the puzzle with 4 disks in 15 steps.</p> <p></p> <p> by Andr\u00e9 Karwath aka Aka - Own work, CC BY-SA 2.5, Link </p> <p>You can play a version online here</p>"},{"location":"notes/23-tower.html#using-recursion","title":"Using Recursion","text":"<p>Recall the two steps in recursive problem-solving: (i) reduce the problem to the simplest version where we can solve it trivially; and (ii) assuming that we can solve the simpler version of the problem, we build on top of the solution to solve the more complex version.</p> <p>What is the simplest version of the Tower of Hanoi puzzle?  It is the version with only a single disk.  In this version, the solution is trivial -- we just move the disk from the source peg to the destination peg</p> <p>Let's label the pegs A, B, and C, with A being the source and C being the destination.  We will use peg B as a temporary placeholder.  </p> <p>Now, let's assume that we can solve the Tower of Hanoi puzzle for \\(k-1\\) disks.  How can we solve the puzzle for \\(k\\) disks?  It turns out the solution is equally trivial.  First, move the top \\(k-1\\) disk from A to B.  This would free up the largest disk, which we move from A to C.  Then, we move the \\(k-1\\) disk from B to C.</p> <p> </p> <p>The figures above illustrate the recursion steps.  The first figure shows the original configuration.  The second figure shows the recursive step -- by wishful thinking, we believe that we can solve the puzzle for \\(k-1\\) disks and move \\(k-1\\) disks from A to B, using C as the placeholder.  The third figure shows the move after moving the largest disk from A to C.  The last figure shows the move of \\(k-1\\) disks from B to C.  Now that A is empty, the last move uses A as the placeholder.</p>"},{"location":"notes/23-tower.html#representing-the-tower-of-hanoi-in-code","title":"Representing the Tower of Hanoi in Code","text":"<p>To write a solution to the Tower of Hanoi, we need to decide how to represent the disks and the pegs in our code.  We are going to abstract out only the necessary details.  Such an abstraction process is similar to what we have done so far, representing elevations data as integers, student ids as integers, etc.  Here, we are representing physical objects, but note that the actual size of the disks, the location of the pegs, etc, do not matter in our code.  As such, we will represent the disks with integers 1 to \\(k\\) (1 being smallest, \\(k\\) being the largest) and pegs with characters 'A', 'B', and 'C'.</p>"},{"location":"notes/23-tower.html#the-solution","title":"The Solution","text":"<p>Let's write the code for a function <code>void solve_tower_of_hanoi(long k, long source, long dest, long placeholder)</code>, which will print out the solution for moving \\(k\\) disks from the peg <code>source</code> to the peg <code>dest</code>.</p> <pre><code>void solve_tower_of_hanoi(long k, char source, char dest, char placeholder) {\n  if (k == 1) {\n    print(k, source, dest);\n  }\n  else {\n    solve_tower_of_hanoi(k - 1, source, placeholder, dest);\n    print(k, source, dest);\n    solve_tower_of_hanoi(k - 1, placeholder, dest, source);\n  }\n}\n</code></pre> <p>where <code>print</code> is a helper function to display the move to standard output. <pre><code>void print(long k, char source, char dest) {\n  cs1010_print_string(\"Disk \");\n  cs1010_print_long(k);\n  cs1010_print_string(\": Peg \");\n  putchar(source);\n  cs1010_print_string(\" -&gt; Peg \");\n  putchar(dest);\n  cs1010_println_string(\"\");\n}\n</code></pre></p>"},{"location":"notes/23-tower.html#running-time","title":"Running Time","text":"<p>How many moves does it take to solve the Tower of Hanoi puzzle with \\(k\\) disks?</p> <p>If \\(k\\) is 1, then it takes one move.  Otherwise, let us denote the number of moves taken as \\(T(k)\\).  From the code, we can see that it takes \\(T(k) = 2T(k-1) + 1\\).</p> <p>You can see that:</p> \\[T(k) = 2T(k-1) + 1 = 4T(k-2) + 2 + 1 = 8T(k-3) + 4 + 2 + 1 = ...\\] <p>So,</p> \\[T(k) = 2^{k-1}T(1) + 2^{k-2} + ... + 4 + 2 + 1\\] <p>Since \\(T(1) = 1\\), we have</p> \\[T(k) = 2^{k-1} + 2^{k-2} + ... + 4 + 2 + 1 = 2^k - 1\\] <p>Thus, solving the Tower of Hanoi with \\(k\\) disks takes \\(2^k-1\\) steps.</p>"},{"location":"notes/23-tower.html#solving-tower-of-hanoi-iteratively","title":"Solving Tower of Hanoi Iteratively","text":"<p>Every recursive algorithm can be expressed as an iterative one.  Thus, an algorithm to solve the Tower of Hanoi iteratively exists.  It is, however, non-trivial and not as easily understood.  Such a solution usually involves a data structure called stack (you will learn this in CS2040C).  The stack simply imitates the recursive call stack of our recursive solution.</p> <p>You can put some thought into how to solve the Tower of Hanoi using only loops to convince yourself that the recursive solution is much neater.</p>"},{"location":"notes/23-tower.html#problem-set-23","title":"Problem Set 23","text":""},{"location":"notes/23-tower.html#problem-231","title":"Problem 23.1","text":"<p>Suppose that we add a new restriction to the Tower of Hanoi puzzle.  Let's say that the disks are on Peg A, to begin with, and we want to move the disk to Peg C.  We are only allowed to move a disk either to Peg B from another peg or from Peg B to another peg.  In other words, we cannot move the disks between Peg A and Peg C directly.</p> <p>Change the recursive algorithm above to solve the Tower of Hanoi with this new restriction.  How many steps (use big O notation) are needed now?</p>"},{"location":"notes/23-tower.html#appendix-complete-code","title":"Appendix: Complete Code","text":"<pre><code>#include \"cs1010.h\"\n\n/**\n * Move Disk k from Peg source to Peg dest.\n *\n * @param[in] k The disk to move\n * @param[in] source The peg Disk k is currently at.\n * @param[in] dest The peg Disk k is moved to.\n */\nvoid move(long k, char source, char dest) {\n  cs1010_print_string(\"Disk \");\n  cs1010_print_long(k);\n  cs1010_print_string(\": Peg \");\n  putchar(source);\n  cs1010_print_string(\" -&gt; Peg \");\n  putchar(dest);\n  cs1010_println_string(\"\");\n}\n\nvoid solve(long k, char source, char dest, char placeholder) {\n  if (k == 1) {\n    move(k, source, dest);\n    return;\n  }\n\n  solve(k - 1, source, placeholder, dest);\n  move(k, source, dest);\n  solve(k - 1, placeholder, dest, source);\n}\n\nint main() {\n  long k = cs1010_read_long();\n  solve(k, 'A', 'C', 'B');\n}\n</code></pre>"},{"location":"notes/24-permutation.html","title":"Unit 24: Permutations","text":""},{"location":"notes/24-permutation.html#learning-objectives","title":"Learning Objectives","text":"<p>After taking this unit, students should</p> <ul> <li>be familiar with using recursion to generate all possible permutations of a given array</li> </ul>"},{"location":"notes/24-permutation.html#generating-permutations","title":"Generating Permutations","text":"<p>We have been using recursions to either compute or search for a solution to a problem.  In this unit, let's look at another useful application of recursion: to generate all possible permutations or combinations of items.</p> <p>Let's see a simple example of this: generate all permutations of the characters in a string of length \\(n\\).  Let's say we want to permute the string <code>abcd</code> (\\(n = 4\\)).  We get the following 24 permutations.</p> <pre><code>abcd bacd cbad dbca\nabdc badc cbda dbac\nacbd bcad cabd dcba\nacdb bcda cadb dcab\nadcb bdca cdab dacb\nadbc bdac cdba dabc\n</code></pre> <p>For simplicity, we assume that there is no repetition in the string.  We leave the problem where there is repetition as an exercise in Problem 24.1.</p>"},{"location":"notes/24-permutation.html#recursive-formulation","title":"Recursive Formulation","text":"<p>The recursive formulation of this problem is based on the following observation.  If we consider a subset of all permutations that start with the same prefix of length \\(k\\), then their suffixes are permutations of length \\(n-k\\).</p> <p>Let's say we consider the prefix <code>a</code> in the example above.  The permuted strings that start with <code>a</code> are:</p> <pre><code>abcd\nabdc\nabcd\nacdb\nadcb\nadbc\n</code></pre> <p>Excluding <code>a</code>, the strings have suffixes:</p> <pre><code>bcd\nbdc\nbcd\ncdb\ndcb\ndbc\n</code></pre> <p>which are the six possible permutations of the string <code>bcd</code>.</p> <p>Let's consider the prefix <code>bc</code> in the example above.  The permuted strings that start with <code>bc</code> are:</p> <pre><code>bcad\nbcda\n</code></pre> <p>Excluding <code>bc</code>, the strings have suffixes:</p> <pre><code>ad\nda\n</code></pre> <p>which are the two possible permutations of the string <code>ad</code>.</p> <p>This observation gives rise to a simple recursive solution:  To generate all possible permutations of a string of length \\(n\\): \\(a_0a_1..a_{n-1}\\), we loop through every character \\(a_i\\) in the string and generate permutations with \\(a_i\\) as the leading character.  To generate permutations with \\(a_i\\) as the leading character, we simply recursively generate all possible permutations of a string of length \\(n-1\\): \\(a_0..a_{i-1}a_{i+1}..a_{n-1}\\).</p> <p>The trivial case is when we generate the permutation of a string with one character.  There is only one possible permutation.</p> <p>For example, consider a string length 3, <code>abc</code>.</p> <ul> <li>We start with <code>a</code> as the leading character and generate all the permutations of the string <code>bc</code>.  We get two permutations <code>abc</code> and <code>acb</code>.  </li> <li>The next character in the input string is <code>b</code>.  We now make <code>b</code> the leading character and generate all permutations of the string <code>ac</code>.  We get <code>bac</code> and <code>bca</code>.  </li> <li>The last character in the input string is <code>c</code>.  We similarly generate the permutations <code>cab</code> and <code>cba</code> by considering <code>c</code> as the leading character and permuting <code>ba</code>.</li> </ul> <p>Now, let's consider a longer example, say a string of length 5, <code>abcde</code>.</p> <ul> <li>Just like above, we start with <code>a</code> as the first character and permute <code>bcde</code>.</li> <li>As we recursively permute <code>bcde</code>, <code>a</code> remains part of the prefix.</li> <li>To recursively permute <code>bcde</code>, we first fix <code>b</code> as the leading character (but <code>b</code> is the second character in <code>abcde</code>) and permute <code>cde</code>.  The prefix is <code>ab</code>.</li> <li>The next step in permuting <code>bcde</code> is to consider <code>c</code> as the leading character.  The prefix is now <code>ac</code>, and we permute the rest of the string <code>bde</code>.</li> </ul> <p>As we go deeper into the recursion, the prefix grows longer.  When we reach the depth of \\(n-1\\), there is only one character to permute.  We have completed generating one possible permutation of the string.  We can print out the permutation at this point and continue with the rest of the permutation.</p> <p>The figure below illustrates the process</p> <p></p>"},{"location":"notes/24-permutation.html#the-code","title":"The Code","text":"<p>The idea above is implemented as the following.  The function <code>permute</code> takes in the array <code>a</code> to permute, the length <code>len</code> of the array, and the location <code>curr</code>, where the substring <code>a[curr]</code> to <code>a[len - 1]</code> is what this function will permute.  The function will print out all permutations of <code>a</code> where <code>a[0]</code> to <code>a[curr - 1]</code> are fixed as the prefix and <code>a[curr]</code> to <code>a[len - 1]</code> are permuted.</p> <pre><code>/**\n * Fix a[0]..a[curr - 1] but permute characters a[curr]..a[len - 1]\n * Print out each permutation.\n *\n * @param[in,out] a    The array to permute\n * @param[in]     len  The size of the array\n * @param[in]     curr The starting index at which we will permute\n *\n * @post The string a remains unchanged\n */\nvoid permute(char a[], size_t len, size_t curr) {\n  if (curr == len - 1) {\n    cs1010_println_string(a);\n    return;\n  }\n\n  for (size_t i = curr; i &lt; len; i += 1) {\n    swap(a, curr, i);\n    permute(a, len, curr + 1);\n    swap(a, i, curr);\n  }\n}\n</code></pre> <p>Lines 12-14 above correspond to the base case, where we have reached the end of the string, and there is only one character left to permute.  Since there is only one possible permutation, we only need to print out the permuted string.</p> <p>Line 19 permutes the remaining string, <code>a[curr + 1]</code> to <code>a[len - 1]</code>, with character <code>a[curr]</code> intact.  Lines 17-21 is a <code>for</code> loop that loops through all characters <code>a[curr + 1]</code> to <code>a[len - 1]</code>, and swaps each one to the position of <code>a[curr]</code>, and recursively permutes the string <code>a[curr + 1]</code>..<code>a[len - 1]</code>.  When we are done, we swap back the original <code>a[curr]</code>, this is to ensure that the string remains unchanged after <code>permute</code> is called.</p>"},{"location":"notes/24-permutation.html#running-time","title":"Running Time","text":"<p>How efficient is the function <code>permute</code>?</p> <p>Let the running time of <code>permute</code> when given a string of length \\(n\\) be \\(T(n)\\).  Each invocation of <code>permute</code> loops through \\(n\\) characters, and for each character, calls <code>permute</code> recursively on a string of length \\(n-1\\).  </p> <p>So, we have:</p> \\[ \\begin{align*} T(n) &amp;= nT(n-1) + n\\\\      &amp;= n((n-1)T(n-2) + (n-1)) + n\\\\        &amp;= n(n-1)T(n-2) + n(n-1) + n\\\\        &amp;= n(n-1)((n-2)T(n-3) + n-2) + n(n-1) + n\\\\        &amp;= n(n-1)(n-2)T(n-3) + n(n-1)(n-2) + n(n-1) + n\\\\        &amp;= \\frac{n!}{(n-3)!}T(n-3) + \\frac{n!}{(n-3)!} + \\frac{n!}{(n-2)!} + \\frac{n!}{(n-1)!}\\\\        &amp;= ..\\\\        &amp;= \\frac{n!}{(n-k)!}T(n-k) + \\sum_{i=1}^{k}\\frac{n!}{(n-i)!} \\end{align*} \\] <p>When we reach the base case, we have \\(T(1) = n\\) since we need to print out the string of length \\(n\\).  This happens when \\(k = n - 1\\).  Therefore,</p> \\[\\begin{align*} T(n) &amp;= \\frac{n!}{1!}T(1) + \\sum_{i=1}^{n-1}\\frac{n!}{(n-i)!}\\\\      &amp;= n \\cdot n! + \\sum_{i=1}^{n-1}\\frac{n!}{(n-i)!}\\\\      &amp;&lt; n \\cdot n! + \\sum_{i=1}^{n-1}n!\\\\      &amp;= n \\cdot n! + (n - 1) \\cdot n!\\\\ \\end{align*}\\] <p>The running time for <code>permute</code> is, therefore, \\(O(n \\cdot n!)\\).</p>"},{"location":"notes/24-permutation.html#problem-set","title":"Problem Set","text":""},{"location":"notes/24-permutation.html#problem-set-241","title":"Problem Set 24.1","text":"<p>In the code above, we assume that the string contains distinct characters.  If there are duplicate characters in the string, duplicate permutations will be generated.  For instance, if the input is <code>aaa</code>, the code above would print <code>aaa</code> six times.</p> <p>We can fix this by making a small change to the function <code>permute</code> above so that it does not generate duplicate permutations.  This can be done by adding a condition (Line A).  Write a boolean function that we can call in Line A to check if we should continue to permute the rest of the string, and therefore avoid generating duplicate permutations when the input string contains duplicate characters.</p> <pre><code>void permute(char a[], size_t len, size_t curr) {\n  if (curr == len-1) {\n    cs1010_println_string(a);\n    return;\n  }\n\n  permute(a, len, curr + 1);\n  for (size_t i = curr + 1; i &lt; len; i += 1) {\n    if (...) { // Line A\n      swap(a, curr, i);\n      permute(a, len, curr + 1);\n      swap(a, i, curr);\n    }\n  }\n}\n</code></pre>"},{"location":"notes/24-permutation.html#appendix-complete-code","title":"Appendix: Complete Code","text":"<pre><code>#include \"cs1010.h\"\n#include &lt;string.h&gt;\n\nvoid swap(char a[], size_t i, size_t j) {\n  char temp = a[i];\n  a[i] = a[j];\n  a[j] = temp;\n}\n\n/**\n * Fix a[0]..a[k - 1] but permute characters a[k]..a[len - 1]\n * Print out each permutation.\n *\n * @param[in,out] a The array to permute\n * @param[in]     n The size of the array\n * @param[in]     k The starting index at which we will permute\n *\n * @post The string a remains unchanged\n */\nvoid permute(char a[], size_t n, size_t k) {\n  if (k == n-1) {\n    cs1010_println_string(a);\n    return;\n  }\n  for (size_t i = k; i &lt; n; i+= 1) {\n    swap(a, k, i);\n    permute(a, n, k+1);\n    swap(a, i, k);\n  }\n}\n\nint main() {\n  char *str = cs1010_read_word();\n  permute(str, strlen(str), 0);\n  free(str);\n}\n</code></pre>"},{"location":"notes/25-queens.html","title":"Unit 25: N Queens","text":""},{"location":"notes/25-queens.html#learning-objectives","title":"Learning Objectives","text":"<p>After taking this unit, students should</p> <ul> <li>be familiar with using recursion to search and prune the solution space to a problem</li> <li>be familiar with the class N queens problem and its solution</li> </ul>"},{"location":"notes/25-queens.html#searching-and-backtracking","title":"Searching and Backtracking","text":"<p>We now look at how recursion can help with solving problems that require searching and backtracking.  A classical example for this is the \\(n\\)-queens problem, which can be stated as given a \\(n \\times n\\) chessboard, find a possible placement of \\(n\\) queens on the chessboard, such that the queens do not threaten each other.    In other words, there is exactly one queen in each row, in each column, and each diagonal.  The 8-queens puzzle was first published by Max Bezzel in 1848, with the first solution published Franz Nauck in 1850.  The generalized \\(n\\)-queens problems were introduced later.  It is known that there is no solution for \\(n = 2\\) and \\(n = 3\\), but a solution exists for \\(n &gt; 3\\).</p> <p>If we visualize the chessboard as a 2D array, with <code>#</code> as the position of a queen, and <code>.</code> as an empty position on the board, then a solution to the 4-queens problem looks like this:</p> <pre><code>.#..\n...#\n#...\n..#.\n</code></pre>"},{"location":"notes/25-queens.html#recursive-formulation","title":"Recursive Formulation","text":"<p>Let's see how we can formulate the problem recursively.  The first step is to simplify the problem to the most trivial case where we can solve it.  It is tempting to say that a simpler version of the problem is an \\(n-1\\)-queens problem, and so the most trivial case is 1-queen.  While the solution to 1-queen is trivial, there is no solution to both 2-queen and 3-queen problems.  Further, if we have found a solution to the \\(n-1\\)-queens problem, extending it to a solution of the \\(n\\)-queens problem is not trivial.</p>"},{"location":"notes/25-queens.html#generate-all-permutations","title":"Generate All Permutations","text":"<p>As a start, let's borrow the idea from Unit 24 and generate all permutations of the queens' positions.  Let's label the columns <code>a</code>, <code>b</code>, <code>c</code>, .. etc.  Since we know that there must be exactly one queen in each row, and one queen in each column, the positions of the queens can be represented as a string that is a permutation of <code>abcde..</code>.  For instance, the solution of the 4-queen problem depicted above can be represented by <code>bdac</code>. <pre><code>abcd\n.#.. =&gt; b\n...# =&gt; d\n#... =&gt; a\n..#. =&gt; c\n</code></pre></p> <p>A simple algorithm is thus to generate all possible \\(n!\\) permutations, and for each one, check if it is a valid placement.  We already ensure that there is exactly one queen per row and one queen per column.  It remains to check that the queens do not threaten each other diagonally.</p> <p>Let's write a function that checks, given a string representation of the queen positions, whether there is any queen that threatens another or not:</p> <pre><code>/**\n * Checks if the queen on curr_row clashes with any queens from \n * curr_row+1 to last_row, inclusive.\n *\n * @param[in] queens   The string representation of the queens.\n * @param[in] curr_row The row where the queen to check for clashes \n *                     is on.\n * @param[in] last_row  The last row until which we check for \n *                     clashes.\n *\n * @pre    0 &lt;= curr_row &lt;= last_row\n * @return true if there is a queen that clahes with queen[curr_row] \n *         diagonally, false otherwise.\n */\nbool has_a_queen_in_diagonal(const char queens[], size_t curr_row, \n                             size_t last_row) {\n  char curr_col = queens[curr_row];\n  char left_col = curr_col - 1;\n  char right_col = curr_col + 1;\n  for (size_t row = curr_row+1; row &lt;= last_row; row += 1) {\n    if (queens[row] == left_col || queens[row] == right_col) {\n      return true;\n    }\n    left_col -= 1;\n    right_col += 1;\n  }\n  return false;\n}\n\n/**\n * Checks if any queen from row 0 to last_row (inclusive) \n * that clashes with each other, diagonally.\n *\n * @param[in] queens   The array containing the representation \n *                     of the queens.\n * @param[in] last_row  The last row until which we check for \n *                     clashes.\n *\n * @pre    0 &lt;= last_row &lt;= n-1\n * @return true if there are two queens that clash with each other.\n */\nbool threaten_each_other_diagonally(char queens[], size_t last_row) {\n  for (size_t begin_row = 0; begin_row &lt;= last_row; begin_row += 1) {\n    if (has_a_queen_in_diagonal(queens, begin_row, last_row)) {\n      return true;\n    }\n  }\n  return false;\n}\n</code></pre> <p>Solving the \\(n\\) queens problem is then easy.  We simply generate all permutations, which correspond to all possible placement of the queens.  For each generated permutation, we check if it is a valid placement, i.e., if two queens threaten each other.</p> <p></p> <p>The code below prints out all possible solutions to the \\(n\\) queens problem.  </p> N-Queens Solution: Version 1<pre><code>/**\n * Search for all possible queens placement from row to n-1, \n * given the queens placement from row 0 to row-1.\n *\n * @param[in] queens  The string representation of queens \n *                    placement.\n * @param[in] n       The size of the chess board\n * @param[in] row     The last row where the queens positions \n *                    have been fixed.\n */\nvoid nqueens(char queens[], size_t n, size_t row) {\n  if (row == n - 1) {\n    if (!threaten_each_other_diagonally(queens, row)) {\n      cs1010_println_string(queens);\n    }\n    return;\n  }\n\n  for (size_t i = row; i &lt; n; i++) {\n    swap(queens, row, i);\n    nqueens(queens, n, row + 1);\n    swap(queens, row, i);\n  }\n}\n</code></pre> <p>Line 13 above is the key difference between this and <code>permute</code> from the previous unit.  We added an extra condition to check if the placement of queens is legit and only print out the answer if it is. </p>"},{"location":"notes/25-queens.html#stopping-at-the-first-solution","title":"Stopping at the First Solution","text":"<p>We can easily change the code above so that it stops upon finding the first solution.  </p> N-Queens Solution: Version 2<pre><code>/**\n * Search for a valid queen placement from row to n-1, \n * given the queens placement from row 0 to row-1.\n *\n * @param[in] queens  The string representation of queens \n *                    placement.\n * @param[in] n       The size of the chess board\n * @param[in] row     The last row where the queens positions \n *                    have been fixed.\n * @return true if valid placement is found, false otherwise.\n */\nbool nqueens(char queens[], size_t n, size_t row) {\n  if (row == n - 1) {\n    if (!threaten_each_other_diagonally(queens, row)) {\n      cs1010_println_string(queens);\n      return true;\n    }\n    return false;\n  }\n\n  for (size_t i = row; i &lt; n; i++) {\n    swap(queens, row, i);\n    if (nqueens(queens, n, row + 1)) {\n      return true;\n    }\n    swap(queens, row, i);\n  }\n  return false;\n}\n</code></pre> <p>We modify the function so that it returns <code>true</code> upon discovering a valid placement (Line 16) and <code>false</code> otherwise (Line 18).  On Line 23-24, we only continue our loop if the current search does not return <code>true</code>.  Otherwise, a valid placement is found, and we return from <code>nqueens</code> at Line 24.  If we reach Line 28, then this means that our search is fruitless, and we return <code>false</code>.</p>"},{"location":"notes/25-queens.html#backtracking","title":"Backtracking","text":"<p>The search process above mirrors the process in which we generate all possible permutations.  We first fix the placement of the queens on the top rows.  Essentially, we attempt to see if this placement can lead to a valid placement of queens on all rows.  If we are successful (<code>nqueens</code> return <code>true</code>), then we are done.  Otherwise, the current placement that we attempted is a mistake -- we thus backtrack on our decision and try a different placement.</p> <p>For example, in the figure above, we first try placing the first queen on the first column (i.e., all permutations that start with <code>a</code>).  Recursively searching for all possible placements that start with <code>a</code> fails to yield a valid 4-queen solution.   We backtrack on this decision and try to place the first queen on the second column <code>b</code> (which eventually leads to a valid placement <code>bdac</code>).</p> <p>Backtracking can be done simply using recursion -- the recursive call stack remembers our past decisions for us, and returning from recursive calls serves as backtracking, without us explicitly doing so.  </p> <p>For instance, Line 22 attempts a possible placement of queen on Row <code>row</code>, and if it fails to yield a solution on Line 23, the code backtracks and attempt another possible placement in the next loop.</p>"},{"location":"notes/25-queens.html#making-it-faster-pruning-impossible-solutions","title":"Making It Faster: Pruning Impossible Solutions","text":"<p>One of the principles of writing efficient code is to avoid doing useless work.  The code above, which tests all permutations, actually generates much useless work.  Suppose the queens in the first two rows already threaten each other, then, there is no need to continue to generate all possible placements of queens for the remaining rows.</p> <p>For example, in the figure below, there is no need to generate any permutation with the prefix <code>ab</code>.  Placing two queens in these two positions lead to invalid solutions, regardless of where the rest of the queens are.</p> <p></p> <p>We can thus avoid searching through possibilities that we know are not useful.  This concept is called pruning and is a key to speeding up many searching-based solutions.  We want to prune away bad solutions as early as possible.  This can be achieved easily, by checking if the queens already placed on the first \\(k\\) rows threaten each other.</p> <p>The code below extends Version 2 of N-Queens solution by adding a condition to prune impossible solutions on Line 22.</p> N-Queens Solution: Version 3<pre><code>/**\n * Search for all possible queens placement from row to n-1, \n * given the queens placement from row 0 to row-1.\n *\n * @param[in] queens  The string representation of queens \n *                    placement.\n * @param[in] n       The size of the chess board\n * @param[in] row     The last row where the queens positions \n *                    have been fixed.\n */\nbool nqueens(char queens[], long n, long row) {\n  if (row == n - 1) {\n    if (!threaten_each_other_diagonally(queens, n - 1)) {\n      cs1010_println_string(queens);\n      return true;\n    }\n    return false;\n  }\n\n  for (long i = row; i &lt; n; i++) {\n    swap(queens, row, i);\n    if (!threaten_each_other_diagonally(queens, row)) {\n      if (nqueens(queens, n, row + 1)) {\n        return true;\n      }\n    }\n    swap(queens, row, i);\n  }\n  return false;\n}\n</code></pre> <p>Adding this condition can speed up the code significantly.</p> <p>Such an algorithm is also known as a branch-and-bound algorithm, where we attempt different possible solutions and prune away partial solutions that we know will never work.  This is an important concept in artificial intelligence (AI).  In fact, the n-queen problem is a typical example used in introductory AI courses for branch-and-bound search.  Again, such solutions are more naturally expressed recursively.</p>"},{"location":"notes/25-queens.html#problem-set-25","title":"Problem Set 25","text":""},{"location":"notes/25-queens.html#problem-251","title":"Problem 25.1","text":"<p>In the code with pruning above, we check if the queens placed on Rows 0 to <code>row</code> threaten each other, and call <code>nqueens</code> recursively only if these queens do not threaten each other.  Identify the repetitive work being done in the calls <code>threaten_each_other_diagonally</code>, and suggest a way to remove the repetitive work.</p>"},{"location":"notes/25-queens.html#problem-252","title":"Problem 25.2","text":"<p>Consider the code to generate all possible permutations of a string from Problem 24.1.  Suppose that we restrict the permutations to those where the same character does not appear next to each other.  Modify the solution to Problem 24.1 to prune away permutations where the same character appears more than once consecutively.</p>"},{"location":"notes/25-queens.html#appendix-complete-code","title":"Appendix: Complete Code","text":"<pre><code>#include \"cs1010.h\"\n#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n\n/**\n * Draw the chessboard on screen.\n *\n * @param[in] queens The string representation of the queens\n * @param[in] n      The size of the chessboard\n */\nvoid draw(char queens[], size_t n) {\n  cs1010_clear_screen();\n  for (size_t i = 0; i &lt; n; i += 1) {\n    for (char col = 'a'; col &lt; 'a' + (char)n; col += 1) {\n      if (queens[i] == col) {\n        putchar('#');\n      } else {\n        putchar('.');\n      }\n    }\n    putchar('\\n');\n  }\n  usleep(10000);\n}\n\nvoid swap(char a[], size_t i, size_t j) {\n  char temp = a[i];\n  a[i] = a[j];\n  a[j] = temp;\n}\n\n/**\n * Checks if the queen on curr_row clashes with any queens\n * from curr_row+1 to last_row, inclusive.\n *\n * @param[in] queens   The string representation of the queens.\n * @param[in] curr_row The row where the queen to check for\n *                     clashes is on.\n * @param[in] last_row The last row until which we check for\n *                     clashes.\n *\n * @pre    0 &lt;= curr_row &lt;= last_row\n * @return true if there is a queen that clahes with queen[curr_row]\n *         diagonally false otherwise.\n */\nbool has_a_queen_in_diagonal(const char queens[], size_t curr_row,\n                             size_t last_row) {\n  char curr_col = queens[curr_row];\n  char left_col = curr_col - 1;\n  char right_col = curr_col + 1;\n  for (size_t row = curr_row+1; row &lt;= last_row; row += 1) {\n    if (queens[row] == left_col || queens[row] == right_col) {\n      return true;\n    }\n    left_col -= 1;\n    right_col += 1;\n  }\n  return false;\n}\n\n/**\n * Checks if any queen from row 0 to last_row (inclusive) that\n * clashes with each other, diagonally.\n *\n * @param[in] queens   The array containing the representation\n *                     of the queens.\n * @param[in] last_row The last row until which we check for clashes.\n *\n * @pre    0 &lt;= last_row &lt;= n-1\n * @return true if there are two queens that clash with each other.\n */\nbool threaten_each_other_diagonally(char queens[], size_t last_row) {\n  for (size_t curr_row = 0; curr_row &lt;= last_row; curr_row += 1) {\n    if (has_a_queen_in_diagonal(queens, curr_row, last_row)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Fix a[0]..a[k - 1] but permute queens a[k]..a[len - 1]\n * Print out each permutation if valid.\n *\n * @param[in,out] a The array to permute\n * @param[in]     n The size of the array\n * @param[in]     k The starting index at which we will permute\n *\n * @post The string a remains unchanged\n */\nbool nqueens(char a[], size_t n, size_t k) {\n  if (k == n-1) {\n    draw(a, n);\n    if (!threaten_each_other_diagonally(a, n - 1)) {\n      cs1010_println_string(a);\n      return true;\n    }\n    return false;\n  }\n  for (size_t i = k; i &lt; n; i+= 1) {\n    swap(a, k, i);\n    if (!threaten_each_other_diagonally(a, k)) {\n      if (nqueens(a, n, k+1)) {\n        return true;\n      }\n    }\n    swap(a, i, k);\n  }\n  return false;\n}\n\nint main() {\n  size_t n = cs1010_read_size_t();\n  char *queens = malloc((n + 1) * sizeof(char));\n  queens[0] = 'a';\n  for (size_t i = 1; i &lt; n; i += 1) {\n    queens[i] = queens[i-1] + 1;\n  }\n  queens[n] = '\\0';\n  nqueens(queens, n, 0);\n  free(queens);\n}\n</code></pre>"},{"location":"notes/26-struct.html","title":"Unit 26: Structures","text":""},{"location":"notes/26-struct.html#learning-objectives","title":"Learning Objectives","text":"<p>After this unit, students should </p> <ul> <li>be aware of <code>struct</code> as a compound data type in C</li> <li>know how to (i) declare a struct, (ii) assign values to the member of a struct, (iii) pass a struct into a function as value and as reference, (iv) return a struct from a function</li> <li>aware of <code>.</code> and <code>-&gt;</code> notations for accessing members of a struct</li> <li>know how to use <code>typedef</code> to define a new type</li> </ul>"},{"location":"notes/26-struct.html#compound-data-type","title":"Compound Data Type","text":"<p>We have so far been working with numbers, characters, and strings.  Not all real-world objects can be easily abstracted and represented with numbers and characters.  It is useful to create our compound data type that represents real-world objects.  Each object typically has one or more attributes, which can be of different types: A module has a code, a title, and the number of MCs; A person has a name, height, weight, and age; A phone has a model, price, and brand.</p> <p>If you look back at the code that we have written, often multiple variables are related to each other and \"belong together.\"  When we pass one as an argument into a function, often we need to pass another.  It is useful to group them into a compound data type as well.  For instance: A 1D array and its length; A 2D array, its width, and its height; A pixel, its row, its column, and its color.</p>"},{"location":"notes/26-struct.html#structure-in-c","title":"Structure in C","text":"<p>In C, we can define a compound data type using a structure, through the C keyword <code>struct</code>.  The syntax looks like this:</p> <pre><code>struct matrix {\n  double** array;\n  long num_of_rows;\n  long num_of_columns;\n};\n</code></pre> <p>In the definition above, the structure is given a name, <code>matrix</code>.  The structure contains three members.  The first is a pointer to a 2D array, the other two are the number of rows and number of columns of that array.</p> <p>Note that we need a semicolon <code>;</code> after the definition of a <code>struct</code>.</p> <p>Here are a few more examples:</p> <pre><code>struct circle {\n  double x_of_center;\n  double y_of_center;\n  double radius;\n};\n</code></pre> <pre><code>struct module {\n  char *code;\n  char *title;\n  long mc;\n};\n</code></pre> <p>Just like a variable, a <code>struct</code> has a scope, and it follows the same rule as the scope of a variable (i.e., it is valid within the block it is declared in).  Unlike declaration of a variable, it is common to declare a <code>struct</code> in the global scope, i.e., outside of any function, so that it is usable within the whole program.</p>"},{"location":"notes/26-struct.html#declaring-and-initializing-a-structure-variable","title":"Declaring and Initializing a Structure Variable","text":"<p>Let's see an example of how we can declare and initialize a structure variable:</p> <pre><code>struct module cs1010;\ncs1010.code = \"CS1010\";\ncs1010.title = \"Programming Methodology\";\ncs1010.mc = 4;\n</code></pre> <p>Line 1 above declares a variable called <code>cs1010</code>.  Lines 2-4 initialize each member of the structure.  Note that we use <code>.</code> to access each member.</p> <p>An alternative is to use a compound literal:</p> <pre><code>struct module cs1010 = {\n  .code = \"CS1010\",\n  .title = \"Programming Methodology\",\n  .mc = 4\n};\n</code></pre> <p>Using compound literal is convenient in certain cases, as uninitialized members are set to 0 (similar to initializers of arrays).</p> <p>You can read and write to individual members of a structure variable just like any other variable.</p> <pre><code>cs1010.mc = hours_spent_per_week/2.5;\ncs1010_println_long(cs1010.mc);\n</code></pre>"},{"location":"notes/26-struct.html#assigning-a-structure-variable","title":"Assigning a Structure Variable","text":"<p>We can assign one structure variable to another.</p> <pre><code>struct module cs1010s = cs1010;\n</code></pre> <p>This assignment statement above is equivalent to assigning each member of the <code>struct</code> individually.</p>"},{"location":"notes/26-struct.html#structure-as-parameters","title":"Structure as Parameters","text":"<p>We can pass a structure variable into a function just like a non-array variable.  Unlike an array, a <code>struct</code> is called by value, i.e., it is copied onto the call stack of the function.</p> <p>Hence, the code below does not actually update the MCs of CS1010:</p> <pre><code>void update_mc(struct module cs1010, long hours_spent_per_week) {\n  cs1010.mc = hours_spent_per_week/2.5;\n}\n</code></pre> <p>To call a structure by reference, we can pass in its pointer.</p> <pre><code>void update_mc(struct module *cs1010, long hours_spent_per_week) {\n  (*cs1010).mc = hours_spent_per_week/2.5;\n}\n</code></pre> <p>The latter example is more common idiom.  Since a structure can contain multiple fields and usually occupies more bytes than a pointer, it is less efficient to copy a structure onto the call stack compared to copying its pointer.  </p> <p>Since this is common, C provides another syntax for accessing the member of a structure through its pointer, using the \"arrow\" notation\"</p> <pre><code>void update_mc(struct module *cs1010, long hours_spent_per_week) {\n  cs1010-&gt;mc = hours_spent_per_week/2.5;\n}\n</code></pre>"},{"location":"notes/26-struct.html#returning-a-structure","title":"Returning a Structure","text":"<p>A function can return a structure.  Remember in Unit 16 we said that C functions can return only one value and one way to get around this limitation is to use call by reference and the other is to use <code>struct</code>?  Here is how we use <code>struct</code> to return more than one values:</p> <pre><code>struct answer {\n  long max_n;\n  long max_num_steps;\n};\n</code></pre> <pre><code>struct answer find_max_steps(long n) {\n  struct answer ans = {\n    .max_n = 1,\n    .max_num_steps = 0\n  };\n  for (long i = 1; i &lt;= n; i += 1) {\n    long num_of_steps = count_num_of_steps(i);\n    if (num_of_steps &gt;= ans.max_num_steps) {\n      ans.max_n = i;\n      ans.max_num_steps = num_of_steps;\n    }\n  }\n  return ans;\n}\n</code></pre> <p>When a function returns a <code>struct</code>, the structure gets copied back to the caller.</p>"},{"location":"notes/26-struct.html#defining-a-structure-as-a-type","title":"Defining a Structure as a Type","text":"<p>To avoid writing the keyword <code>struct</code> every time we declare a variable or parameter, let's introduce another keyword in C: <code>typedef</code>.</p> <p>C allows programmers to define their type based on the existing types.  Suppose that I want a type that represents a person in my contract tracing app, and I represent each person with an positive integer id.  I can define:</p> <pre><code>typedef unsigned long person_t;\n</code></pre> <p>Recall that we use the suffix <code>_t</code> convention to denote user-defined type.  You have probably seen these two types elsewhere <code>size_t</code> and <code>time_t</code> in the past.</p> <p>Now that we have defined <code>person_t</code> as a new type that is equivalent to <code>unsigned long</code>, we can use it just like another type:</p> <pre><code>void is_contact(person_t i, person_t j);\n</code></pre> <p>Using user-defined type can add more \"semantics\" to the code and make it easier to understand.</p> <p>Using <code>typedef</code> on <code>struct</code> frees us from typing the word <code>struct</code> every time.  We can do so with either:</p> <pre><code>typedef struct module {\n  char *code;\n  char *title;\n  long mc;\n} module;\n</code></pre> <p>or</p> <pre><code>typedef struct {\n  char *code;\n  char *title;\n  long mc;\n} module;\n</code></pre> <p>In either case, we can just use <code>module</code> like any other type:</p> <pre><code>void update_mc(module cs1010, long hours_spent_per_week) {\n  cs1010.mc = hours_spent_per_week/2.5;\n}\n</code></pre> <p>If you use third-party libraries or C libraries, chances are you will come across such types.  The use of <code>typedef</code> on <code>struct</code> is controversial.  There is a school of thought that thinks it makes the code harder to read as it obscured the fact that a variable is a struct.  Hidden cost in copying the variable onto the call stack as a parameter or returned value becomes non-obvious.  Interested students can read Linux's Kernel Coding Style for the pros and cons of this approach.</p>"},{"location":"notes/27-stdio.html","title":"Unit 27: Standard I/O Functions","text":"<p>We have been shielding you from the pain and pitfalls of using C I/O functions.  Since you are close to \"graduating\" from CS1010, this is a good time to show you what the real world is like.</p>"},{"location":"notes/27-stdio.html#printf","title":"printf","text":"<p>The function <code>printf</code> is used to print a formatted string to the standard output.  Unlike functions that we have seen so far, <code>printf</code> can take in a variable number of arguments, but it must have at least one argument -- a string written in a certain format.  The rest of the arguments can be of different types.  Let's look at an example:</p> <pre><code>char *name = \"Siri\";\nprintf(\"Hello! My name is %s.\\n\", name);\n</code></pre> <p>The code above prints <code>Hello! My name is Siri.</code>.</p> <p>There are two arguments to <code>printf</code>, both are strings.  The first is the string to print.  There is a placeholder <code>%s</code> in the string, which will be replaced by the second argument <code>name</code>.  The string to print ends with <code>\\n</code>, which is the new line character.</p> <p>The placeholder <code>%s</code> is called a format modifier.  It controls how to interpret the arguments (i.e., what type) and how to format the output.   The general format is:</p> <pre><code>%[flags][field_width][.precision][length_modifier]specifier\n</code></pre> <p>The specifier controls the interpretation of the argument.  <code>s</code> for string, <code>c</code> for character, <code>d</code> for integer (base 10), <code>f</code> for floating-point number, <code>p</code> for pointer (base 16).  We can additionally prepend this with length modifier.  <code>ld</code> for <code>long</code> integer, <code>lld</code> for <code>long long</code>, and <code>lf</code> for <code>double</code>.</p> <p>To format the output, we can prepend it with a number to indicate its field width, or minimum space used when printing.  E.g., <code>%3d</code> will pad the number printed with space if the number printed is less than 3 digits.  Adding a flag 0 in front, <code>%03d</code>, will pad the number with 0s if the number printed is less than 3 digits.  Other flags include <code>+</code>, which tells <code>printf</code> to print a sign (<code>+</code> or <code>-</code>) for the number.  For floating-point numbers, we can additionally control the precision, or the number of digits printed after the decimal point.  <code>%3.4lf</code> will print a double to four decimal points.</p> <p>Note: <code>cs1010_println_double</code> uses <code>%.4lf</code> as the format modifier.</p>"},{"location":"notes/27-stdio.html#pitfalls-when-using-printf","title":"Pitfalls when using <code>printf</code>","text":""},{"location":"notes/27-stdio.html#mismatch-types","title":"Mismatch Types","text":"<p><code>printf</code> does not check for the type of arguments we pass to it.  The compiler does, but it only politely warns us instead of throwing an error like other type mismatches.</p> <p>If you ignore such warnings, you might print strange things like:</p> <pre><code>  printf(\"%d %f\\n\", 100000000000, 100000000000);\n</code></pre> <p>or worse, crash your program:</p> <pre><code>  printf(\"%s %s\\n\", 100000000000, 100000000000);\n</code></pre>"},{"location":"notes/27-stdio.html#mismatch-number-of-arguments","title":"Mismatch Number of Arguments","text":"<p>Since <code>printf</code> expects a variable number of arguments, you can pass it fewer arguments than expected and the code would still compile (with warnings).  If you push ahead and run it anyway, <code>printf</code> will start to fetch arguments from the stack, pretending that it is there, causing weird things to happen.</p> <p>Consider:</p> <pre><code>printf(\"%d %s %s\\n\", 10);\n</code></pre> <p>It would cause <code>printf</code> to access the memory content of the stack as strings.</p>"},{"location":"notes/27-stdio.html#printing-user-input","title":"Printing User Input","text":"<p>We should also never do this:</p> <pre><code>char *str = cs1010_read_word();\nprintf(str);\n</code></pre> <p>The reason is that we have no control over what the user would type as input: the user may type \"%s\" into the standard input, so the variable <code>str</code> now points to <code>%s</code>, which <code>printf</code> treats as a format modifier, and output the content of the stack!  This is a huge security risk and is known as the externally-controlled format string vulnerability.</p> <p>We should always print a string using:</p> <pre><code>printf(\"%s\", str);\n</code></pre>"},{"location":"notes/27-stdio.html#scanf","title":"scanf","text":"<p>The function <code>scanf</code> is used to read inputs from the standard input.  It requires us to pass in pointers to variables where we want to store the input value is.  Like <code>printf</code>, it takes in one or more arguments, with the first argument being a format string containing one or more format specifiers.  The format specifier for <code>scanf</code> is simpler and has the following pattern:</p> <pre><code>%[*][field_width][length_modifier]specifier\n</code></pre> <p>For instance, to read an integer, a floating-point number, and a string of at most 10 characters,</p> <pre><code>long l;\ndouble d;\nchar s[11];\nscanf(\"%ld %lf %10s\", &amp;l, &amp;d, s);\n</code></pre> <p><code>scanf</code> scans the standard input, and tries to match it to the format specified.  The space in between the format specifier matches zero or more white spaces (space, tab, newline).  Scanning stops when an input character does not match such a format character or when an input conversion fails.</p> <p>Adding a <code>*</code> to the format modifier means that <code>scanf</code> should consume the inputs but not store them in any variables.  This, combined with <code>%[</code> <code>]</code> is useful to clear any remaining data from the standard input.</p>"},{"location":"notes/27-stdio.html#pitfalls-when-using-scanf","title":"Pitfalls When Using <code>scanf</code>","text":""},{"location":"notes/27-stdio.html#checking-for-error","title":"Checking for Error","text":"<p>The function <code>scanf</code> fails silently when the input character does not match a format or when the input conversion fails.  It might return an unexpected input.  We should always check the return value of <code>scanf</code> to make sure that it is reading properly.</p> <pre><code>long a;\nscanf(\"%ld\", &amp;a);\nprintf(\"%ld\", a);\n</code></pre> <p>The code above might print an uninitialized value if the input is not an integer.</p> <p>We should check</p> <pre><code>long a;\nlong result = scanf(\"%ld\", &amp;a);\nif (result == 1) {\n  printf(\"%ld\", a);\n}\n</code></pre> <p>The above, however, does not properly \"clear\" the standard input of the incorrect input.  So the next <code>scanf</code> calls would still try to read it again!</p> <p>To clear the input, we can use the <code>%*[^\\n]</code> modifier, which read in any characters except (<code>^</code>) the newline (<code>\\n</code>).  </p> <pre><code>long a;\nlong result = scanf(\"%ld\", &amp;a);\nif (result == 1) {\n  printf(\"%ld\", a);\n} else {\n  scanf(\"*[^\\n]\");\n}\n</code></pre> <p>As a side note, the <code>%[]</code> modifier is useful to read in strings containing a certain range of characters only.  E.g., you can read <code>%[a-zA-Z0-9]</code> to match any sequence of alphanumeric characters.</p>"},{"location":"notes/27-stdio.html#invalid-pointers","title":"Invalid Pointers","text":"<p>Since <code>scanf</code> expects the caller to pass in pointers to variables for it to store the results, we need to be careful about what we pass in.  It is easy to pass in something like this:</p> <pre><code>long *a;\nscanf(\"%ld\", a);\n</code></pre> <p>The compiler would not warn us since the type matches perfectly.  The program may crash since the pointer is not pointing to a valid memory location accessible by the program.</p>"},{"location":"notes/27-stdio.html#buffer-overflow","title":"Buffer Overflow","text":"<p>When we use <code>scanf</code> to read a string, it keeps reading until it reaches space, and stores everything that it reads into an array.  The problem here is that we do not know when it will stop reading, and therefore how big is the array that we need to allocate for the input!</p> <p>Let's say we do:</p> <pre><code>char name[10];\nprintf(\"What's your name?\", name);\nscanf(\"%s\", name);\nprintf(\"Hello %s!\\n\", name);\n</code></pre> <p>The program would crash if we enter a very long string in the standard input.</p> <p>You can read a beginners' guide away from scanf() for more information.</p>"},{"location":"notes/27-stdio.html#fgets","title":"fgets","text":"<p><code>fgets</code> is a better alternative to <code>scanf</code> for reading inputs (Note: this is what CS1010 library uses internally).  <code>fgets</code> takes three parameters, a pointer to a string (or buffer), the size of the buffer, and the input to read from (which can be a file, a network socket, or in our case, most of the time <code>stdin</code>).</p> <p>The advantage of <code>fgets</code> is that it never overflows the buffer (it knows the size).  Once we read the input, we can use functions such as <code>strtol</code> or <code>strtod</code> to convert the strings into <code>long</code> or <code>double</code>.</p>"},{"location":"notes/27-stdio.html#avoid-atol-or-atof","title":"Avoid atol or atof","text":"<p>Instead of <code>strtol</code> or <code>strtof, some old-school textbooks might show you that you can convert a string to a</code>long<code>or a</code>double<code>using</code>atol<code>or</code>atof<code>.  You should avoid these two functions (even the man pages of</code>atof` says so!).  They do not provide any mechanism for error checking if the string is not a valid integer or if the input is out of range of the type.</p> <p>You can read the source code for the CS1010 library to see how it uses <code>fgets</code>, <code>strtol</code> and related functions to parse numbers and strings from the standard inputs.</p>"}]}